//================================================================================================================
//================================================================================================================
//
//	"D4D mode" version
//	
//================================================================================================================
//================================================================================================================

/*
Rainbow Doom Monster Schematics
* Gains 1000 health per tier.

Uncommon
* Shoots two plasma bolts instead of a single stream.
* Attacks slightly faster with lasers, including delayed rotation.
	
Rare
* 3 plasma bolts
* Charged laser can slowly track its target
* Gains armored legs and base
	
Epic
* 4 plasma bolts
* Increased charge laser tracking speed
* Rotating lasers are quicker
	
Legendary
* Rotating lasers are now weak-charged lasers with no range limits
* Occasionally unleashes a small laser with its torrent of plasma bolts
	
Relic
* Faster target tracking
* Can leap at or away from target
* Attacks cannot be interrupted

CURSED (Black)
* Lasers last longer
* Spinning lasers are fully charged

BLESSED (White)
* All attacks replaced by shotgun laser
* Much more aggressive
* Easily distracted by infighting
* Attacks can insta-kill most enemies
* Deals extra damage to demon runes
*/

Class D4SpiderMastermind : D4AbstractBoss
{
	const CBAFlags = CBAF_AIMFACING|CBAF_PUFFTRACER|CBAF_NORANDOMPUFFZ|CBAF_NORANDOM|CBAF_EXPLICITANGLE;
	int user_angle;
	int user_counter;
	double user_pitch;
	int user_direction;
	int user_count;
	int user_staggertimer;
	
	override void Die(Actor source, Actor inflictor, int dmgflags = 0)
	{
		if (DamageTypeReceived == 'BerserkKill' || 
			DamageTypeReceived == 'MeleePunch' || 
			DamageTypeReceived == 'ChainsawKill' || 
			DamageTypeReceived == 'ChainsawPinata')
		{
			for (int i = 0; i < 5; i++)
				A_DropItem("D4PinataHealth");
		}
		Super.Die(source, inflictor, dmgflags = 0);
	}
	
	Default 
	{
		D4AbstractMonster.CrateDropAmount 3;
		D4AbstractMonster.CrateDropChance 192;
		D4AbstractMonster.CrateDropAlways 2;
		D4AbstractMonster.CashAmount 400;
		D4AbstractMonster.CashChainsawFinisher 2000;
		+BOSS
		+MISSILEMORE
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		+DONTCORPSE
		Health 3000;
		Radius 96;
		Height 100;
		Mass 1000;
		Speed 12;
		PainChance 30;
		Monster;
		MinMissileChance 160;
		SeeSound "Doom4/SpiderMastermind/Sight";
		//AttackSound "spider/attack";
		PainSound "Doom4/SpiderMastermind/Pain";
		DeathSound "Doom4/SpiderMastermind/Death";
		ActiveSound "Doom4/SpiderMastermind/Idle";
		Obituary "$OB_SPIDER";
		DamageFactor "BFGExploder", 0.0;
		DamageFactor "CyberdemonFireWave", 0.2;	//for if there's infight, otherwise cyberdemons rape this guy so easily
		PainChance "GloryKill", 255;
		WoundHealth 150;
	}
	States
	{
	Spawn:
	Idle:
		SPID A 0 A_StopSound(6);
		SPID AB 10 A_Look();
		Goto Idle+1;
	See:
		SPID A 3 { D4Chase(); A_PlaySound("Player/Demon/MastermindStep"); }
		SPID ABB 3 D4Chase();
		SPID C 3 { D4Chase(); A_PlaySound("Player/Demon/MastermindStep"); }
		SPID CDD 3 D4Chase();
		SPID E 3 { D4Chase(); A_PlaySound("Player/Demon/MastermindStep"); }
		SPID EFF 3 D4Chase();
		Loop;
		
		
	Missile:
	DecideAllAttacks:
		SPID A 0 
		{
			user_angle = user_counter = 0;
			return A_Jump(256,"PlasmaAttack","LaserShot","EletricBeams");
		}
		
	
	//---------------------------------------------------
	// Plasma attack
	PlasmaAttack:
		SPID A 20 BRIGHT A_FaceTarget();
	PlasmaLoop:
		SPID GH 4 BRIGHT 
		{
			A_FaceTarget();
			A_SpawnProjectile("SMMPlasma",40,0,0);
		}
		TNT1 A 0 A_MonsterRefire(10,"See");
		Loop;
	//---------------------------------------------------
	// Laser attack
	LaserShot:
		SPID AAAA 5 A_FaceTarget();
		SPID A 0 
		{
			A_SpawnItemEx("LaserChargeIndicator",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_NOCHECKPOSITION);
			A_PlaySound("Doom4/SpiderMastermind/LaserCharge",5,1,0,(target is "PlayerPawn" ? ATTN_NONE : ATTN_NORM));
		}
		SPID GGGGGGGGGG 2 
		{
			A_FaceTarget(0,0,0,0,FAF_MIDDLE);
			if (GetCvar("vid_renderer") && GetCvar("D4D_MonsterLasers"))
			{	
				A_CustomBulletAttack(0,0,1,0,"PacifistPuff",32767,CBAFlags,TargetPtr,"WhiteLaser",40,0);
			}
		}
		SPID G 3 //gives you a tiny bit of chance to run away
		{
			A_FaceTarget(0,0,0,0,FAF_MIDDLE);
			int attn = (target is "PlayerPawn" ? ATTN_NONE : ATTN_NORM);
			A_PlaySound("Doom4/Monsters/MastermindLaserFire",5,1,0,attn);
			A_PlaySound("Doom4/SpiderMastermind/LaserLoop",6,1,1,attn);
			A_PlaySound("Doom4/SpiderMastermind/LaunchPlasma",7,1,0,attn);
			user_pitch = pitch;
			user_count = 0;
		}
		SPID H 1 bright
		{
			if (!user_count && GetCvar("vid_renderer") && GetCvar("D4D_MonsterLasers"))
			{	
				A_CustomBulletAttack(0,0,1,0,"PacifistPuffSMM",32767,CBAFlags,TargetPtr,"BigRedLaserDrillSMM",40,0);
			}
			if (user_count <= 28)
			{
				if (GetCvar("vid_renderer") && GetCvar("D4D_MonsterLasers"))
				{	A_SpawnProjectile("SMMLaserWeakInvis",40,0,0,CMF_AIMDIRECTION,user_pitch);		}
				else
				{	A_SpawnProjectile("SMMLaserWeak",40,0,0,CMF_AIMDIRECTION,user_pitch);			}
			}
			else if (user_count <= 56)
			{
				if (GetCvar("vid_renderer") && GetCvar("D4D_MonsterLasers"))
				{	A_SpawnProjectile("SMMLaserStrongInvis",40,0,0,CMF_AIMDIRECTION,user_pitch);		}
				else
				{	A_SpawnProjectile("SMMLaserStrong",40,0,0,CMF_AIMDIRECTION,user_pitch);			}
			}
			else
			{	return ResolveState("EndLaserShot");	}
			
			user_count++;
			
			return ResolveState(null);
		}
		Wait;
	EndLaserShot:
		SPID G 4 { A_StopSound(6); user_count = 0; }
		Goto See;
		
	//---------------------------------------------------
	// Electro beams attack
	EletricBeams:
		TNT1 A 0 A_JumpIfCloser(800,"InRageForBeam");
		Goto DecideAllAttacks;
	InRageForBeam:
		SPID A 0 A_PlaySound("Doom4/SpiderMasterMind/LaserCharge",5,1,0,(target is "PlayerPawn" ? ATTN_NONE : ATTN_NORM));
		SPID AAAA 5 A_FaceTarget(0,0,0,0,FAF_MIDDLE);	//aims at target
		SPID A 0	//attack setup
		{
			user_direction = randompick(-1,1); //if 1, means will turn left, -1 means right
			user_angle = 0;
			user_pitch = pitch;
			A_PlaySound("Doom4/SpiderMastermind/LaserLoop",6,1,1,(target is "PlayerPawn" ? ATTN_NONE : ATTN_NORM));
			A_PlaySound("Doom4/Monsters/MastermindBeamFire",7,1);
		}
		
		SPID AAAAAAAAAAAAA 2
		{
			A_SpawnProjectile("SMMElectroBeam",40,0,0,CMF_AIMDIRECTION,user_pitch);
			A_SpawnProjectile("SMMElectroBeam",40,0,60,CMF_AIMDIRECTION,user_pitch);
			A_SpawnProjectile("SMMElectroBeam",40,0,-60,CMF_AIMDIRECTION,user_pitch);
			A_SpawnProjectile("SMMElectroBeam",40,0,120,CMF_AIMDIRECTION,user_pitch);
			A_SpawnProjectile("SMMElectroBeam",40,0,-120,CMF_AIMDIRECTION,user_pitch);
			A_SpawnProjectile("SMMElectroBeam",40,0,180,CMF_AIMDIRECTION,user_pitch);
		}
	EleBeamLoop:
		SPID G 2
		{
			if (user_counter >= 40)
			{
				user_angle = user_counter = 0;
				return ResolveState("EndBeamLoop");
			}
			A_SpawnProjectile("SMMElectroBeam2",40,0,0+user_angle,CMF_AIMDIRECTION,user_pitch);
			A_SpawnProjectile("SMMElectroBeam2",40,0,60+user_angle,CMF_AIMDIRECTION,user_pitch);
			A_SpawnProjectile("SMMElectroBeam2",40,0,-60+user_angle,CMF_AIMDIRECTION,user_pitch);
			A_SpawnProjectile("SMMElectroBeam2",40,0,120+user_angle,CMF_AIMDIRECTION,user_pitch);
			A_SpawnProjectile("SMMElectroBeam2",40,0,-120+user_angle,CMF_AIMDIRECTION,user_pitch);
			A_SpawnProjectile("SMMElectroBeam2",40,0,-180+user_angle,CMF_AIMDIRECTION,user_pitch);
			
			user_angle += (4 * user_direction);
			user_counter++;
			return ResolveState(null);
		}
		Loop;
	EndBeamLoop:
		SPID A 10 A_StopSound(6);
		Goto See;

	
	
	Pain:
		SPID I 3 A_StopSound(6);
		SPID I 3 A_Pain();
		Goto See;
	Death:
		SPID J 20 
		{
			if (RuneChance(RuneChance_Master))
			{	A_SpawnItemEx("MastermindRune",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION); }
			
			bThruActors = true;
			//D4SetupLoot(true);
			//D4DropItems();
			//"MastermindCashGiver");
			A_StopSound(6);	A_Scream(); 
		}
		SPID K 10 
		{	A_NoBlocking();	A_PlaySound("Doom4/SpiderMastermind/GunExplode",7);	}
		SPID L 10;
		SPID M 10
		{
			A_SpawnItemEx("SpiderMasterMindDeathFX",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_SETTRACER|SXF_ORIGINATOR|SXF_TRANSFERTRANSLATION);
			A_SpawnItemEx("BossExploderSFX",0,0,0,0,0,0,0,32|SXF_SETTRACER|SXF_ORIGINATOR);
		}
		SPID NOPQR 10;
		SPID S 30;
		SPID S -1 { bCorpse = true;	A_KillMaster("Massacre",KILS_FOILINVUL,null,"D4DSpawner");  } 
		Stop;
	GloryEnd:
		TNT1 A 0 A_Die("MeleePunch");
	Death.BerserkKill:
	Death.MeleePunch:
	Death.ChainsawPinata:
	XDeath:
		"####" "#" 0  //loot drop
		{
			//D4SetupLoot(true);
		}		
	XDeathNoDrops:	
		SPID J 20 
		{
			bThruActors = true;
			XDeathGush();
			//D4DropItems();
			//"MastermindCashGiver");
			A_KillMaster("Massacre",KILS_FOILINVUL,null,"D4DSpawner");
			
			A_StopSound(6);	
			A_Scream(); 

			if (RuneChance(RuneChance_Master))
			{	A_SpawnItemEx("MastermindRune",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION); }
		}
		SPID K 10 
		{	A_NoBlocking();	A_PlaySound("Doom4/SpiderMastermind/GunExplode",7);	}
		SPID L 10 ;
		SPID M 10 
		{
			if(CountInv("DeathByMassacre") == 0)
			{
				A_SpawnItemEx("SpiderMasterMindDeathFX",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_SETTRACER|SXF_ORIGINATOR|SXF_TRANSFERTRANSLATION);
				A_SpawnItemEx("BossExploderSFX",0,0,0,0,0,0,0,32|SXF_SETTRACER|SXF_ORIGINATOR);
		}	}
		SPID NOPQR 10;
		SPID S 30;
		SPID S -1 {	bCorpse = true; A_KillMaster("Massacre",KILS_FOILINVUL,null,"D4DSpawner");  }
		Stop;
	//------------------------------------------------------------------------
	// Start of Stagger / Glory Kill states
	//------------------------------------------------------------------------
	Wound:
		"####" "#" 1
		{
			if(GetCvar("D4D_ExecutionsON"))
			{
				if(countinv("FinisherToken")==0) //if it isnt healing already
				{								//will heal and give the token that indicates it's executable
					A_SpawnItemEx("MastermindHighlight",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_NOCHECKPOSITION); //to highlight if ON, and to remove the token after the Monster; heals
					A_GiveInventory("FinisherToken",1);	//token to allow melee attack to execute
				}
				
				if(GetCvar("D4D_MonsterStagger")==1) //will the monsters stagger at all?
				{
					return ResolveState("Stagger");	//stays there for a few seconds
				}
				else
				{
					return ResolveState(null);
				}
			}
			return ResolveState(null);
		}
		Goto See;
	Stagger:
		SPID I 0 
		{
			if(GetCvar("D4D_ExecutionHighlight")==1)
			{	return ResolveState("PrepareStaggerHighlight");}
			else
			{	return ResolveState("StagLooper");	}
		}
		Goto StagLooper;
	PrepareStaggerHighlight:
		SPID U 0;
		Goto StagLooper;
	
	StagLooper:
		"####" "#" 1
		{
			if(!countinv("FinisherToken"))
			{
				return ResolveState("See");
			}
			if(GetCvar("D4D_NoisyStagger") && countinv("PainSoundToken"))
			{ 
				A_Pain(); 
				A_TakeInventory("PainSoundToken");
			}
			
			return ResolveState(null);
		}
		Loop;
		
	// Finisher attack(s) with animations ON
	Death.GloryKill:
		TNT1 A 0 { bSolid = false; }
		SPID AA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION) ;
		"####" A 0
		{
			if(countinv("GloryKill1Token"))
			{	return ResolveState("GloryEnd1"); }
			
			if(countinv("GloryKill2Token"))
			{	return ResolveState("GloryEnd2"); }
			
			if(countinv("GloryKill3Token"))
			{	return ResolveState("GloryEnd3"); }
			return ResolveState(null);
		}
	GloryEnd1:
		"####" AAAAAAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" A 0 A_Pain();
		"####" IIIIII 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" AAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		Goto GloryEnd;
	GloryEnd2:
		"####" AAAAAAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" A 0 A_Pain();
		"####" IIIIII 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" AAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		Goto GloryEnd;
	GloryEnd3:
		"####" AAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" I 0 A_ChangeVelocity(x: -8, z: 10, flags: CVF_RELATIVE);
		Goto GloryEnd;
	}
}

Class BossExploderSFX : Actor 
{
	Default 
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 AAAA 10 NODELAY
		{
			A_PlaySound("Doom4/Weapon/RocketLauncher/Q4Explo");
			A_SetTics(random(10,20));
		}
		Stop;
	}
}

Class PacifistPuffSMM : PacifistPuff
{
	States
	{
	Spawn:
		TNT1 A 60;
		Stop;
	}
}

Class BigRedLaserDrillSMM : TrailBeamStaticScalingSpawner
{
	Default 
	{
		XScale 0.2;
	}
	States
	{
	Spawn:
		X202 J 0 NoDelay
		{
			user_DoCheckSight = 0;
			user_DoCheckRange = 0;
			user_DoCheckFOV = 0;
			user_MaxDistance = 30000;
			user_checkrangea = 4096;
			user_checkfova = 90.0;
			
			A_RearrangePointers(DefPtr,TargetPtr,DefPtr,4);
			A_FaceTracer(0,0,0,0,FAF_MIDDLE);
			
			if (GetDistance(true,TracerPtr) <= 2048)
			{	A_SpawnItemEx("RedLaserSMM",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);	}
			A_SpawnItemEx("RedLaserSMM",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
			
			// Grab the velocity IMMEDIATELY.
			if (target) { vel = target.vel; }
			
			// The angle and pitch won't change so go ahead and save it now.
			user_pitch = pitch;
			user_angle = angle;
			user_distb = Min(user_MaxDistance, GetDistance(true,TracerPtr));
			
			// user_dista = distance currently travelled.
			// user_distb = maximum distance.
			while ((user_dista < user_distb))
			{
				if (user_DoCheckRange)		{	user_checkrangeb = (!(A_CheckRange(user_checkrangea,"Null",false)) ? 1 : 0);	}
				else						{	user_checkrangeb = 1;	}
				
				if (user_DoCheckSight)		{	user_checksight = (!(A_CheckSight("Null")) ? 1 : 0);	}
				else						{	user_checksight = 1;	}
				
				if (user_DoCheckFOV)		{	user_checkfovb = ((abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) <= user_checkfova) ? 1 : 0);	}
				else						{	user_checkfovb = 1;		}
				
				// Spawn the beam with the same angle and pitch. Note that the
				// beam is being centered so we have to take that into account
				// and spawn it FORWARD based on half the beam's length.
				// Then move forward by a beam's length and repeat until done.
				if (user_checkrangeb && user_checksight && user_checkfovb)
				{	A_SpawnItemEx("BigRedLaserBeamSMM",cos(pitch) * (StepDistance / 2.0),0,-sin(pitch) * (StepDistance / 2.0),0,0,0,0,SpawnFlags);	}
				A_Warp(DefPtr,cos(pitch) * StepDistance,0,-sin(pitch) * StepDistance,0,WARPF_NOCHECKPOSITION);
				user_dista += StepDistance;
			}
		}
		Stop;
	}
}

Class BigRedLaserBeamSMM : TrailBeamStaticScaling
{
	Default 
	{
		XScale 0.2;
	}
	States
	{
	Spawn:
		"####" "#" 0 NoDelay
		{
			user_timeup = 10.0;
			user_wait = 39;
			user_timedown = 7.0;
			
			// Set this to the actor's same name. The TID will prevent it spawning infinitely (tid * 256).
			A_SpawnItemEx("BigRedLaserBeamSMM",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS|SXF_TRANSFERSPRITEFRAME,tid * 256,1);
			return ResolveState("Setup");
		}
	}
}

Class RedLaserSMM : TrailBeamJitterSpawner
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[2,1,1]";
		XScale 0.2;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			user_count = 52;
			user_DoCheckSight = 1;
			user_DoCheckRange = 1;
			user_checkrangea = 2048;
			return ResolveState("Setup");
		}
	}
}

Class SpiderMastermindDeathFX : Actor 
{
	const MinX = 20;
	const MaxX = 45;
	const MinZ = 8;
	const MaxZ = 30;
	int user_max;
	int user_c;
	
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "Add";
		Alpha 0.75;
		Translation "0:255=%[0,0,0]:[2,0,0]";
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			A_Warp(MasterPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYVELOCITY);
			if (user_max <= 0)
			{	user_max = 50;	}
			
			if (!A_CheckSight("Null"))
			{
				if (user_c == 8 ||
					user_c == 12 ||
					user_c == 16 ||
					user_c == 20 ||
					user_c == 24 ||
					user_c == 28 ||
					user_c == 32 ||
					user_c == 36)
				{	
					A_SpawnItemEx("D4RocketExplosionNoGL",random(20,80),0,random(10,60),0,0,0,random(0,359),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERALPHA);	
					A_SpawnItemEx("D4RocketExplosionNoGL",random(20,80),0,random(10,60),0,0,0,random(0,359),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERALPHA);
					A_SpawnItemEx("D4RocketExplosionNoGL",random(20,80),0,random(10,60),0,0,0,random(0,359),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERALPHA);
				}
				
				if (user_c == 20)
				{
					A_SpawnItemEx("BloodGibDropper",random(MinX,MaxX),0,random(MinZ,MaxZ),vel.x,vel.y,vel.z,random(0,359),SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
					A_SpawnItemEx("BloodGibDropper",random(MinX,MaxX),0,random(MinZ,MaxZ),vel.x,vel.y,vel.z,random(0,359),SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
					A_SpawnItemEx("BloodGibDropper",random(MinX,MaxX),0,random(MinZ,MaxZ),vel.x,vel.y,vel.z,random(0,359),SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
				}
			}
			
			if (user_c == 20)
			{
				A_PlaySound("Doom4/Other/GibExplode1",5);
				A_PlaySound("Doom4/Other/GibExplode2",6);
				A_PlaySound("Doom4/Other/GibExplode3",7);
			}
			user_c++;
			
			if (user_c > user_max)
			{	return ResolveState("Null");	}
			return ResolveState(null);
		}
		Loop;
	}
}

//------------------------------------------------------------------
// Red big laser static
Class SMMLaserWeak : FastProjectile	//main beam aimed at you, fires a few weak ones
{
	Default 
	{
		Speed 300;
		MissileType "SMMLaserTrail";
		MissileHeight 8;
		Radius 3;
		Height 6;
		Damage 5;
		Decal "RedElectricDecalBig";
	}
	States
	{
	Spawn:
		TNT1 A 4;
		Loop;
	Death:
		TNT1 A 3;
		Stop;
	}
}
Class SMMLaserWeakInvis : FastProjectile
{
	Default 
	{
		Speed 300;
		Radius 3;
		Height 6;
		Damage 5;
		Decal "RedElectricDecalBig";
	}
	States
	{
	Spawn:
		TNT1 A 4;
		Loop;
	Death:
		TNT1 A 3;
		Stop;
	}
}
Class SMMLaserStrong : SMMLaserWeak	//fires this one after the weak ones, get the hell away from the attack
{
	Default 
	{
		Damage 15;
	}
}
Class SMMLaserStrongInvis : SMMLaserWeakInvis
{
	Default 
	{
		Damage 15;
	}
}
Class SMMLaserTrail : Actor 
{
	Default 
	{
		+CLIENTSIDEONLY
		+NOINTERACTION
		+FORCEXYBILLBOARD
		RenderStyle "Add";
		Scale 0.4;
		//Translation "0:255=%[0,0,0]:[2,0.0,0.0]"
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256,"Type1","Type2","Type3","Type4");
	Type1:
		HSPL ABCDEG 1 Bright;
		Stop;
	Type2:
		HSPL DEGHBD 1 Bright;
		Stop;
	Type3:
		HSPL HBDCGE 1 Bright;
		Stop;
	Type4:
		HSPL CGEABC 1 Bright;
		Stop;

	}
}

Class LaserChargeIndicator : Actor 
{
	Default 
	{
		RenderStyle "Add";
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Translation "0:255=%[0,0,0]:[2.0,0.2,0.2]";
		Scale 2.0;
		Alpha 0.01;
	}
	States
	{
	Spawn:
		X060 AAAAAAAAAAAAAAAAAAAA 1 Bright NODELAY
		{
			A_FadeIn(0.05);
			A_SetScale(Scale.X-0.1);
			A_Warp(MasterPtr,30,4,45,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
		}
		Stop;
	}
}

//------------------------------------------------------------------
// Multiple yellow lasers, moving in circle
Class SMMElectroBeam : FastProjectile	//main beam aimed at you
{
	Default 
	{
		Speed 280;
		MissileType "SMMElectroBeamTrail";
		MissileHeight 8;
		Radius 3;
		Height 6;
		DamageFunction (random(1,4));
		+BLOODLESSIMPACT
		+RIPPER
		Decal "OrangeElectricDecal";
	}
	States
	{
	Spawn:
		TNT1 A 4;
		Stop;
	Death:
		TNT1 A 3;
		Stop;
	}
}
Class SMMElectroBeam2 : SMMElectroBeam //stronger version, since it's not aimed at you, if it connects, will deal better damage
{
	Default 
	{
		Damage 3;
	}
}


Class SMMElectroBeamTrail : Actor 
{
	Default 
	{
		+CLIENTSIDEONLY
		+NOINTERACTION
		+FORCEXYBILLBOARD
		RenderStyle "Add";
		Scale 0.35;
		Translation "0:255=%[0,0,0]:[1.2,0.7,0.0]";
	}
	States
	{
	Spawn: 
		TNT1 A 0 NoDelay A_Jump(256,"Type1","Type2","Type3","Type4");
	Type1:
		HSPL ABC 1 Bright;
		Stop;
	Type2:
		HSPL DEG 1 Bright;
		Stop;
	Type3:
		HSPL HBD 1 Bright;
		Stop;
	Type4:
		HSPL CGE 1 Bright;
		Stop;

	}
}


//------------------------------------------------------------------
Class SMMPlasma : D4AbstractMissile
{
	Default 
	{
		Projectile;
		Radius 7;
		Height 12;
		Scale 0.27;
		RenderStyle "Add";
		Alpha 0.99;
		Speed 25;
		FastSpeed 30;
		Damage 6;
		SeeSound "Doom4/Monsters/PlasmaShot";
		Translation "0:255=%[0,0,0]:[1.3,0.7,0.3]";
		+FORCEXYBILLBOARD
		Decal "D4PlasmaMonsterBig";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY;
		Goto Looper;
	Looper:
		SPIR P 2 Bright Light("OrangeSmallPoint2")
		{
			if (HQ)
			{
				A_SpawnItemEx("SSMPlasmaTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
			}
		}
		Loop;
	Death:
		TNT1 A 0 A_SpawnItemEx("SMMPlasmaBallPuff",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
		TNT1 A 3 Light("OrangeSmallPoint1");
		TNT1 A 3 Light("OrangeSmallPoint2");
		TNT1 A 3 Light("OrangeSmallPoint3");
		Stop;
	}
}

Class SSMPlasmaTrail : Actor 
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "Add";
		Scale 0.1;
		Translation "0:255=%[0,0,0]:[1.3,0.6,0.4]";
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		DB19 ABCDEFGHUIJKLMNOPQRSTUVWXYZ 1 Bright
		{
			A_FadeOut(0.05);
			A_SetScale(Scale.X-0.005);
		}
		Loop;
	}
}
Class SMMPlasmaBallPuff : Actor 
{
	const Scaler = 0.035;
	double user_scaler;	//this one is to easily tweak the inherited versions
	
	Default 
	{
		+CLIENTSIDEONLY
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+PUFFONACTORS
		Scale 0.1;
		RenderStyle "Add";
		Alpha 0.99;
		Translation "0:255=%[0,0,0]:[1.3,0.7,0.3]";
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NODELAY
		{
			if (GetCvar("HQEffects"))
			{
				A_SpawnParticle("FF974D",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.3,1.4),0,0,vel.z-0.08);
				A_SpawnParticle("FF974D",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.3,1.4),0,0,vel.z-0.08);
				A_SpawnParticle("FFAD29",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.3,1.4),0,0,vel.z-0.08);
				A_SpawnParticle("FFAD29",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.3,1.4),0,0,vel.z-0.08);
				A_SpawnParticle("FF8000",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.3,1.4),0,0,vel.z-0.08);
				A_SpawnParticle("FF8000",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.3,1.4),0,0,vel.z-0.08);
			}
		}
		TNT1 A 0 A_Jump(256,"Type1","Type2","Type3","Type4","Type5","Type6","Type7","Type8");
	Type1:
		DB21 ABCDEFGHI 1 Bright A_SetScale(Scale.X+Scaler);
		Stop;
	Type2:
		DB21 JKLMNOPQR 1 Bright A_SetScale(Scale.X+Scaler);
		Stop;
	Type3:
		DB22 ABCDEFGHI 1 Bright A_SetScale(Scale.X+Scaler);
		Stop;
	Type4:
		DB22 JKLMNOPQR 1 Bright A_SetScale(Scale.X+Scaler);
		Stop;
	Type5:
		DB23 ABCDEFGHI 1 Bright A_SetScale(Scale.X+Scaler);
		Stop;
	Type6:
		DB23 JKLMNOPQR 1 Bright A_SetScale(Scale.X+Scaler);
		Stop;
	Type7:
		DB24 ABCDEFGHI 1 Bright A_SetScale(Scale.X+Scaler);
		Stop;
	Type8:
		DB24 JKLMNOPQR 1 Bright A_SetScale(Scale.X+Scaler);
		Stop;
	}
}



//================================================================================================================
//================================================================================================================
//
//	Regular Doom version 
//
//================================================================================================================
//================================================================================================================
Class D4OldSpiderMastermind : D4AbstractBoss // : SpiderMastermind
{
	int user_staggertimer;
	
	Default 
	{
		D4AbstractMonster.CashAmount 400;
		D4AbstractMonster.CashChainsawFinisher 2000;
		+BOSS
		+MISSILEMORE
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		+DONTCORPSE
		Health 3000;
		Radius 128;
		Height 100;
		Mass 1000;
		Speed 12;
		PainChance 40;
		Monster;
		MinMissileChance 160;
		SeeSound "spider/sight";
		AttackSound "spider/attack";
		PainSound "spider/pain";
		DeathSound "spider/death";
		ActiveSound "spider/active";
		Obituary "$OB_SPIDER";
		DamageFactor "BFGExploder", 0.0;
		PainChance "GloryKill", 255;
		WoundHealth 150;
	}
	States
	{
	Spawn:
		SPID AB 10 A_Look();
		Loop;
	See:
		SPID A 3 A_Metal;
		SPID ABB 3 D4Chase();
		SPID C 3 A_Metal;
		SPID CDD 3 D4Chase();
		SPID E 3 A_Metal;
		SPID EFF 3 D4Chase();
		Loop;
	Missile:
		SPID A 20 BRIGHT A_FaceTarget();
		SPID G 4 BRIGHT A_SPosAttackUseAtkSound;
		SPID H 4 BRIGHT A_SposAttackUseAtkSound;
		SPID H 1 BRIGHT A_SpidRefire;
		Goto Missile+1;
	Pain:
		SPID I 3;
		SPID I 3 A_Pain();
		Goto See;
	Death:
		SPID J 20 
		{	
			if (RuneChance(RuneChance_Master))
			{	A_SpawnItemEx("MastermindRune",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION); }
			
			bThruActors = true;
			//D4SetupLoot(true);
			//D4DropItems();
			//"MastermindCashGiver");
			A_Scream();
		}
		SPID K 10 A_NoBlocking();
		SPID LMNOPQR 10;
		SPID S 30;
		SPID S -1
		{
			bCorpse = true;
			A_KillMaster("Normal",KILS_FOILINVUL,null,"D4DSpawner");
			
		}
		Stop;
	GloryEnd:
		TNT1 A 0 A_Die("MeleePunch");
	Death.BerserkKill:
	Death.MeleePunch:
	Death.ChainsawPinata:
		"####" "#" 0 { Pinatas.AddItem("D4PinataHealth", 5); }
	XDeath:
		"####" "#" 0  //loot drop
		{
			//D4SetupLoot(true);
		}
		Goto XDeathNoDrops;
		
	XDeathNoDrops:	
		SPID J 20 
		{
			bThruActors = true;
			XDeathGush();
			//D4DropItems();
			//"MastermindCashGiver");
			A_KillMaster("Massacre",KILS_FOILINVUL,null,"D4DSpawner");
		
			if (RuneChance(RuneChance_Master))
			{	A_SpawnItemEx("MastermindRune",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION); }
			A_Scream();
		}
		SPID K 10 A_NoBlocking();
		SPID LMNOPQR 10;
		SPID S 30;
		SPID S -1 
		{
			A_KillMaster("Massacre",KILS_FOILINVUL,null,"D4DSpawner");
			
			bCorpse = true;
		}
		Stop;
	//------------------------------------------------------------------------
	// Start of Stagger / Glory Kill states
	//------------------------------------------------------------------------
	Wound:
		"####" "#" 1
		{
			if(GetCvar("D4D_ExecutionsON"))
			{
				if(countinv("FinisherToken")==0) //if it isnt healing already
				{								//will heal and give the token that indicates it's executable
					A_SpawnItemEx("MastermindHighlight",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_NOCHECKPOSITION); //to highlight if ON, and to remove the token after the Monster; heals
					A_GiveInventory("FinisherToken",1);	//token to allow melee attack to execute
				}
				
				if(GetCvar("D4D_MonsterStagger")==1) //will the monsters stagger at all?
				{
					return ResolveState("Stagger");	//stays there for a few seconds
				}
				else
				{
					return ResolveState(null);
				}
			}
			return ResolveState(null);
		}
		Goto See;
	Stagger:
		SPID I 0 
		{
			if(GetCvar("D4D_ExecutionHighlight")==1)
			{	return ResolveState("PrepareStaggerHighlight");}
			else
			{	return ResolveState("StagLooper");	}
		}
		Goto StagLooper;
	PrepareStaggerHighlight:
		SPID U 0;
		Goto StagLooper;
	
	StagLooper:
		"####" "#" 1
		{
			if(!countinv("FinisherToken"))
			{
				return ResolveState("See");
			}
			if(GetCvar("D4D_NoisyStagger") && countinv("PainSoundToken"))
			{ 
				A_Pain(); 
				A_TakeInventory("PainSoundToken");
			}
			
			return ResolveState(null);
		}
		Loop;
		
	// Finisher attack(s) with animations ON
	Death.GloryKill:
		TNT1 A 0 { bSolid = false; }
		SPID AA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" A 0
		{
			if(countinv("GloryKill1Token"))
			{	return ResolveState("GloryEnd1"); }
			
			if(countinv("GloryKill2Token"))
			{	return ResolveState("GloryEnd2"); }
			
			if(countinv("GloryKill3Token"))
			{	return ResolveState("GloryEnd3"); }
			return ResolveState(null);
		}
	GloryEnd1:
		"####" AAAAAAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" A 0 A_Pain();
		"####" IIIIII 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" AAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		Goto GloryEnd;
	GloryEnd2:
		"####" AAAAAAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" A 0 A_Pain();
		"####" IIIIII 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" AAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		Goto GloryEnd;
	GloryEnd3:
		"####" AAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" I 0 A_ChangeVelocity(x: -8, z: 10, flags: CVF_RELATIVE);
		Goto GloryEnd;
	}

}

