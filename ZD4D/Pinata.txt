
//============================================================================================================
//============================================================================================================
//
// Pi√±ata pickups
//
//============================================================================================================
//============================================================================================================


Class D4PinataBorder : Actor 
{
	int user_t;
	int count;
	double user_pitch;
	double user_dist;
	const Increment = 4;
	const Distance = 200;
	Actor ms;
	int Border;
	Default 
	{
		+NOINTERACTION
		+BRIGHT
		+FORCEXYBILLBOARD
		Scale 0.3;
		DistanceCheck "user_MaxDrawDistance";
	}
	
	override void PostBeginPlay() { Destroy();	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			if (!master)	{	Destroy();	return ResolveState(null);	}
			ms = master;
			if (master.GetClass() == "D4PinataArmor")		{ return ResolveState(1); }
			if (master.GetClass() == "D4PinataHealth")		{ return ResolveState(2); }
			if (master is "D4Carrion")						{ return ResolveState(3); }
			if (master is "D4BFGAmmo")						{ return ResolveState(4); }
			if (master is "Ammo")							{ return ResolveState(3); }
			return ResolveState("Null");
		}
		PIN3 ABDH 0 A_Jump(256,"Enact");
	Enact:
		"####" "#" 1
		{
			if (!master || master != ms)	{ Destroy(); return; }
			A_Warp(MasterPtr,0,0,5,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_COPYVELOCITY,"Null");
		}
		Loop;
	}
}

Class D4PinataParticles : Actor 
{
	Color PT;
	Vector3 oldpos;
	int frm;
	enum PinataParticleBorder
	{
		CV_Border = 			0,
		CV_BorderParticle = 	1,
		CV_Particle = 			2,
		CV_None = 				3,
		
		CV_ParticleBorder = CV_BorderParticle,
		Distance = 				200,
		Increment = 			4
	};
	
	Default 
	{
		Radius 1;
		Height 1;
		+NOINTERACTION
		+NOTONAUTOMAP
		+BRIGHT
		+FORCEXYBILLBOARD
		Scale 0.3;
		DistanceCheck "user_MaxDrawDistance";
	}
	
	override void PostBeginPlay() 
	{	
		if (!master)	{	Destroy();	return;	}
		oldpos = master.pos;
		Super.PostBeginPlay();
		
		ChangeTID(0);
		
		Class<Actor> cls = master.GetClass();
		
		if (cls == "D4PinataArmor")
		{	PT = "00FF00";	frm = 0;	}
		else if (master is "D4BFGAmmo")
		{	PT = "00FF00";	frm = 7;	}
		else if (cls == "D4PinataCarrion")
		{	PT = "FF2846";	frm = 3;	A_SetTranslation("CarrionBorder");	}
		else if (cls == "D4PinataHealth")
		{	PT = "29C9FF";	frm = 1;	}
		else
		{	PT = "FFED29";	frm = 3;	}
	}
	
	// Credit to TheZombieKiller for this. <3
	void SpawnPinataParticleLine(Color c, double units, Vector3 pointA, Vector3 pointB)
	{
		//if (pointA == pointB)	return;
		// get a vector pointing from A to B
		let pointAB = pointB - pointA;
		
		// get distance
		let dist = pointAB.Length();
		
		// normalize it
		pointAB /= dist;
		
		// iterate in units of 4
		for (double i = 1; i <= dist; i += units)
		{
			// we can now use 'pointA + i * pointAB' to
			// get a position that is 'i' units away from
			// pointA, heading in the direction towards pointB
			let position = i * pointAB;
			A_SpawnParticle(c,SPF_FULLBRIGHT,25,8,0,position.x,position.y,position.z);
		}
	}
		
	States
	{
	Spawn:
		PIN3 A 0 NoDelay { Frame = frm; }
	Looping:
		"####" "#" 1
		{
			
			if (!master)	{ Destroy();	return;	}
			int cv = GetCvar("D4D_PinataParticles");
			if (cv == CV_Border || cv == CV_BorderParticle)
			{
				bINVISIBLE = (cv == CV_Particle) ? true : false;
				A_Warp(MasterPtr,0,0,5,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_COPYVELOCITY,"Null"/*,0.5*/);
				
				if ((cv == CV_BorderParticle || cv == CV_Particle))
				{	
					SpawnPinataParticleLine(PT, 4.0, master.pos - master.vel, master.pos);
					oldpos = master.pos;
				}
			}
			else
			{	bINVISIBLE = true; A_SetTics(35);	}
		}
		Loop;
	}
}

Struct PlrCheck play
{
	//--------------------------------------------------------------------------
	static void SetFlying (Actor who, bool enabled)
	{
		if (!who) return;
		
		who.bNOINTERACTION = who.bNOCLIP = enabled;
		who.A_ChangeLinkFlags(enabled);
	}
	//--------------------------------------------------------------------------
	// Checks if the freeze cheat or powerup is active.
	static bool CheckTimeFreeze()
	{	return (globalfreeze || level.Frozen);	}
	
	//-------------------------------------------------------------------------
	// Checks if the pinata and/or upgrade is near a player that's not morphed 
	// and alive. 
	static Actor CheckForPlayers(Actor checkee, int distance = -1)
	{
		if (!checkee)	return null;
		Actor trc = checkee.tracer;
		if (trc)
		{
			if (trc is "PlayerPawn" && !trc.FindInventory("PowerMorph",true) &&
				trc.health > 0)
					return trc;
		}
		
		if (distance <= 0) distance = RadiusPull;
		
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i])
			{
				Actor plr = players[i].mo;
				if (plr && !plr.FindInventory("PowerMorph",true) && plr.health > 0 && 
					checkee.Distance3D(plr) <= distance)
				{
					return plr;
				}
			}
		}
		return null;
	}
}

/* UpgradePinataFlier
 *
 * Serves as the latest think tank for the pinatas to help reduce code bloat.
 * One can pass in what items to check along with the upgrades that supplement
 * the check to ensure it's eligible for picking up.
 * 
 * I.e. 
 */

Class UpgradePinataFlier : Thinker
{
	Actor 				Spawner;			// The main actor to move and monitor.
	PlayerPawn			Target;				// The target to fly after.
	Class<Inventory> 	Item;				// The item to check for < max
	Class<Inventory>	Condition;			// Other item to check
	int					Distance;
	int					Conditional; 		// Amount of the conditional to add on
	int 				MaxAmt;				// Max Amount
	bool 				NoUnlimited;		// Ignore unlimited pickup cvar?
	bool				DestroyMe;			// Destroy on the next tic.
	bool				NoItem;				// For upgrades.
	private bool		IsHealth;			// Special treatment required.
	private int			OddTic;
	
	override void PostBeginPlay()
	{
		if (Distance == 0)	Distance = -1;
		// Strictly enforce conditions for health.
		if (Item && Item == 'Health')
		{
			NoUnlimited = IsHealth = true;
			Condition = null;
			Conditional = 0;
			NoItem = false;
			
		}
		Super.PostBeginPlay();
	}
	
	override void Tick()
	{
		if (DestroyMe || !Spawner || (!NoItem && !Item))
			return Destroy();
			
		Inventory it = Inventory(Spawner);
		if (!it || it.Owner)
			return Destroy();
		
		OddTic = (OddTic + 1) % 2;
		
		if (PlrCheck.CheckTimeFreeze() || !OddTic)	
			return Super.Tick();
		
		Target = PlayerPawn(PlrCheck.CheckForPlayers(Spawner, Distance));
		int Amt = 0;
		if (Target && !NoItem)
		{
			if (IsHealth)
			{
				Amt = Target.health;
				MaxAmt = Target.GetMaxHealth(true);
			}
			else	
				Amt = Target.CountInv(Item) + (Condition ? Target.CountInv(Condition) : 0);
				
			if ((NoUnlimited || !sv_unlimited_pickup) && Amt >= MaxAmt)
				Target = null;
		}
		
		// Will pass in the player that's eligible for this item.
		Spawner.tracer = Target;
		
		Super.Tick();
	}
}

//---------------------------------
// Pinata Armor
Class D4PinataArmor : D4ArmorBasePickup
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4ArmorBasePickup.SaveAmount 6;
		D4PinataArmor.Lifetime PinataLifetime;
		Scale 0.3;
		Radius 8;
		Height 16;
		Gravity 0.4;
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+NOBLOCKMONST
		+INVENTORY.ALWAYSPICKUP
		BounceFactor 0.5;
		DistanceCheck "user_MaxDrawDistance";
		Inventory.PickUpSound "Doom4/Pickups/ArmorShard";
		Inventory.PickupMessage "";
	}
	
	States
	{
	Spawn:
		PIN2 A 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataBorder",0,0,5,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0,Color_Green);
			invoker.flier = new("UpgradePinataFlier");
			if (invoker.flier)
			{
				invoker.flier.Spawner = invoker;
				invoker.flier.Item = "Armor";
				invoker.flier.MaxAmt = 200;
			}
		}
	Looping:
		"----" A 2
		{
			if (invoker.count < DelayVacuum)	{	invoker.count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (invoker.tracer)
			{
				invoker.count = DelayVacuum;
				PlrCheck.SetFlying(invoker, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(x: cos(pitch)*PSpeed, z: -sin(pitch)*PSpeed, flags: CVF_RELATIVE|CVF_REPLACE);
				if (Distance3D(invoker.tracer) <= 32)
				{	SetOrigin(invoker.tracer.pos, true); A_Stop(); PlrCheck.SetFlying(invoker, false);	}
			}
			else
			{
				PlrCheck.SetFlying(invoker, false);
				invoker.count += 2;
			}
			
			if (invoker.count > invoker.Lifetime)	A_FadeOut();
			else 							invoker.Alpha = 1.0;
		}
		Loop;
	}
}



//---------------------------------
// Pinata health
Class D4PinataHealth : D4Stimpack
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataHealth.Lifetime PinataLifetime;
		Inventory.PickUpSound "Doom4/Pickups/Health";
		Scale 0.3;
		Radius 8;
		Height 16;
		Gravity 0.4;
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
		Inventory.Amount 8;
		DistanceCheck "user_MaxDrawDistance";
	}
		
	States
	{
	Spawn:
		PIN2 B 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataBorder",0,0,5,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0,Color_Blue);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "Health";
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(x: cos(pitch)*PSpeed, z: -sin(pitch)*PSpeed, flags: CVF_RELATIVE|CVF_REPLACE);
				if (Distance3D(tracer) <= 32)
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(self, false);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}


//---------------------------------
// Pinata ammo bullets
Class D4PinataBullets : D4Bullets
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataBullets.Lifetime PinataLifetime;
		Scale 0.3;
		Radius 8;
		Height 16;
		Gravity 0.4;
		Inventory.Amount 20;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+NOBLOCKMONST
		+NOTELESTOMP
		BounceFactor 0.5;
		DistanceCheck "user_MaxDrawDistance";
	}
	
	States
	{
	Spawn:
		PIN2 D 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataBorder",0,0,5,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "D4Bullets";
				flier.MaxAmt = 250;
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(x: cos(pitch)*PSpeed, z: -sin(pitch)*PSpeed, flags: CVF_RELATIVE|CVF_REPLACE);
				if (Distance3D(tracer) <= 32)
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(self, false);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}
Class D4PinataBulletsBig : D4PinataBullets
{
	Default 
	{
		Scale 0.4;
		Inventory.Amount 50;
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
		DistanceCheck "user_MaxDrawDistance";
	}
}

//---------------------------------
// Pinata ammo shells
Class D4PinataShells : D4Shells
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataShells.Lifetime PinataLifetime;
		Scale 0.3;
		Radius 8;
		Height 16;
		Gravity 0.4;
		Inventory.Amount 4;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
		DistanceCheck "user_MaxDrawDistance";
	}
		
	States
	{
	Spawn:
		PIN2 E 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataBorder",0,0,5,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "D4Shells";
				flier.MaxAmt = D4Shells_MaxAmount1;
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(x: cos(pitch)*PSpeed, z: -sin(pitch)*PSpeed, flags: CVF_RELATIVE|CVF_REPLACE);
				if (Distance3D(tracer) <= 32)
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(self, false);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}


Class D4PinataShellsBig : D4PinataShells
{
	Default 
	{
		Scale 0.4;
		Inventory.Amount 8;
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
	}
}



//---------------------------------
// Pinata ammo cells
Class D4PinataCells : D4Cells
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataCells.Lifetime PinataLifetime;
		Scale 0.3;
		Radius 8;
		Height 16;
		Gravity 0.4;
		Inventory.Amount 20;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
	}
	States
	{
	Spawn:
		PIN2 F 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataBorder",0,0,5,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "D4Cells";
				flier.MaxAmt = D4Cells_MaxAmount1;
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(x: cos(pitch)*PSpeed, z: -sin(pitch)*PSpeed, flags: CVF_RELATIVE|CVF_REPLACE);
				if (Distance3D(tracer) <= 32)
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(self, false);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}
Class D4PinataCellsBig : D4PinataCells
{
	Default 
	{
		Scale 0.4;
		Inventory.Amount 40;
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
	}
}

//---------------------------------
// Pinata ammo rockets
Class D4PinataRockets : D4Rockets
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataRockets.Lifetime PinataLifetime;
		Scale 0.3;
		Radius 8;
		Height 16;
		Gravity 0.4;
		Inventory.Amount 3;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
	}
	
	States
	{
	Spawn:
		PIN2 G 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataBorder",0,0,5,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "D4Rockets";
				flier.MaxAmt = D4Rockets_MaxAmount1;
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(x: cos(pitch)*PSpeed, z: -sin(pitch)*PSpeed, flags: CVF_RELATIVE|CVF_REPLACE);
				if (Distance3D(tracer) <= 32)
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(self, false);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}
Class D4PinataRocketsBig : D4PinataRockets
{
	Default 
	{
		Scale 0.4;
		Inventory.Amount 6;
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
	}
}


//---------------------------------
// Pinata ammo BFG

Class D4PinataBFG : D4BFGAmmo
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataBFG.Lifetime PinataLifetimeLong;
		Scale 0.3;
		Radius 8;
		Height 16;
		Gravity 0.4;
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
	}
	
	States
	{
	Spawn:
		PIN2 H 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataBorder",0,0,5,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0,Color_Green);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "D4BFGAmmo";
				flier.MaxAmt = D4BFGAmmo_MaxAmount;
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(x: cos(pitch)*PSpeed, z: -sin(pitch)*PSpeed, flags: CVF_RELATIVE|CVF_REPLACE);
				if (Distance3D(tracer) <= 32)
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(self, false);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}

//=======================================================================
//=======================================================================
// Special drops for zombieman, shotgunguy and chaingunner
//=======================================================================
//=======================================================================

//*********************************
// zombieman
Class D4PinataBulletsZombieman : D4Bullets	//only dropped by these guys, and they dont go after player
{
	int count;
	Default 
	{
		Scale 0.3;
		Radius 8;
		Height 16;
		Inventory.Amount 10;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		BounceType "Doom";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
	}
	States
	{
	Spawn:
		PIN2 D 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataBorder",0,0,5,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
		}
	Looping:
		"----" A 2
		{
			if (A_CheckFloor("Null"))	{	return ResolveState("Landed");	}
			return ResolveState(null);
		}
		Loop;
	Landed:
		"####" "#" 1
		{
			count++;
			if (count > PinataLifetimeLong)
			{	return ResolveState("Fading");		}
			return ResolveState(null);
		}
		Loop;
	Fading:
		"####" "#" 1 A_FadeOut();
		Wait;
	}
}


Class D4PinataShellsShotgunGuy : D4Shells	//only dropped by these guys, and they dont go after player
{
	int count;
	Default 
	{
		Scale 0.3;
		Radius 8;
		Height 16;
		Inventory.Amount 8;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		BounceType "Doom";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
	}
	States
	{
	Spawn:
		PIN2 E 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataBorder",0,0,5,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
		}
	Looping:
		"----" A 2
		{
			if (A_CheckFloor("Null"))	{	return ResolveState("Landed");	}
			return ResolveState(null);
		}
		Loop;
	Landed:
		"####" "#" 1
		{
			count++;
			if (count > PinataLifetimeLong)
			{	return ResolveState("Fading");		}
			return ResolveState(null);
		}
		Loop;
	Fading:
		"####" "#" 1 A_FadeOut();
		Wait;
	}
}

Class D4PinataBulletsChaingunGuy : D4PinataBulletsZombieman	//only dropped by these guys, and they dont go after player
{
	
	Default 
	{ Inventory.Amount 10; }
}




//---------------------------------
// Le cash!


Class D4Cash : Actor 
{
	Default 
	{
		Scale 0.3;
		Radius 8;
		Height 16;
		Gravity 0.4;
	}
	States
	{
	Spawn:
		PINA C 1 NODELAY Bright
		{
			A_SpawnParticle("999999",SPF_FULLBRIGHT,35,3);
			if(A_CheckFloor("Null"))
			{
				return ResolveState("Landed");
			}
			return ResolveState(null);
		}
		Loop;
	Landed:
		PINA C -1 Bright;
		Stop;
	}
}