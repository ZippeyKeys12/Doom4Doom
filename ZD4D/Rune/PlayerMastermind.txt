//=================================================================================================
//=================================================================================================

//		Mastermind

//=================================================================================================
//=================================================================================================
Class MastermindRune : DemonRuneBase
{
	Default 
	{
		DemonRuneBase.Morph "MastermindMorpher";
		Inventory.PickupMessage "Spider Mastermind rune";
		Scale 0.13;
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			if (CountInv("IamADemonToken") || CountInv("PowerInvulBase") || countinv("D4DoomDollHands") || countinv("BusyToken")) //if already a demon...
			{
				return false;	//...cant pickup
			}
			else	//otherwise..
			{
				A_GiveInventory("SoundStopper",1); //stops any sound (mostly for the looping ones)
				A_GiveInventory("HealthArmorSaver",1);
				A_GiveInventory("IamADemonToken",1); //...gives token and morphs
				A_GiveInventory("IamSpiderMastermind",1); 
				A_GiveInventory(invoker.Morph,1);
				return true;
			}
		}
		Stop;
	}
}

Class MastermindMorpher: PowerupGiver
{
	Default 
	{
		Inventory.MaxAmount 1;
		Inventory.Amount 1;
		Powerup.Type "PowerMastermindMorph";
		Powerup.Duration -60;
		+Inventory.AutoActivate
	}
	States
	{
		Spawn:
			PLAY A 3;
			Loop;
	}
}

Class PowerMastermindMorph : PowerRuneBase
{
	Default 
	{
		PowerMorph.PlayerClass "PlayerMastermind";
		PowerMorph.MorphStyle (MRF_FULLHEALTH|MRF_UNDOBYDEATH|MRF_UNDOBYDEATHSAVES|MRF_UNDOBYTOMEOFPOWER|MRF_LOSEACTUALWEAPON|MRF_NEWTIDBEHAVIOUR|MRF_UNDOALWAYS|MRF_FAILNOTELEFRAG);
		PowerMorph.UnMorphFlash "DemonRuneMorphOff";
		PowerMorph.MorphFlash "DemonRuneMorphOn";
	}
}


Class PlayerMastermind : DemonPlayerBase
{
	Default 
	{
		Speed 1;
		Health 3000;
		Radius 40;
		Height 90;
		Mass 800;
		PainChance 20;
		Gravity 0.7;
		Player.JumpZ 7;
		Player.MorphWeapon "D4DMastermindWeapon";
		Player.ViewHeight 80;
		Player.AttackZOffset 20;
		Player.CrouchSprite "SPID";
		Player.SoundClass "PlayerDemonCommon";
		PainSound "Doom4/SpiderMastermind/Pain";
		DeathSound "Doom4/SpiderMastermind/Death";
		Player.ForwardMove 0.8, 0.4;
		Player.SideMove 0.8, 0.4;
		DamageFactor "Normal", 0.5;
		+NOSKIN
		-PICKUP
		+EXTREMEDEATH
	}
	States
	{
	Spawn:
		SPID A -1;
		Stop;
	See:
		SPID ABCDEF 3;
		Loop;
	Pain:
		SPID I 5 A_Pain();
		Goto Spawn;
	Missile:
	Melee:
		SPID GH 4;
		Goto Spawn;
	Death:
		TNT1 A 3 A_Scream();
		TNT1 B 3 A_NoBlocking();
		TNT1 CDEFGH 3;
		TNT1 I -1;
		Stop;
	Overlay.IdleSound:
		TNT1 A 35;
		TNT1 A 0 
		{
			if (!GetCvar("D4D_SilentMorphs") && random(1,12)==12)
			{
				A_PlaySound("Doom4/SpiderMastermind/Idle",5,0.5);
			}
		}
		Loop;
	Overlay.Steps:
		TNT1 A 12
		{
			if(((vel.x ** 2 + vel.y ** 2) > 1) && A_CheckFloor("Null"))
			{
				A_PlaySound("Player/Demon/MastermindStep",6);
			}
		}
		Loop;
	}
}

Class D4DMastermindWeapon : DoomWeapon
{
	Default 
	{
		Tag "Experimental Energy Cannon";
	}
	States
	{
	Ready:
		CHGG A 1 A_WeaponReady(WRF_DISABLESWITCH);
		Loop;
	Deselect:
		CHGG A 1 A_Lower;
		Loop;
	Select:
		CHGG A 1 A_Raise;
		Loop;
	Fire:
		CHGG A 1 
		{
			A_FireProjectile("SMMPlayerPlasma",0,0,0);
			A_FireProjectile("SMMPlayerPlasmaScatter",0,0,0);
			A_SetPitch(pitch-1);
			A_GunFlash();
		}
		CHGG AA 1 A_SetPitch(pitch+0.5);
		CHGG B 1 
		{
			A_FireProjectile("SMMPlayerPlasma",0,0,0);
			A_FireProjectile("SMMPlayerPlasmaScatter",0,0,0);
			A_SetPitch(pitch-1);
			A_GunFlash();
		}
		CHGG BB 1 A_SetPitch(pitch+0.5);
		CHGG A 0 A_Refire;
		Goto Ready;
	Flash:
		TNT1 A 1 A_Light2();
		TNT1 A 1 A_Light1();
		TNT1 A 0 A_Light0();
		Stop;
		
	AltFire:
		CHGG A 0 
		{
			A_SpawnItemEx("MastermindPlayerMuzzleRed",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_PlaySound("Doom4/SpiderMastermind/LaserCharge",7,0.5);
			//A_PlaySound("Doom4/Monsters/MastermindLaserCharge",5);
		}
		
		FireLooper:
			CHGG AB 3 
			{
				A_FireProjectile("MastermindPlayerSpark",0,0,0);
				if(countinv("FullyCharged"))
				{ return ResolveState("FireLaser"); }
				return ResolveState(null);
			}
			CHGG B 0 A_ReFire("FireLooper");
			
		ReleaseAltFire:
			CHGG A 0 
			{
				if (CountInv("FullyCharged"))
					return ResolveState("FireLaser");
				return ResolveState("FailedLaser");
			}
			
			FireLaser:
				CHGG A 0 
				{
					A_PlaySound("Doom4/SpiderMastermind/LaserLoop",7,1,1);
					A_PlaySound("Doom4/Monsters/ElectricDischarge",6);
					A_RemoveChildren(true,RMVF_EVERYTHING,"MastermindPlayerMuzzleRed");
					A_SetInventory("FullyCharged",0);
					A_GunFlash();
				}
				CHGG AAAAAAAAAAAAAAAAAAAA 2 
				{
					A_RailAttack(20*random(1,8),0,0,"","",RGF_SILENT);
					A_FireProjectile("SMMLaserThru",0,0,0);
				}
				CHGG A 0 A_StopSound(7);
				Goto Ready;
			FailedLaser:
				CHGG A 10
				{
					A_StopSound(6);
					A_StopSound(7);
					A_RemoveChildren(true,RMVF_EVERYTHING,"MastermindPlayerMuzzleRed");
				}
				Goto Ready;
		
		
	AltFlash:
		TNT1 AAAAAAAAAAAAAAAAAAAA 2 A_Light2();
		TNT1 A 4 A_Light1();
		TNT1 A 0 A_Light0();
		Stop;


	Spawn:
		SHOT A -1;
		Stop;
	}
}

Class SMMLaserThru : SMMLaserStrong
{	Default { +THRUACTORS } }

Class SMMPlayerPlasma : Actor 
{
	Default 
	{
		Projectile;
		Radius 7;
		Height 12;
		Scale 0.27;
		RenderStyle "Add";
		Alpha 0.99;
		Speed 25;
		FastSpeed 30;
		Damage 9;
		SeeSound "Doom4/Monsters/PlasmaShot";
		Translation "0:255=%[0,0,0]:[1.3,0.7,0.3]";
		+FORCEXYBILLBOARD
		Decal "D4PlasmaMonsterBig";
		+EXTREMEDEATH
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY;
		Goto Looper;
	Looper:
		SPIR P 2 Bright Light("OrangeSmallPoint2")
		{
			if (GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("SSMPlasmaTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
			}
		}
		Loop;
	Death:
		TNT1 A 0 A_SpawnItemEx("SMMPlasmaBallPuff",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
		TNT1 A 3 Light("OrangeSmallPoint1");
		TNT1 A 3 Light("OrangeSmallPoint2");
		TNT1 A 3 Light("OrangeSmallPoint3");
		Stop;
	}
}

Class SMMPlayerPlasmaScatter : SMMPlayerPlasma
{
	Default
	{
		Damage 3;
		SeeSound "";
	}
	override void PostBeginPlay()
	{
		A_FaceMovementDirection();
		angle += frandom(-5.0, 5.0);
		pitch += frandom(-5.0, 5.0);
		A_ChangeVelocity(x: cos(pitch) * speed, z: -sin(pitch)*speed, flags: CVF_RELATIVE|CVF_REPLACE);
		Super.PostBeginPlay();
	}
}

Class MastermindPlayerMuzzleRed : Actor 
{
	const Flags = WARPF_NOCHECKPOSITION|WARPF_COPYPITCH;
	const Distance = 20;
	const YOff = 1;
	const ZOff = 73;
	double  user_pos;
	int user_t;
	
	Default 
	{
		Projectile;
		+NOINTERACTION
		RenderStyle "Add";
		Scale 0.8;
		Alpha 0.01;
		+FORCEXYBILLBOARD
		Translation "0:255=%[0,0,0]:[2.0,0.2,0.2]";
	}
	States
	{
	Spawn:
		X060 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 BRIGHT NoDelay
		{
			if (master) { pitch = master.pitch; } //Grab the pitch...
			
			// And set a multiplier for taking from the distance so it actually goes well with the gun.
			
			if (pitch > 0) //Looking down
			{	user_pos = (sin(pitch) * 12);	}
			else //Looking up
			{	user_pos = (sin(pitch) * 6);	}
			
			
			A_Warp(MasterPtr,
				(cos(-pitch)*(Distance)) - user_pos,
				YOff,
				(ZOff*GetCrouchFactor(MasterPtr))+(sin(-pitch)*(Distance)),0,Flags|WARPF_INTERPOLATE);
				
			A_FadeIn(0.1);
			if (Scale.X>0.01)	//while charging
			{
				A_SetScale(Scale.X*0.82);
			}
			else //once it reaches full charge
			{
				A_GiveInventory("FullyCharged",1,MasterPtr);
				A_SpawnItemEx("MastermindPlayerSpark",0,0,-3,sin(-pitch)*frandom(0.1,0.5),frandom(-0.7,-1.3),cos(pitch)*frandom(1.2,-5.0),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("MastermindPlayerSpark",0,0,-3,sin(-pitch)*frandom(0.1,0.5),frandom(0.7,1.3),cos(pitch)*frandom(1.2,-5.0),0,SXF_NOCHECKPOSITION);
			}
			
		}
		Loop;
	Nothing:
		TNT1 A 100;
		Stop;
	}
}

Class FullyCharged : Inventory {}

Class MastermindPlayerSpark : Actor 
{

	Default 
	{
		+NOINTERACTION
		Scale 0.05;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[1.0,0.0,0.0]";
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256,1,2,3,4,5,6,7,8);
		X079 ABCDEFGH 0	A_Jump(256,"Perform");
	Perform:
		"####" "#" 1 Bright 
		{
			A_SetScale(Scale.X+0.01);
			A_FadeOut(0.05);
		}
		Loop;
	}
}


