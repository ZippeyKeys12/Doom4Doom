

class D4bum : D4Zombieman
{
}

/*
	Array<Actor> Things;
	override void WorldLoaded(WorldEvent e)
	{
		Things.Clear();
		
		if (!multiplayer && !deathmatch)
		{
			for (int j = 0; j < 100; j++)
			{
				Vector3 checkpos = G_PickDeathmatchStart();
				
				// Means there is no deathmatch starts.
				if (checkpos ~== (0,0,0))
					return;
				
				if (Things.Size() > 0)
				{
					bool cont = false;
					for (int i = 0; i < Things.Size(); i++)
					{
						if (Things[i].pos == checkpos)
						{
							cont = true;
							break;
						}
					}
					if (cont) continue;
				}
				Actor n = Actor.Spawn("Unknown", checkpos);
				if (n) Things.Push(n);
			}
		}
	}
	*/

extend class D4DHandler
{	
	D4BlackList BlackList;
	D4ManualLootList LootList;
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	
	override void OnRegister()
	{
		LootList = D4ManualLootList.Get();
		if (LootList)
		{
			D4ManualLootParameters Loot;
			/*
			Init function parameters are as follows:
				
			Actor Class
				The name of the class to add.
				
			UpgradeDropChance
				The denominator of the chance to drop an upgrade 
				(1 / UpgradeDropChance).
				
			UpgradeDropAlways
				The number of upgrades that will drop upon death, guaranteed.
				
			CrateDropChance
				The numerator of 256 (CrateDropChance / 256) for each crate to 
				drop, individually.
				
			CrateDropAmount
				The number of crates to roll against the RNG CrateDropChance.
				
				I.e. 3 crates with a CrateDropChance means the RNG will run three 
				times for each.
				
			CrateDropAlways
				Guaranteed dropped crate count.
				
			CashChainsawPinata
				-1 by default. Overrides the chainsaw quadrupling bonus 
				(mastermind & cyberdemon are both 2000).
				
			CashAmount
				The normal amount of cash to drop.
			*/
			
			// This D4bum class (see top of source) will drop a fuckton of crates/cash.
			// Bear in mind, LootList.Add(Loot); must be performed after the 
			// Loot.Init function because Loot is a struct, and LootList's Add 
			// function takes that struct as its parameter. Keeps things clean 
			// and organized.
			Loot.Init("D4bum", -1, 1, 256, 666, 666, 999, 200);	LootList.Add(Loot);
			
			
		}
		
		BlackList = D4BlackList.Get();
		if (BlackList)
		{
			// Blacklist functions are as follows:
			// 	Add(Actor Name, bool CheckParent)
			// 	Remove(Actor Name)
			// 	Check(Actor Name)
			
			// [MC] Should be simple enough. Here, I blacklisted the lost souls
			// that are spawned by pain elementals.
			
			BlackList.Add("D4LostSoulNoCash", true);
			BlackList.Add("D4OldLostSoulNoCash", true);
		}
		Super.OnRegister();
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	override void WorldThingDied(WorldEvent e)
	{
		let mo = e.Thing;
		if (!mo || !mo.bISMONSTER || mo.bNOINTERACTION) return;
		
		// Check the global blacklist and do nothing if found on it. This is a
		// no-holds-barred list -- absolutely nothing will drop, no exceptions.
		if (!BlackList) BlackList = D4BlackList.Get();
		if (BlackList.Check(mo))	return;
		
		// Keeps track if these have already been checked or not. Only check it
		// once and discard all further attempts if it's going to spawn already.
		D4DropList Pinatas;
		
		bool Armor[4];
		bool HPPin;
		bool Bullets;
		bool Shells;
		bool Cells;
		bool Rockets;
		bool BFG;
		int UpgradeDropChance = -1, UpgradeDropAlways = 0;
		int CrateDropChance, CrateDropAmount, CrateDropAlways;
		int CashChainsawPinata;
		int CashAmount;
		
		int CashMul = 1;
		int CrateAmt, CrateDrops;
		int LootDrop = mo.GetCvar("user_LootDrop");
		int TotalMul = mo.CountInv("D4MonsterUpgrader");
		
		// Needed because the inventory is based on n + 1 (i.e. uncommon has 1 of the above, rare has 2, etc).
		if (TotalMul > 0)	
		{
			TotalMul++;
			CashMul *= TotalMul;
		}
		else TotalMul = 1;
		
		
		Vector3 pos = 	mo.pos;
		//int hp = 		mo.health;
		int spawnhp = 	mo.GetSpawnHealth();
		Name mod = 		mo.DamageTypeReceived;
		
		if (LootDrop && (
						(mo.InStateSequence(mo.CurState, mo.FindState("XDeathNoDrops"))) ||
						(mo.InStateSequence(mo.CurState, mo.FindState("XDeath"))) ||
						(mo.health < mo.GetGibHealth())))
			Pinatas.AddItem("D4PinataCarrion", 1 * TotalMul);
		
		// First set up the base multiplier upon damage type when killed.
		if (mod == 'ChainsawPinata')
		{
			CashMul *= 4;
			Pinatas.AddItem("D4PinataBulletsBig", 	LootDrop ? 4 : 1);
			Pinatas.AddItem("D4PinataShellsBig", 	LootDrop ? 4 : 1);
			Pinatas.AddItem("D4PinataCellsBig", 	LootDrop ? 5 : 1);
			Pinatas.AddItem("D4PinataRocketsBig", 	LootDrop ? 3 : 1);
		}
		else if (MOD == 'BerserkKill' || 
				MOD == 'ChainsawKill' || 
				MOD == 'MeleePunch' ||
				MOD == 'GloryKill')
		{
			CashMul *= 2;
			if (LootDrop)  Pinatas.AddItem("D4PinataHealth", 5); 
		}
		
		
		
		// Now check to see if it's a D4D monster. If so, just use what's given.
		// If not, see if it's a manual loot table.
		// Otherwise, establish a formula based on health.
		let d4m = D4AbstractMonster(mo);
		Class<Actor> thing = mo.GetClass();
		
		//Not a D4D monster, is it manual? This is defined above (see D4bum example).
		if (LootList && LootList.CheckActor(thing)) 
		{
			// Find the thing and snag its contents, if it has any.
			D4ManualLootParameters Loot;
			LootList.Retrieve(thing, Loot);
			CrateDropChance = 		Loot.CrateDropChance;
			CrateDropAmount = 		Loot.CrateDropAmount;
			CrateDropAlways = 		Loot.CrateDropAlways;
			CashChainsawPinata = 	Loot.CashChainsawPinata;
			CashAmount = 			Loot.CashAmount;
			UpgradeDropChance =		Loot.UpgradeDropChance;
			UpgradeDropAlways =		Loot.UpgradeDropAlways;
		}
		else if (d4m) // Not manually overridden -- D4D monster.
		{
			CrateDropChance = 		d4m.CrateDropChance;
			CrateDropAmount = 		d4m.CrateDropAmount;
			CrateDropAlways = 		d4m.CrateDropAlways;
			CashChainsawPinata = 	d4m.CashChainsawPinata;
			CashAmount = 			d4m.CashAmount;
			UpgradeDropChance =		d4m.UpgradeDropChance;
			UpgradeDropAlways =		d4m.UpgradeDropAlways;
			
		}
		else	// Neither D4D monster nor a manually added one.
		{
			if (D4D_CurrentUpgradeMode)
			{
				// For every 1000 health, guarantee a crate credit.
				// Otherwise, dvide the HP by 20 and use that as a base chance.
				CrateDropAlways = spawnhp / 1000;
				CrateDropChance = Max(1,spawnhp / 20) * (mo.bBOSS ? 2 : 1);
				if (CrateDropChance > 256)
				{
					CrateDropAmount = CrateDropChance / 256;
				}
			}
			else
			{
				CashAmount = spawnhp / (mo.bBoss ? 12 : 15);
				if (CashChainsawPinata > 0 && mod == 'ChainsawPinata')
				{
					CashAmount = CashChainsawPinata;
					CashMul = 1;
				}
			}
		}
		
		// Pickup/Crate Mode?
		if (D4D_CurrentUpgradeMode)
		{
			// Cycle through the drop chances of each, excluding the always
			// dropping. If the chance is within valid ranges, just add to
			// amount that will always be given.
			CrateDrops = CrateDropAmount * CashMul;
			if (CrateDrops > 0)
			{
				for (int i = 0; i < CrateDrops; i++)
				{
					if (random(1,256) <= CrateDropChance)
						CrateDropAlways++;
				}
			}
			
			// Drop some upgrades based on chance. UpgradeDropChance is the divisor,
			// inverse of how the crates work. 
			// 0 means no chance. 
			// 1 means guaranteed.
			// 2 means 1/2 chance, etc.
			let plr = players[0].mo;
			int Chance = (plr && plr.CountInv("PowerD4Money")) ? 4 : 1;
			Chance *= Max(1,CashMul + (TotalMul * 2));
			
			if (UpgradeDropChance == -1)	UpgradeDropChance = D4D_PickupDropChance;
			if (UpgradeDropChance > 0)
			{
				// Give a slight boost to enemies that are bosses as they're tougher.
				if (mo.bBOSS)
				{
					if (UpgradeDropChance <= 10)
						UpgradeDropChance /= (mo.bBOSS ? 2 : 1);
					else
						UpgradeDropChance -= 10;
				}
				
				if (Max(1,random(1, (UpgradeDropChance / Chance))) == 1)
					UpgradeDropAlways++;
			}
			
			// If we have something to drop, do it.
			if (UpgradeDropAlways > 0)
			{
				for (int i = 0; i < UpgradeDropAlways; i++)
					mo.A_DropItem("D4UpgradePickupSpawner");
			}
				
			if (!plr.CountInv("SovietToken") &&
				plr.CountInv("AssaultRifleMod1") &&
				plr.CountInv("AssaultRifleMod2") &&
				plr.CountInv("ChaingunMod1") &&
				plr.CountInv("ChaingunMod2") &&
				plr.CountInv("GaussCannonMod1") &&
				plr.CountInv("GaussCannonMod2") &&
				plr.CountInv("PlasmaRifleMod1") &&
				plr.CountInv("PlasmaRifleMod2") &&
				plr.CountInv("RocketLauncherMod1") &&
				plr.CountInv("RocketLauncherMod2") &&
				plr.CountInv("ShotgunMod1") &&
				plr.CountInv("ShotgunMod2") &&
				plr.CountInv("SSGUpgrade1") &&
				plr.CountInv("SSGUpgrade2") &&
				plr.CountInv("SSGUpgrade3") &&
				plr.CountInv("SSGUpgrade4") &&
				plr.CountInv("PistolUpgradeAutomatic") &&
				plr.CountInv("PistolUpgradeAltDamage") &&
				plr.CountInv("PistolUpgradeAltCharge") &&
				plr.CountInv("PistolUpgradeDamage") &&
				plr.CountInv("PistolUpgradeLance") &&
				plr.CountInv("BFGUpgrade1") &&
				plr.CountInv("BFGUpgrade2") &&
				plr.CountInv("BFGUpgrade3") &&
				plr.CountInv("BFGUpgrade4"))
			{
				mo.A_DropItem("SovietChaingunUpgradePickup");
			}
		}
		
		// 
		
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i]) continue;
			let p = players[i].mo;
			if (p)
			{
				// Drop items first.
				if (mod != 'Massacre')
				{
					if (LootDrop)
					{
						if (mod == 'ChainsawPinata')
						{
							// armor
							if (!Armor[0] && p.CountInv("D4ArmorCapRaiser") >= 25)
							{
								Armor[0] = true;
								int rng[2];
								rng[0] = random(1,256) > 128 ? 1 : 0;
								rng[1] = random(1,256) > 128 ? 1 : 0;
								Pinatas.AddItem("D4PinataArmor", rng[0] + rng[1]);
							}
							if (!Armor[1] && p.CountInv("D4ArmorCapRaiser") >= 50)
							{
								Armor[1] = true;
								int rng[2];
								rng[0] = random(1,256) > 128 ? 1 : 0;
								rng[1] = random(1,256) > 128 ? 1 : 0;
								Pinatas.AddItem("D4PinataArmor", rng[0] + rng[1]);
							}
							if (!Armor[2] && p.CountInv("D4ArmorCapRaiser") >= 100)
							{
								Armor[2] = true;
								Pinatas.AddItem("D4PinataArmor", 2);
							}
						}
						else 
						{
							if (!Armor[3] && p.CountInv("BasicArmor") < 200 && p.CountInv("D4ArmorCapRaiser") >= 25)	//only if player isnt at full armor and has upgraded his armor
							{
								Armor[3] = true;
								int rng = random(1,256) > 192 ? 1 : 0;
								Pinatas.AddItem("D4PinataArmor", rng); //very rarely they will drop armor
							}
						}
						//health giver
						if (!HPPin && p.health < 60)
						{
							HPPin = true;
							int rng = random(1,256) > 192 ? 1 : 0;
							Pinatas.AddItem("D4PinataHealth", 1 + rng);
						}
						//bullets giver
						if (!Bullets && (p.CountInv("D4AssaultRifle") || 
							p.CountInv("D4Chaingun") ||
							p.CountInv("D4Repeater")) && 
							p.CountInv("D4Bullets") < 10)
						{
							Bullets = true;
							int rng[2];
							rng[0] = random(1,256) > 128 ? 1 : 0;
							rng[1] = random(1,256) > 240 ? 1 : 0;
							Pinatas.AddItem("D4PinataBullets", rng[0] + rng[1]);
						}
						
						//Shells giver
						if (!Shells && (p.CountInv("D4Shotgun") || 
							p.CountInv("D4SuperShotgun")) && 
							p.CountInv("D4Shells") < 5)
						{
							Shells = true;
							int rng[2];
							rng[0] = random(1,256) > 128 ? 1 : 0;
							rng[1] = random(1,256) > 128 ? 1 : 0;
							Pinatas.AddItem("D4PinataShells", rng[0] + rng[1]);
						}
						
						//Cells giver
						if (!Cells && (p.CountInv("D4PlasmaRifle") ||
							p.CountInv("D4GaussCannon") ||
							p.CountInv("D4LightningGun")) && 
							p.CountInv("D4Cells") < 16)
						{
							Cells = true;
							int rng[2];
							rng[0] = random(1,256) > 128 ? 1 : 0;
							rng[1] = random(1,256) > 128 ? 1 : 0;
							Pinatas.AddItem("D4PinataCells", rng[0] + rng[1]);
						}
						//Rockets giver
						if (!Rockets && p.CountInv("D4RocketLauncher") && p.CountInv("D4Rockets") < 5)
						{
							Rockets = true;
							int rng = random(1,256) > 196 ? 1 : 0;
							Pinatas.AddItem("D4PinataRockets", rng);
						}
						
						//BFG ammo giver, this one doesnt check for ammo low, but it does check for the weapon
						if (!BFG && p.CountInv("D4BFG"))
						{
							BFG = true;
							if (random(1,512) < 16)	Pinatas.AddItem("D4PinataBFG", 1);
						}
					}
				}
				// -------------------------------------------------------------
				// Drop credits.
				// -------------------------------------------------------------
				
				if (D4D_CurrentUpgradeMode)
				{
					CashMul *= (p.CountInv("PowerD4Money") ? 4 : 1);
					if (CrateDropAlways > 0)
					{
						CrateDropAlways *= CashMul;
						p.A_GiveInventory("D4DCash",		CrateDropAlways);
						p.A_GiveInventory("D4DCashFake",	CrateDropAlways);
						p.A_GiveInventory("CashUpdater",	1);
					}
				}
				else
				{
					if (CashAmount > 0)
					{
						int CPB1 = p.CountInv("CashPercentBonus");
						int CPB2 = p.CountInv("CashPercentBonusTemp");
						
						double CashAmtPercent = CashAmount * (CPB1 + CPB2);
						CashAmount = (CashAmount + (CashAmtPercent / 100)) * CashMul;
						p.A_GiveInventory("D4DCash",		CashAmount);
						p.A_GiveInventory("D4DCashFake",	CashAmount);
						p.A_GiveInventory("CashUpdater",	1);
					}
				}
			}
		}
		if (TotalMul > 0)	
			Pinatas.Multiply(TotalMul);
		Pinatas.DropItemsPos(pos);
	}
}

//------------------------------------------------------------------------------
//
//
//
//------------------------------------------------------------------------------

Struct D4ManualLootParameters
{
	private bool initialized;
	Class<Actor> mo;
	int UpgradeDropChance, UpgradeDropAlways;
	int CrateDropChance, CrateDropAmount, CrateDropAlways;
	int CashChainsawPinata, CashAmount;

	void Init(Class<Actor> th = null, int upchance = -1, int updrop = 0, int cdchance = 0, int cdamt = 0, int cddrop = 0, int ccp = 0, int ca = 0)
	{
		mo = th;
		UpgradeDropChance = upchance;
		UpgradeDropAlways = updrop;
		CrateDropChance = cdchance;
		CrateDropAmount = cdamt;
		CrateDropAlways = cddrop;
		CashChainsawPinata = ccp;
		CashAmount = ca;
		initialized = true;
	}
	
	bool CheckInit()
	{
		return initialized;
	}
}

//------------------------------------------------------------------------------

Class D4ManualLootList : Thinker
{
	Array<Class<Actor> > Actors;
	Array<Int> CrateDropChance, CrateDropAmount, CrateDropAlways;
	Array<Int> CashAmount, CashChainsawPinata;
	Array<Int> UpgradeDropChance, UpgradeDropAlways;
	
	bool CheckActor(Class<Actor> mo)
	{
		int size = Actors.Size();
		return (mo && (size > 0) && (Actors.Find(mo) < size));
	}
	
	int GetSize()
	{
		return Actors.Size();
	}
		
	//--------------------------------------------------------------------------
	// Adds an actor to the list of overrides for modders usage.
	void Add(in D4ManualLootParameters Loot)
	{
		if (!Loot.CheckInit())
		{
			Console.Printf("Error: D4ManualLootParameters must call Init() function before use!");
			return;
		}
		Class<Actor> check = Loot.mo;
		if (!check)	
		{
			Console.Printf("Error: %s is not a proper actor. Check spelling!", Loot.mo);
			return;
		}
		
		// If we already have an actor, just update it. No need to be bloating
		// arrays relentlessly, that'll just cause memory management issues.
		int size = Actors.Size();
		if (size > 0)
		{
			int i = Actors.Find(Loot.mo);
			if (i < size)
			{
				CrateDropChance[i] = Loot.CrateDropChance;
				CrateDropAmount[i] = Loot.CrateDropAmount;
				CrateDropAlways[i] = Loot.CrateDropAlways;
				CashAmount[i] = Loot.CashAmount;
				CashChainsawPinata[i] = Loot.CashChainsawPinata;
				UpgradeDropChance[i] = Loot.UpgradeDropChance;
				UpgradeDropAlways[i] = Loot.UpgradeDropAlways;
				return;
			}
		}
		
		// The actor doesn't exist, so it's all clear to add it to the array.
		Actors.Push(Loot.mo);
		CrateDropChance.Push(Loot.CrateDropChance);
		CrateDropAmount.Push(Loot.CrateDropAmount);
		CrateDropAlways.Push(Loot.CrateDropAlways);
		CashAmount.Push(Loot.CashAmount);
		CashChainsawPinata.Push(Loot.CashChainsawPinata);
		UpgradeDropChance.Push(Loot.UpgradeDropChance);
		UpgradeDropAlways.Push(Loot.UpgradeDropAlways);
	}
	
	//--------------------------------------------------------------------------
	// Removes an actor and associated reservations.
	bool Remove(Class<Actor> mo)
	{
		if (!mo)	return false;
		
		int size = Actors.Size();
		if (size > 0)
		{
			int i = Actors.Find(mo);
			if (i < size)
			{
				Actors.Delete(i);
				CrateDropChance.Delete(i);
				CrateDropAmount.Delete(i);
				CrateDropAlways.Delete(i);
				CashAmount.Delete(i);
				CashChainsawPinata.Delete(i);
				UpgradeDropChance.Delete(i);
				UpgradeDropAlways.Delete(i);
				return true;
			}
		}
		return false;
	}
	
	//--------------------------------------------------------------------------
	// Retrieves the data.
	void Retrieve(Class<Actor> mo, in out D4ManualLootParameters Loot)
	{
		int size = Actors.Size();
		if (size > 0)
		{
			int i = Actors.Find(mo);
			if (i < size)
			{
				Loot.Init	(Actors[i], 
							UpgradeDropChance[i], UpgradeDropAlways[i], 
							CrateDropChance[i], CrateDropAmount[i], CrateDropAlways[i], 
							CashChainsawPinata[i], CashAmount[i]);
			}
		}
	}

	//--------------------------------------------------------------------------
	// Initializer stuff. Don't touch.
	D4ManualLootList Init()
	{
		CrateDropChance.Clear();
		CrateDropAmount.Clear();
		CrateDropAlways.Clear();
		CashAmount.Clear();
		CashChainsawPinata.Clear();
		UpgradeDropChance.Clear();
		UpgradeDropAlways.Clear();
		ChangeStatNum(STAT_STATIC);
		return self;
	}

	static D4ManualLootList Get()
	{
		ThinkerIterator it = ThinkerIterator.Create("D4ManualLootList",STAT_STATIC);
		let p = D4ManualLootList(it.Next());
		if (p == null)
		{
			p = new("D4ManualLootList").Init();
		}
		return p;
	}
}

//==============================================================================
//==============================================================================
//
//	Base items
//
//==============================================================================
//==============================================================================

// Defines how many pinatas to drop.

Struct D4DropList play
{
	Array<Class<Inventory> > ItemName;
	Array<Int> ItemCount;
	Array<Double> ItemAmountMul;
	
	//--------------------------------------------------------------------------
	// ResetList()
	//
	// Wipes out all items on the drop list and sets all counts to 0.
	//--------------------------------------------------------------------------
	
	void ResetList()
	{
		ItemName.Clear();
		ItemCount.Clear();
		ItemAmountMul.Clear();
	}
	
	//--------------------------------------------------------------------------
	// AddItem(actor, count, amount, adding?)
	//
	// Adds an item to the list and how many to spawn.
	//--------------------------------------------------------------------------
	
	void AddItem(String newthing, int count = 1, double amountMul = 1.0, bool adding = true)
	{
		// Don't bother if the value is 0. 
		if (count == 0) 
			return;
			
		// Make sure the item's valid first.
		Class<Inventory> check = newthing;
		if (!check)
		{
			Console.Printf("Error: %s is not a valid item!", newthing);
			return;
		}
		
		// Search the array first for something, if its size is > 0. Otherwise,
		// add it in if not found.
		
		int size = ItemName.Size();
		if (size > 0)
		{
			int i = ItemName.Find(check);
			if (i < size)
			{
				ItemCount[i] = adding ? ItemCount[i] + count : count;
				
				if (amountMul > 0.0)
					ItemAmountMul[i] = Max(1.0, amountMul);
				return;
			}
		}
		ItemName.Push(check);
		ItemCount.Push(count);
		ItemAmountMul.Push(Max(1.0, amountMul));
	}
	
	//--------------------------------------------------------------------------
	// MultiplyAmount (amount)
	// 
	// Multiplies the amount on all drops.
	//--------------------------------------------------------------------------
	
	void Multiply(double amt)
	{
		if (amt <= 0.0)	return;
		
		if (ItemAmountMul.Size() > 0)
		{
			for (int i = 0; i < ItemAmountMul.Size(); i++)
				ItemAmountMul[i] *= amt;
		}
	}
	
	//--------------------------------------------------------------------------
	// DropItemsPos(actor)
	//
	// Causes an actor to spawn its entire list of items.
	//--------------------------------------------------------------------------
	
	void DropItemsPos(Vector3 mpos)
	{
		int size = ItemName.Size();
		if (size > 0)
		{
			for (int i = 0; i < size; i++)
			{
				Class<Inventory> check = ItemName[i];
				if (check == null)	continue;
				for (int j = 0; j < ItemCount[i]; j++)
				{
					Inventory it = Inventory(Actor.Spawn(check, mpos + (0, 0, 32)));
					
					if (it)
					{
						it.bTHRUACTORS = true;
						it.amount = int(it.amount * ItemAmountMul[i]);
						it.bTHRUACTORS = false;
						it.VelFromAngle(frandom(3,6),random(0,359));
						it.vel.z += frandom(1,5);
						it.A_FaceMovementDirection(0,0);
						
					}
				}
			}
			ItemName.Clear();
			ItemCount.Clear();
		}
	}
}


//------------------------------------------------------------------------------
//
// List of monsters not allowed to drop pinatas or credits at all.
//
//------------------------------------------------------------------------------

Class D4BlackList : Thinker
{
	Array<String> List;		// Non-parent list
	Array<String> PList;	// Parent list

	D4BlackList Init()
	{
		List.Clear();
		PList.CLear();
		ChangeStatNum(STAT_STATIC);
		return self;
	}

	//--------------------------------------------------------------------------
	// Used to grab an existing blacklist, or create one if not already. 
	static D4BlackList Get()
	{
		ThinkerIterator it = ThinkerIterator.Create("D4BlackList",STAT_STATIC);
		let p = D4BlackList(it.Next());
		if (p == null)
		{
			p = new("D4BlackList").Init();
		}
		return p;
	}
	
	//--------------------------------------------------------------------------
	// Adds a monster to the black list
	void Add(Name mon, bool parent = false)
	{
		// Make sure it's an actual thing that can be added, as in an actual class
		// that's an actor.
		Class<Actor> check = mon;
		if (!check)	
		{
			String thing = mon;
			Console.Printf("Bad actor %s", thing);
			return;
		}
		
		Array<String> Test;
		if (parent)		Test.Copy(PList);
		else			Test.Copy(List);
		
		String thing = mon;
		
		if (Test.Size() > 0)
		{
			//If it's already in, do nothing.
			int po = Test.Find(mon);
			if (po < Test.Size())
			{
				//Console.Printf("%s already in", thing);
				return;
			}
		}
		
		Test.Push(mon);
		//Console.Printf("Added %s", thing);
		
		if (parent)		PList.Move(Test);
		else			List.Move(Test);
		
	}
	
	//--------------------------------------------------------------------------
	// Removes a monster from the black list
	void Remove(Name mon)
	{
		Class<Actor> check = mon;
		if (!check)	return;
		
		// Check the base list.
		if (List.Size() > 0)
		{
			int po = List.Find(mon);
			if (po < List.Size())
			{
				List.Delete(po);
			}
		}
		
		// Now check the parent list.
		if (PList.Size() > 0)
		{
			int po = PList.Find(mon);
			if (po < PList.Size())
			{
				PList.Delete(po);
			}
		}
	}
	
	//--------------------------------------------------------------------------
	// Returns if the monster is on the black list or not.
	bool Check(Actor mon)
	{
		if (!mon || (List.Size() + PList.Size() < 1))
			return false;
		
		
		// For the parent list, we need to manually go through and check
		// inheritance. The find() function will only give us direct results.
		if (PList.Size() > 0)
		{
			for (int i = 0; i < PList.Size(); i++)
			{
				Class<Actor> other = PList[i];
				if (other && (mon.GetClass() is other))
				{
					return true;
				}			
			}
		}
		if (List.Size() > 0)
		{
			int po = List.Find(mon.GetClassName());
			if (po < List.Size())
				return true;
		}
		return false;
	}
}