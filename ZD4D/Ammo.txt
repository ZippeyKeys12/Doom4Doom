enum D4AmmoConstants
{
	D4Fuel_MaxAmount1 = 5,
	D4Fuel_MaxAmount2 = 8,
	D4Bullets_MaxAmount1 = 250,
	D4Bullets_MaxAmount2 = 350,
	D4Shells_MaxAmount1 = 45,
	D4Shells_MaxAmount2 = 75,
	D4Cells_MaxAmount1 = 200,
	D4Cells_MaxAmount2 = 300,
	D4Rockets_MaxAmount1 = 30,
	D4Rockets_MaxAmount2 = 40,
	D4BFGAmmo_MaxAmount = 3,
	D4Carrion_MaxAmount = 5000,
};

//=======================================================================
//=======================================================================
// Special ammo spawners
//=======================================================================
//=======================================================================
Class ClipReplacer : CustomInventory replaces Clip
{
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_SpawnItemEx("D4BulletsSmall",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL,0,tid);
		TNT1 A -1 
		{
			if (CountInv("D4Chainsaw",Player1) || A_CheckProximity("Null","D4Chainsaw",20000,1))
			{
				A_SpawnItemEx("D4FuelSmall",random(10,-10),random(10,-10),0,0,0,0,0,SXF_NOCHECKPOSITION,245);
			}
		}
		Stop;
	}
}

Class ClipBoxReplacer : CustomInventory replaces ClipBox
{
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_SpawnItemEx("D4Bullets",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL,0,tid);
		TNT1 A -1 
		{
			if (CountInv("D4Chainsaw",Player1) || A_CheckProximity("Null","D4Chainsaw",20000,1))
			{
				A_SpawnItemEx("D4Fuel",random(10,-10),random(10,-10),0,0,0,0,0,SXF_NOCHECKPOSITION,230);
			}
		}
		Stop;
	}
}

Class ShellReplacer : CustomInventory replaces Shell
{
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_SpawnItemEx("D4ShellsSmall",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL,0,tid);
		TNT1 A -1 
		{
			if (CountInv("D4Chainsaw",Player1) || A_CheckProximity("Null","D4Chainsaw",20000,1))
			{
				A_SpawnItemEx("D4FuelSmall",random(10,-10),random(10,-10),0,0,0,0,0,SXF_NOCHECKPOSITION,245);
			}
		}
		Stop;
	}
}

Class ShellBoxReplacer : CustomInventory replaces ShellBox
{
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_SpawnItemEx("D4Shells",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL,0,tid);
		TNT1 A -1  
		{
			if (CountInv("D4Chainsaw",Player1) || A_CheckProximity("Null","D4Chainsaw",20000,1))
			{
				A_SpawnItemEx("D4Fuel",random(10,-10),random(10,-10),0,0,0,0,0,SXF_NOCHECKPOSITION,230);
			}
		}
		Stop;
	}
}


Class RocketAmmoReplacer : CustomInventory replaces RocketAmmo
{
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_SpawnItemEx("D4RocketsSmall",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL,0,tid);
		TNT1 A -1 
		{
			if (CountInv("D4Chainsaw",Player1) || A_CheckProximity("Null","D4Chainsaw",20000,1))
			{
				A_SpawnItemEx("D4FuelSmall",random(10,-10),random(10,-10),0,0,0,0,0,SXF_NOCHECKPOSITION,200);
			}
		}
		Stop;
	}
}

Class RocketBoxReplacer : CustomInventory replaces RocketBox
{
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_SpawnItemEx("D4Rockets",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL,0,tid);
		TNT1 A -1 
		{
			if (CountInv("D4Chainsaw",Player1) || A_CheckProximity("Null","D4Chainsaw",20000,1))
			{
				A_SpawnItemEx("D4Fuel",random(10,-10),random(10,-10),0,0,0,0,0,SXF_NOCHECKPOSITION,160);
			}
		}
		Stop;
	}
}


Class CellReplacer : CustomInventory replaces Cell
{
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NODELAY 
		{
			A_SpawnItemEx("D4CellsSmall",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL,0,tid);
			if (CountInv("D4Chainsaw",Player1) || A_CheckProximity("Null","D4Chainsaw",20000,1))
			{
				A_SpawnItemEx("D4FuelSmall",random(10,-10),random(10,-10),0,0,0,0,0,SXF_NOCHECKPOSITION,200);
			}
			if (CountInv("D4BFG",Player1) || A_CheckProximity("Null","D4BFG",20000,1))
			{
				A_SpawnItemEx("D4BFGAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,245);
			}
		}
		Stop;
	}
}
Class CellPackReplacer : CustomInventory replaces CellPack
{
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NODELAY
		{
			A_SpawnItemEx("D4Cells",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL,0,tid);
			if (CountInv("D4Chainsaw",Player1) || A_CheckProximity("Null","D4Chainsaw",20000,1))
			{
				A_SpawnItemEx("D4Fuel",random(10,-10),random(10,-10),0,0,0,0,0,SXF_NOCHECKPOSITION,160);
			}
			if (CountInv("D4BFG",Player1) || A_CheckProximity("Null","D4BFG",20000,1))
			{
				A_SpawnItemEx("D4BFGAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,220);
			}			
		}
		Stop;
	}
}
//=============================================================================
//
//=============================================================================

Class D4Fuel : Ammo 
{
	
	Default
	{
		+FLOORCLIP
		-TELESTOMP
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Chainsaw fuel";
		//Inventory.Icon "AMMON0"
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
		Inventory.Amount 2;
		Inventory.MaxAmount D4Fuel_MaxAmount1;
		Ammo.BackpackMaxAmount D4Fuel_MaxAmount2;
		DistanceCheck "user_MaxDrawDistance";
		Scale 0.45;
	}
	States
	{
	Spawn:
		AMGS A -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4FuelSmall : D4Fuel 
{
	
	Default
	{
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		Inventory.Amount 1;
		Scale 0.3;
	}
}

//=============================================================================
//
//=============================================================================

Class D4Bullets : Ammo replaces ClipBox
{
	
	Default
	{
		+FLOORCLIP
		-TELESTOMP
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Bullets";
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
		Inventory.Amount 50;
		Inventory.MaxAmount D4Bullets_MaxAmount1;
		Ammo.BackpackMaxAmount D4Bullets_MaxAmount2;
		Ammo.BackpackAmount 16;
		DistanceCheck "user_MaxDrawDistance";
		Scale 0.3;
	}
	
	States
	{
	Spawn:
		AMBL A -1  NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4BulletsSmall : D4Bullets replaces clip
{
	
	Default
	{
		Inventory.Amount 16;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
	}
	States
	{
	Spawn:
		AMBL B -1  NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

//=============================================================================
//
//=============================================================================

Class D4Shells : Ammo replaces ShellBox
{
	Default
	{
		+FLOORCLIP
		-TELESTOMP
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Shotgun shells";
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
		Inventory.Amount 20;
		Inventory.MaxAmount D4Shells_MaxAmount1;
		Ammo.BackpackMaxAmount D4Shells_MaxAmount2;
		Ammo.BackpackAmount 6;
		DistanceCheck "user_MaxDrawDistance";
		Scale 0.3;
	}
	
	States
	{
	Spawn:
		AMSH A -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4ShellsSmall : D4Shells replaces Shell
{
	
	Default
	{
		Inventory.Amount 6;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
	}
	States
	{
	Spawn:
		AMSH B -1  NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

//==============================================================================
//
//==============================================================================
Class D4Cells : Ammo //replaces CellPack
{
	Default
	{
	+FLOORCLIP
	-TELESTOMP
	Radius 20;
	Height 16;
	Inventory.PickupMessage "Plasma cells";
	Inventory.PickupSound "Doom4/Pickups/AmmoBig";
	Inventory.Amount 30;
	Inventory.MaxAmount D4Cells_MaxAmount1;
	Ammo.BackpackMaxAmount D4Cells_MaxAmount2;
	Ammo.BackpackAmount 10;
	DistanceCheck "user_MaxDrawDistance";
	Scale 0.4;
	}
	States
	{
	Spawn:
		AMPL A -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4CellsSmall : D4Cells //replaces Cell
{
	Default
	{
	Inventory.Amount 10;
	Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
	}
	States
	{
	Spawn:
		AMPL B -1  NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

//=============================================================================
//
//=============================================================================
Class D4Rockets : Ammo //replaces RocketBox
{
	Default
	{
		+FLOORCLIP
		-TELESTOMP
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Rockets";
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
		Inventory.Amount 5;
		Inventory.MaxAmount D4Rockets_MaxAmount1;
		Ammo.BackpackMaxAmount D4Rockets_MaxAmount2;
		Ammo.BackpackAmount 1;
		DistanceCheck "user_MaxDrawDistance";
		Scale 0.3;
	}
	States
	{
	Spawn:
		AMRK A -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4RocketsSmall : D4Rockets //replaces RocketAmmo
{
	Default
	{
		Inventory.Amount 3;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
	}
	States
	{
	Spawn:
		AMRK B -1  NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}
//==============================================================================
//
//==============================================================================
Class D4BFGAmmo : Ammo
{
	Default
	{
		Inventory.PickupMessage "BFG cells";
		Inventory.Amount 1;
		Inventory.MaxAmount D4BFGAmmo_MaxAmount;
		Inventory.Icon "BFUGA0";
		Ammo.BackpackAmount 1;
		Ammo.BackpackMaxAmount D4BFGAmmo_MaxAmount;
		Inventory.PickupSound "Doom4/Pickups/BFGAmmo";
		DistanceCheck "user_MaxDrawDistance";
		Scale 0.40;
	}
	States
	{
	Spawn:
		AMBF A 120 Bright NODELAY Light("GreenSmallPoint3") A_PlaySound("Doom4/Weapon/BFG/AmmoLoop",7,0.5,0,5);
		Wait;
	}
}

//==============================================================================
//
//==============================================================================

Class D4Carrion : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.Amount 1;	//Don't touch this. See "PickupAmount" in D4PinataCarrion below.
		Inventory.MaxAmount D4Carrion_MaxAmount;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount D4Carrion_MaxAmount;
	}
}

Class D4CarrionToken : Inventory
{
	Default
	{
		+INVENTORY.IGNORESKILL
		+INVENTORY.UNDROPPABLE
		Inventory.MaxAmount 2000;
		Inventory.InterhubAmount 2000;
	}
}

Class Vacuumed : Inventory {}

Class D4PinataCarrion : CustomInventory
{
	enum Pinata
	{
		PickupMax = 5000,			//How much they can carry.
		PickupAmountBase = 10,		//The very minimal amount to always be given for ammo.
		PickupAmountAdd = 5,		//The random amount to give for ammo.
		CarrionLifeTime = 3000,		//How long these linger for.
		SuckDistance = 512,			//How close the player must be to magnetize.
		MergeDistance = SuckDistance*4,		//How close another carrion piece must be to merge.
		MaxMergeTimer = 80,				//Maximum time in tics until merge.
	};
	
	int mul;		// Multiplier based on upgrades
	int count;
	int landed;
	int spawned;
	int safety;
	int absorb;
	int timer;
	int mergetime;
	UpgradePinataFlier flier;
	
	Default
	{
		Scale 0.3;
		Radius 8;
		Height 16;
		Gravity 0.4;
		Inventory.PickupMessage "Carrion";
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		Inventory.Amount 1;
		Inventory.MaxAmount 1000000;
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+NOBLOCKMONST
		+NOTELESTOMP
		+INVENTORY.TRANSFER
		BounceFactor 0.5;
		DistanceCheck "user_MaxDrawDistance";
		Translation "0:255=%[0,0,0]:[1.0,0.1,0.1]";
	}
	
	//...I'm playing with fire by introducing TIDs but, in an effort to make it
	// run better, I kinda have to.
	override void PostBeginPlay()
	{
		ChangeTID(TID_Carrion);
		Super.PostBeginPlay();
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		bool good = Super.TryPickup (toucher);
		if (good)	ChangeTID(0);
		return good;
	}
	
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (CountInv("D4CarrionToken") < BuildRequirement - 1)	
			{
				let inv = Inventory(FindInventory("D4CarrionToken",true));
				//if (inv) 	inv.Amount += invoker.amount;
				//else		
				A_GiveInventory("D4CarrionToken",invoker.amount);	
				//A_LogInt(CountInv("D4CarrionToken"));
			}
			else if (!CountInv("D4CarrionCannon"))		
			{	
				A_PrintBold("The Carrion Cannon is yours.\n\cgReturn the fires of Hell to them.");
				A_SpawnItemEx("CarrionPortalOpener",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET,0,666);
				A_GiveInventory("D4CarrionCannon",1);
			}
			else if (GetCvar("sv_unlimited_pickup") || CountInv("D4Carrion") < PickupMax)
			{
				int amt = (invoker.amount + PickupAmountBase + random(0,PickupAmountAdd)) * (CountInv("CarrionUpgradePickup") ? 2 : 1);
				/*
				let inv = Ammo(FindInventory("D4Carrion"));
				if (inv)
					inv.Amount += amt;
				*/
				//A_LogInt(amt);
				A_GiveInventory("D4Carrion",amt);	
				//A_LogInt(CountInv("D4Carrion"));
				
			}
			else	
				return false;
			
			if (invoker.flier)
				invoker.flier.DestroyMe = true;
			return true;
		}
		Stop;
	Spawn:
		PIN2 D 1 NoDelay 
		{
			A_SetTics(random(1,6));
			if (!invoker.spawned)
			{
				A_SpawnItemEx("D4CarrionBorder",0,0,5,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				invoker.spawned = 1;
			}
			invoker.mergetime = random(2,MaxMergeTimer);
			invoker.flier = new("UpgradePinataFlier");
			if (invoker.flier)
			{
				invoker.flier.Spawner = invoker;
				invoker.flier.Item = "D4Carrion";
				invoker.flier.MaxAmt = 5000;
				invoker.flier.Distance = SuckDistance;
			}
		}
	Looping:
		"----" A 2
		{
			if (invoker.count >= DelayVacuum)
			{
				// Tracer should automatically be handled by the thinker.
				if (tracer)
				{
					invoker.count = DelayVacuum;
					PlrCheck.SetFlying(self, true);
					A_FaceTracer(0,0,0,0,FAF_MIDDLE);
					A_ChangeVelocity(x: cos(pitch)*PSpeed, z: -sin(pitch)*PSpeed, flags: CVF_RELATIVE|CVF_REPLACE);
					if (Distance3D(tracer) <= 32)
					{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(self, false);	}
				}
				else
				{
					PlrCheck.SetFlying(self, false);
				}
				
				if (invoker.count > CarrionLifetime)	invoker.A_FadeOut();
				else 									invoker.Alpha = 1.0;
			}
			
			/*
			if (invoker.count >= DelayVacuum)
			{
				tracer = null;
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (playeringame[i])
					{
						Actor plr = players[i].mo;
						if (plr && Distance3D(plr) <= SuckDistance && plr.health > 0 && !plr.FindInventory("PowerMorph",true))
						{	
							tracer = plr;
							break;
						}
					}
				}
				if (tracer)
				{
					if (GetCvar("sv_unlimited_pickup") > 0 || 
						CountInv("D4Carrion",TracerPtr) < PickupMax ||
						CountInv("D4CarrionToken",TracerPtr) < BuildRequirement)
					{	
						//A_GiveInventory("Vacuumed",1);
						return ResolveState("Suckage");	
					}
				}
			}
			else if (invoker.landed || invoker.count < DelayVacuum)
			{	invoker.count++;	}
			*/
			
			// There's some nearby carrion. Lets merge it together. Thanks to the
			// power that be TRANSFER flag, it's fully possible to now combine
			// the efforts and have inventory actors deliver others.
			// So lets stack them up.
			
			if (!tracer)
			{
				invoker.timer = (invoker.timer + 1) % invoker.mergetime;
				
				if (invoker.timer == 0)
				{
					invoker.safety = 0;
					
					let it = ActorIterator.Create(tid,"D4PinataCarrion");
					Actor mo;
					while (mo = it.Next())
					{
						if (mo == self)
							continue;
						
						let inv = Inventory(mo);
						if (inv && inv.Owner)
						{
							inv.ChangeTID(0);
							continue;
						}	
						if (Distance3D(mo) > MergeDistance * invoker.mergetime/MaxMergeTimer)
							continue;
					
						if (!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
							continue;
						
						inv.Amount += invoker.Amount;
						tracer = mo;
						A_RemoveChildren(true,RMVF_EVERYTHING);
						A_FaceTracer(0,0,0,0,FAF_MIDDLE);
						A_SpawnItemEx("CarrionMergeBeam",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERPOINTERS);
						if (invoker.flier) 	invoker.flier.DestroyMe = true;
						return Destroy();
					}
				}
			}
			invoker.count += 2;
		}
		Loop;
	}
}



Class D4CarrionBorder : D4PinataParticles
{
	Default
	{
		Translation "0:255=%[0,0,0]:[1.0,0.1,0.1]";
	}
}

Class CarrionMergeBeam : Actor
{
	enum Carrion
	{
		MaxDistance = 2048,	// Maximum distance of the effect
		AngleRandom = 7,	// The boundaries of angle changing (random(-AngleRandom,AngleRandom))
		PitchRandom = 7,	// ^ for pitch
		ChokeMin = 1,		// How sooner or later the beam needs to correct itself to
		ChokeMax = 5,		// 	"stay on target".
	};
	const StepDistance = 31;
	const StepDistHalf = StepDistance / 2.0;
	double ipitch;
	double iangle;
	double dista;
	double distb;
	Vector3 op;
	//[0] = Current distance travelled
	//[1] = How much further to go
	int choke;
	int t;
	int count;
	int render;
	
	Default
	{
		+NOCLIP
		+NOINTERACTION
		+NOBLOCKMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			// The angle and pitch won't change so go ahead and save it now.
			ipitch = pitch;
			iangle = angle;
			distb = Min(MaxDistance, GetDistance(true,TracerPtr));
			choke = random(ChokeMin, ChokeMax);
			op = pos;
			render = int(GetCvar("vid_renderer"));
		}
		TNT1 A 1
		{
			// dista = distance currently travelled.
			// distb = maximum distance.			
			while ((dista < distb))
			{
				if (!tracer)
					return Destroy();
				// Don't randomize the very first beam.
				if (dista > 0)
				{	A_FaceTracer(0,0,0,0,FAF_MIDDLE);	}
				
				// Randomizes the angle of the beams. 
				if (dista < (distb - StepDistance))
				{
					// If we're not about to reach the end, or not hitting the 
					// choker, randomize it. Otherwise, stay on target and go 
					// for the puff.
					if (choke > 0)
					{
						A_SetPitch(pitch + frandom(-PitchRandom, PitchRandom));
						A_SetAngle(angle + frandom(-AngleRandom, AngleRandom));
						choke--;
					}
					else 
					{	choke = random(ChokeMin,ChokeMax);	}
				}
				// Spawn the beam with the same angle and pitch. Note that the
				// beam is being centered so we have to take that into account
				// and spawn it FORWARD based on half the beam's length.
				// Then move forward by a beam's length and repeat until done.
				
				if (render)
				{	A_SpawnItemEx("CarrionTrailBeam",cos(pitch) * StepDistHalf,0,-sin(pitch) * StepDistHalf,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERPOINTERS);	}
				else
				{
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * (StepDistHalf * (1 / 6)), 0, -sin(pitch) * (StepDistHalf * (1 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * (StepDistHalf * (2 / 6)), 0, -sin(pitch) * (StepDistHalf * (2 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * (StepDistHalf * (3 / 6)), 0, -sin(pitch) * (StepDistHalf * (3 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * (StepDistHalf * (4 / 6)), 0, -sin(pitch) * (StepDistHalf * (4 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * (StepDistHalf * (5 / 6)), 0, -sin(pitch) * (StepDistHalf * (5 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * StepDistHalf	 		, 0, -sin(pitch) * (StepDistHalf			 ));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-(StepDistHalf * (1 / 6)), 0, -sin(pitch) *-(StepDistHalf * (1 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-(StepDistHalf * (2 / 6)), 0, -sin(pitch) *-(StepDistHalf * (2 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-(StepDistHalf * (3 / 6)), 0, -sin(pitch) *-(StepDistHalf * (3 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-(StepDistHalf * (4 / 6)), 0, -sin(pitch) *-(StepDistHalf * (4 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-(StepDistHalf * (5 / 6)), 0, -sin(pitch) *-(StepDistHalf * (5 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-StepDistHalf			, 0, -sin(pitch) *-(StepDistHalf			 ));
				}
				
				A_Warp(DefPtr,cos(pitch) * StepDistance,0,-sin(pitch) * StepDistance,0,WARPF_NOCHECKPOSITION);
				dista += StepDistance;
			}
			
			if (count < 3 && !tracer)
			{
				count++;
				dista = 0;
				pitch = ipitch;
				
				SetOrigin(op, false);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				return;
			}
			return Destroy();
		}
		Wait;
	}
}

Class CarrionTrailBeam : TrailBeam
{
	Default
	{
		XScale 0.03;
		YScale 0.25; //Don't touch.
	}
	States
	{
	Spawn:
		X202 I 0 NoDelay
		{
			// time = time to shrink to nothing
			user_time = 5.0;
			A_SpawnItemEx("CarrionTrailBeam",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS,tid * 256,1);
			return ResolveState("Process");
		}
	}
}