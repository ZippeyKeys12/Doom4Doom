//===================================================================================================
//===================================================================================================
//
//		BFG
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Original Code: DBThanatos
//	Code overhaul: Major Cooke
//
//===================================================================================================
//===================================================================================================

Class D4BFG : Doom4Weapon
{	
	Default 
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Weapon.SlotNumber 1;
		Weapon.AmmoType1 "D4BFGAmmo";
		Weapon.AmmoType2 "D4BFGAmmo";
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive1 1;
		Inventory.PickupMessage "BFG 9000! Hell YES!";
		Inventory.PickupSound "Doom4/Weapon/BFG/Pickup";
		Obituary "%o felt the wrath of %k's beautiful greenliness.";
		Tag "BFG 9000";
		Weapon.SelectionOrder 130;
		+DONTGIB
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		if (Super.TryPickup(toucher))
		{
			A_PlaySound("Doom4/Weapon/BFG/Pickup", 5, 1, 0, ATTN_NONE);
			return true;
		}
		return false;
	}
	
	States
	{
	Spawn:
		WPPK I -1;
		Stop;
	Ready:
		WEP7 A 0 
		{
			A_Overlay(GunWatcher,"BFG.Redirector",true);
			A_SetInventory("SineZoom",0);
		}
	ReadyLoop:
		WEP7 A 1 A_WeaponReady((CountInv("BFGUpgrade2") ? (WRF_ALLOWRELOAD|WRF_ALLOWUSER2) : (WRF_NOSECONDARY|WRF_ALLOWRELOAD|WRF_ALLOWUSER2)));
		Loop;
	Deselect:
		WEP7 A 0 
		{
			A_TakeInventory("SineZoom",1000,0);
			A_ZoomFactor(1,ZOOM_NOSCALETURNING);
		}
		WEP7 A 1 A_Lower;
		WEP7 A 0 A_Lower(WeaponSwitchSpeed);
		Loop;
	Select:
		WEP7 A 0 ACS_NamedExecute("RemoveModText",0,0,0,0);
		WEP7 A 1 A_Raise;
		WEP7 A 0 A_Raise(WeaponSwitchSpeed);
		Goto Select+1;
	Fire:
		WEP7 A 0 
		{
			A_SetInventory("SineZoom",0,0);
			A_PlaySound("Doom4/Weapon/BFG/Fire",CHAN_WEAPON,1);
		}
		WEP7 BBCCDDEEFFGGHHIIJJKKLLMMNN 1 Bright
		{
			A_GiveInventory("SineZoom",16);
			A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING);
		}
		WEP7 O 1 Bright offset(2,37) { A_GiveInventory("SineZoom",18);	A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING); }
		WEP7 O 1 Bright offset(4,42) { A_GiveInventory("SineZoom",18);	A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING); }
		WEP7 O 1 Bright offset(7,47) 
		{
			A_GunFlash("Null");
			A_FireProjectile("BFG9000Shot",0,1,3);
			A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			A_SetPitch(pitch-6.0);
		}
		WEP7 P 1 Bright offset(10,52);
		WEP7 P 2 Bright ;
		WEP7 QQQ 1 Bright A_SetPitch(pitch+0.5);
		WEP7 RR 1 Bright offset(9,50) A_SetPitch(pitch+0.5);
		WEP7 RR 1 Bright offset(8,48) A_SetPitch(pitch+0.5);
		WEP7 SS 1 Bright offset(7,46) A_SetPitch(pitch+0.5);
		WEP7 SS 1 Bright offset(6,44) A_SetPitch(pitch+0.5);
		WEP7 T 2 Bright offset(5,42) A_SetPitch(pitch+0.5);
		WEP7 T 2 Bright offset(4,40);
		WEP7 U 2 Bright offset(3,38);
		WEP7 U 2 Bright offset(2,36);
		WEP7 V 2 Bright offset(1,34);
		WEP7 V 2 Bright offset(1,33);
		WEP7 V 0 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		WEP7 WXYZ 2 Bright;
		Goto Ready;
	AltFire:
		WEP7 A 0 
		{
			A_TakeInventory("SineZoom",1000,0);
			A_PlaySound("Doom4/Weapon/BFG/Fire",CHAN_WEAPON,1);
		}
		WEP7 BBCCDDEEFFGGHHIIJJKKLLMMNN 1 Bright
		{
			A_GiveInventory("SineZoom",16);
			A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING);
		}
		WEP7 O 1 Bright offset(2,37) { A_GiveInventory("SineZoom",18);	A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING); }
		WEP7 O 1 Bright offset(4,42) { A_GiveInventory("SineZoom",18);	A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING); }
		WEP7 O 1 Bright offset(7,47) 
		{
			A_GunFlash("Null");
			if (CountInv("OrbiterActive"))
			{
				A_GiveInventory("OrbiterExtender",16);
			}
			else
			{
				A_SpawnItemEx("BFG9000Orbiter",0,0,32,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_SETTARGET);
				A_FireProjectile("AmmoWaster",0,1);
				A_GiveInventory("OrbiterActive");
			}
			A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			A_SetPitch(pitch-6.0);
		}
		WEP7 P 1 Bright offset(10,52);
		WEP7 P 2 Bright ;
		WEP7 QQQ 1 Bright A_SetPitch(pitch+0.5);
		WEP7 RR 1 Bright offset(9,50) A_SetPitch(pitch+0.5);
		WEP7 RR 1 Bright offset(8,48) A_SetPitch(pitch+0.5);
		WEP7 SS 1 Bright offset(7,46) A_SetPitch(pitch+0.5);
		WEP7 SS 1 Bright offset(6,44) A_SetPitch(pitch+0.5);
		WEP7 T 2 Bright offset(5,42) A_SetPitch(pitch+0.5);
		WEP7 T 2 Bright offset(4,40);
		WEP7 U 2 Bright offset(3,38);
		WEP7 U 2 Bright offset(2,36);
		WEP7 V 2 Bright offset(1,34);
		WEP7 V 2 Bright offset(1,33);
		WEP7 V 0 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		WEP7 WXYZ 2 Bright;
		Goto Ready;
	BFG.Redirector:
		M666 A 1
		{
			if (CountInv("BFGUpgrade4"))
			{
				if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_USER1) &&
					!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_USER1))
				{
					A_FireBullets(0,0,1,0,"BFGRedirectPuff",FBF_NORANDOMPUFFZ|FBF_NOFLASH,32766);
					A_GiveToChildren("BFGRedirector",1);
				}
			}
		}
		Loop;
	}
}

Class AmmoWaster : Actor 
{
	Default 
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	}
}

Class BFGRedirectPuff : Actor 
{
	Default 
	{
		+PUFFONACTORS
		+ALWAYSPUFF
		+NOINTERACTION
		+BLOODLESSIMPACT
		+DONTTHRUST
		+PAINLESS
		+NOTONAUTOMAP
		+NEVERTARGET
		+BRIGHT
		Radius 1;
		Height 1;
		RenderStyle "None";
	}
	States
	{
	Spawn:
		PLAY A 4;
		Stop;
	}
}

Class BFGRedirector : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (CheckClass("BFG9000Shot",DefPtr,true))
			{
				if (!CountInv("RedirectedToken"))
				{
					if (A_CheckProximity("Null","BFGRedirectPuff",32000,1,CPXF_SETTRACER))
					{
						A_GiveInventory("RedirectedToken",1);
						A_FaceTracer(0,0,0,0,FAF_MIDDLE);
						A_ChangeVelocity(x: cos(pitch)*speed, z: -sin(pitch)*speed, flags: CVF_REPLACE|CVF_RELATIVE);
						return true;
					}
				}
			}
			return false;
		}
		Stop;
	}
}

Class RedirectedToken : Inventory {}
Class SineZoom : Inventory { Default { Inventory.MaxAmount 450; }}
Class OrbiterActive : Inventory { Default { Inventory.InterhubAmount 0; }}
Class OrbiterExtender : Inventory { Default { Inventory.MaxAmount 500;	Inventory.InterhubAmount 0; }}

//-----------------------------------------------------------------
//-----------------------------------------------------------------
const BFG_LaserRadius = 1024;
Class BFGProjectile  : Actor 
{
	int drawBeams;
	int renderer;
	//==========================================================================
	// Functions
	//==========================================================================
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		drawBeams = GetCvar("D4BFGEffects");
		renderer = GetCvar("vid_renderer");
	}
	
	//--------------------------------------------------------------------------
	// Spawns BFG lasers.
	void BFGBeams(int maxtargets)
	{
		int count = 0;
		ThinkerIterator Beamer = ThinkerIterator.Create();
		Actor mo;
		while ((count < maxtargets) && (mo = Actor(Beamer.Next())))
		{
			// Obviously don't check self, and the shooter.
			if (mo == self || mo == target)
			{	continue;	}
			
			// Don't target things that aren't monsters, or are already dead.
			if (mo.bNOINTERACTION || mo.bNOSECTOR ||
				mo.bFRIENDLY || !mo.bISMONSTER || mo.health < 1 || 
				(!mo.bSHOOTABLE && !mo.bVULNERABLE) ||
				(mo is "DemonShield") ||
				(mo is "PlayerPawn"))
				continue;	
			
			
			// Check sight and range.
			if (Distance2D(mo) > BFG_LaserRadius || 
				!CheckSight(mo, SF_IGNOREVISIBILITY | SF_IGNOREWATERBOUNDARY))
			{	continue;	}
			
			// Passed the validation checks. Give it the bomb token and spawn a beam.
			count++;
			
			if (!mo.CountInv("BFGKillToken"))
			{
				if (!(mo is "PlayerPawn") &&
					!(mo is "BossBrain"))
				{
					mo.A_SetInventory("BFGKillToken",1);
				}
			}
			
			if (drawBeams)
			{
				Class<Actor> beamname = null;
				if (renderer)
				{	beamname = "BFGBeamGZ"; }
				else
				{	beamname = "BFGBeam"; 	}
				
				if (beamname)
				{
					Vector3 monpos = mo.pos + ( 0, 0, mo.height / 2.0 );
					Actor beam = Spawn(beamname, monpos);
					
					if (beam)
					{
						beam.target = self;
						beam.tracer = mo;
					}
				}
				
			}
		}
	}
	
	void BFGDetonate()
	{
		ThinkerIterator it = ThinkerIterator.Create();
		Actor mo;
		//Actor oldTracer = tracer;
		while (mo = Actor(it.Next()))
		{
			if (!mo.CountInv("BFGKillToken"))
			{	continue;	}
			
			if (mo.bFRIENDLY || !mo.bISMONSTER || mo.health < 1 || mo.bKILLED || 
				(mo is "PlayerPawn"))
			{
				mo.A_SetInventory("BFGKillToken",0);
				continue;
			}
			Actor src;
			if (target)	src = target;
			else		src = self;
			mo.DamageMobj(self, src, 2000, "BFGExploder");
		}
	}
}

Class BFG9000Shot : BFGProjectile
{
	int user_boosted;
	int user_flags;
	int user_count;
	int user_c2;
	double  user_pitch;
	Default 
	{
		Projectile;
		+SEEINVISIBLE
		+FORCERADIUSDMG
		+EXTREMEDEATH
		+FORCEXYBILLBOARD
		+BRIGHT
		+ROLLSPRITE
		+NODAMAGETHRUST
		+CANNOTPUSH
		Radius 8;
		Height 12;
		Speed 20;
		Damage 300;
		Scale 0.45;
		DamageType "BFGBeam";
		DeathSound "Doom4/Weapon/BFG/Impact";
		RenderStyle "Add";
		Decal "D4BFGLightning";
	}
	
	//==========================================================================
	// States
	//==========================================================================
	States
	{
	Spawn:
		BFE1 B 0 NoDelay 
		{
			A_PlaySound("Doom4/Weapon/BFG/Flying",7,0.6,1);
			A_RearrangePointers(DefPtr,TargetPtr,DefPtr,4);
			A_FaceMovementDirection(0,0,0);
			user_boosted = CountInv("BFGUpgrade3",TargetPtr);
			if (user_boosted)
			{
				vel *= 2;
				A_SetSpeed(40);
			}
		}
	Moving:
		BFE1 B 1 Bright Light("GreenBigFlicker3")
		{
			A_SetScale((sin(user_c2)*0.075)+0.45);
			user_c2 = (user_c2 + random(20,35)) % 360;
			
			A_SetRoll(roll + 5, SPF_INTERPOLATE);
			user_count = (user_count + 1) % 4;
			
			if (!user_count)	{	BFGBeams(5);	}
			
			A_SpawnItemEx("BFGTrailSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERPITCH|SXF_TRANSFERROLL);
			A_Explode((user_boosted ? random(10,20) : random(3,6)),BFG_LaserRadius,0,0,BFG_LaserRadius);
			
			if (GetCvar("HQEffectsWeapons"))	{	A_SpawnItemEx("BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,192);	}
			
		}
		Loop;
	Death:
		BFE1 C 0
		{
			bRollSprite = false;
			A_StopSound(7);
			if (GetCvar("HQEffectsWeapons"))
			{
				for (user_count = 0; user_count < 10; user_count++)
				{
					A_SpawnItemEx("BFGImpactVapor",3,0,0,frandom(-4,4),frandom(-4,4),frandom(-4,4),0,SXF_NOCHECKPOSITION,128);
					
					if (user_count < 4)
					{	
						if (user_count > 0) 
						{	A_SpawnItemEx("BFGShockwave2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,user_count);	}
						A_SpawnItemEx("BFGShockwave2",0,0,0,0,0,0,90,SXF_NOCHECKPOSITION,0,user_count);	
					}
				}
			}
			
			A_SpawnItemEx("BFGImpactVapor",3,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128);
			A_SpawnItemEx("BFGImpactLightEmitter",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BFGShockwave1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			BFGDetonate();
			if (GetCvar("user_quakexplosions")==1)
			{
				A_QuakeEx(0,0,0,20,0,2048,"",QF_SCALEDOWN|QF_SCALEUP,0,0,0,1,4,1,0);
				A_QuakeEx(0,0,0,33,0,2048,"",QF_SCALEDOWN|QF_WAVE|QF_SCALEUP,0,0,0,1,4,2.5*randompick(-1,1),frandom(5.5,8.5));
			}
			else
			{
				A_QuakeEx(0,0,0,16,0,512,"",QF_SCALEDOWN|QF_SCALEUP,0,0,0,1,4,1,0);
				A_QuakeEx(0,0,0,20,0,512,"",QF_SCALEDOWN|QF_WAVE|QF_SCALEUP,0,0,0,1,4,1.5*randompick(-1,1),frandom(5.5,8.5));
			}
			user_pitch = 0; 
			user_count = 0;
			user_c2 = 0;
			Scale.X = Scale.Y = 0;
			bNoDamageThrust = false;
			bCannotPush = false;
			A_Explode(1700,1024,0,0,1024);
		}
	DLoop:
		BFE1 C 1 bright
		{
			if (GetCvar("HQEffectsWeapons"))
			{	A_SpawnItemEx("BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERROLL);	}
			
			user_count += 8;
			user_c2 += 5;
			A_SetScale(sin(user_c2)*1.5,Max((sin(user_count)*1.4),0.0));
			
			if (Scale.Y <= 0 || user_count >= 180)	
			{	return ResolveState(1);	}
			return ResolveState(null);
		}
		Loop;
		TNT1 A 35; //Let the quake last.
		Stop;
	}
}

Class BFG9000Orbiter : BFGProjectile
{
	int user_boosted;
	int user_flags;
	int user_count;
	int user_c2;
	double  user_pitch;
	int user_tic;
	int user_dir;
	
	Default 
	{
		Projectile;
		+SEEINVISIBLE
		+FORCERADIUSDMG
		+EXTREMEDEATH
		+FORCEXYBILLBOARD
		+BRIGHT
		+ROLLSPRITE
		+NODAMAGETHRUST
		+NOINTERACTION
		Radius 8;
		Height 12;
		Speed 20;
		Damage 300;
		DeathSound "Doom4/Weapon/BFG/Impact";
		DamageType "BFGBeam";
		RenderStyle "Add";
		Alpha 0.35;
		Scale 0.40;
	}
	States
	{
	Spawn:
		BFE1 B 0 NoDelay 
		{
			A_PlaySound("Doom4/Weapon/BFG/Flying",7,0.3,1);
			user_dir = randompick(-1,1);
			user_tic = 35 * 15;
			if (target) master = target;
		}
	Moving:
		BFE1 B 1 Bright Light("GreenBigFlicker3")
		{
			A_Warp(TargetPtr,0,0,0,(360.0/35.0) * user_dir,WARPF_NOCHECKPOSITION|WARPF_USECALLERANGLE|WARPF_STOP|WARPF_INTERPOLATE,"Null",0.4,3.5);
			
			A_SetScale((sin(user_c2)*0.075)+0.4);
			user_c2 = (user_c2 + random(20,35)) % 360;
			
			A_SetRoll(roll + 5, SPF_INTERPOLATE);
			user_count = (user_count + 1) % 4;
			
			if (!user_count)	{	BFGBeams(5);	}
			
			if (A_JumpIfTargetInLOS("Null",360))
			{	
				A_SpawnItemEx("BFGTrailSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERALPHA|SXF_TRANSFERSCALE|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERPITCH|SXF_TRANSFERROLL);
				if (GetCvar("HQEffectsWeapons"))	{	A_SpawnItemEx("BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,192);	}
				
				A_Explode(random(3,6),BFG_LaserRadius,0,0,BFG_LaserRadius);
				
				if (CountInv("OrbiterExtender",TargetPtr))
				{	
					user_tic += 35 * CountInv("OrbiterExtender",TargetPtr);
					A_TakeInventory("OrbiterExtender",32767,0,TargetPtr);
				}
				
				user_tic--;
				
				if (user_tic <= 0)
				{	return ResolveState("Death");	}
			}
			return ResolveState(null);
		}
		Loop;
	Death:
		BFE1 C 0
		{
			A_StopSound(7);
			A_PlaySound("Doom4/Weapon/BFG/Impact",CHAN_AUTO,0.2);
			A_TakeInventory("OrbiterActive",32767,0,TargetPtr);
			if (GetCvar("HQEffectsWeapons"))
			{
				for (user_count = 0; user_count < 10; user_count++)
				{
					A_SpawnItemEx("BFGImpactVapor",3,0,0,frandom(-4,4),frandom(-4,4),frandom(-4,4),0,SXF_NOCHECKPOSITION,128);
					
					if (user_count < 4)
					{	
						if (user_count > 0) 
						{	A_SpawnItemEx("BFGShockwave2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,user_count);	}
						A_SpawnItemEx("BFGShockwave2",0,0,0,0,0,0,90,SXF_NOCHECKPOSITION,0,user_count);	
					}
				}
			}
			
			A_SpawnItemEx("BFGImpactVapor",3,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128);
			A_SpawnItemEx("BFGImpactLightEmitter",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BFGShockwave1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			bRollSprite = false;
			BFGDetonate();
			if (GetCvar("user_quakexplosions")==1)
			{
				A_QuakeEx(0,0,0,20,0,2048,"",QF_SCALEDOWN|QF_SCALEUP,0,0,0,1,4,1,0);
				A_QuakeEx(0,0,0,33,0,2048,"",QF_SCALEDOWN|QF_WAVE|QF_SCALEUP,0,0,0,1,4,2.5*randompick(-1,1),frandom(5.5,8.5));
			}
			else
			{
				A_QuakeEx(0,0,0,16,0,512,"",QF_SCALEDOWN|QF_SCALEUP,0,0,0,1,4,1,0);
				A_QuakeEx(0,0,0,20,0,512,"",QF_SCALEDOWN|QF_WAVE|QF_SCALEUP,0,0,0,1,4,1.5*randompick(-1,1),frandom(5.5,8.5));
			}
			user_pitch = 0;
			user_count = 0;
			user_c2 = 0;
			Scale.X = Scale.Y = 0;
			bNoDamageThrust = false;
			bCANNOTPUSH = false;
			A_Explode(1700,1024,0,0,1024);
		}
	DLoop:
		BFE1 C 1 bright
		{
			if (GetCvar("HQEffectsWeapons"))
			{	A_SpawnItemEx("BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERROLL);	}
			
			user_count += 8;
			user_c2 += 5;
			A_SetScale(sin(user_c2)*1.5,Max((sin(user_count)*1.4),0.0));
			
			if (Scale.Y <= 0 || user_count >= 180)	
			{	return ResolveState(1);	}
			return ResolveState(null);
		}
		Loop;
		TNT1 A 35; //Let the quake last.
		Stop;
	}
}

Class BFGShockwave2 : Actor 
{
	double user_roll;
	Default 
	{
		+NOINTERACTION
		+FLATSPRITE
		+ROLLCENTER
		+BRIGHT
		RenderStyle "Add";
		Scale 0.25;
		Translation "0:255=%[0,0,0]:[0.1,1.0,0.1]";
	}
	States
	{
	Spawn:
		X072 L 1 NoDelay
		{
			pitch = tid * 45;
			Thing_ChangeTID(0,0);
			
			while (pitch > 90)
			{	pitch -= 180;	}
		}
		X072 L 1
		{
			A_SetScale(Scale.X + 0.2);
			A_FadeOut(0.05);
			A_SetRoll(roll + 10, SPF_INTERPOLATE);
		}
		Wait;
	}
}

Class BFGImpactLightEmitter : Actor 
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 2 Light("GreenMediumPoint1");
		TNT1 A 2 Light("GreenBigPoint3");
		TNT1 A 2 Light("GreenBigPoint2");
		TNT1 A 3 Light("GreenBigPoint1");
		TNT1 A 3 Light("GreenBigPoint2");
		TNT1 A 3 Light("GreenBigPoint3");
		TNT1 A 3 Light("GreenMediumPoint1");
		TNT1 A 3 Light("GreenMediumPoint2");
		TNT1 A 3 Light("GreenMediumPoint3");
		TNT1 A 3 Light("GreenSmallPoint1");
		TNT1 A 3 Light("GreenSmallPoint2");
		TNT1 A 3 Light("GreenSmallPoint3");
		Stop;
	}
}

Class BFGImpactVapor : Actor 
{
	Default 
	{
		+NOINTERACTION
		Scale 0.3;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.1,1.0,0.0]";
		+FORCEXYBILLBOARD 
		Alpha 0.99;
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_Jump(240,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40);
		X102 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVV 1 Bright
		{
			A_FadeOut(0.02);
			A_SetScale(Scale.X+0.08);
			if(random(1,3)==3)
			{
				vel *= 0.8;
			}
		}
		Goto Spawn+1;
	}
}
Class BFGShockwave1 : Actor 
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "Add";
		Scale 0.4;
		//Translation "0:255=%[0,0,0]:[0.8,1.5,2.0]";
		Alpha 0.99;
		+ALWAYSPUFF
		+PUFFONACTORS
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		X072 LLLLLL 1 Bright
		{
			A_SetScale(Scale.X+0.16);
		}
		X072 LLLL 1 Bright
		{
			A_SetScale(Scale.X+0.07);
			A_FadeOut(0.07);
		}
		Wait;
	}
}


Class BFGLightningGenerator : Actor 
{
	const AngMin = 5.0;
	const AngMax = 30.0;
	int user_c;
	int user_count;
	int user_d;
	int user_limit;
	int user_branch;
	int user_size;
	int user_t;
	double user_amin;
	double user_amax;
	double user_pitch;
	
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
		Speed 2;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
		// Branch version. Doesn't spawn further instances of itself and halves
		// everything -- turning, spawn count, you name it.
			if (tid > 0)
			{
				user_t = tid;
				Thing_ChangeTID(0,0);
				user_amin = AngMin / 2.0;
				user_amax = AngMax / 2.0;
				user_size = 5;
				user_limit = random(15, 45);
				angle += (frandom(user_amin*2,user_amax*2)*frandompick(-1,1)) / 2.0;
				user_pitch += (frandom(user_amin*2,user_amax*2)*frandompick(-1,1)) / 2.0;
			}
			else
			{	
				user_amin = AngMin;
				user_amax = AngMax;
				user_size = 7;	
				user_limit = random(30,90);
				user_pitch = random(-90,90);
				angle = random(0,359);
			}
			
			user_c = random(1,4);
			user_d = user_c;
		}
	Looping:
		TNT1 A 0
		{
			A_Stop();
			if (user_limit <= 0)
			{	return ResolveState("Null");	}
			user_limit--;
			
			if (user_c <= 0)
			{
				A_Warp(DefPtr,cos(user_pitch)*Speed*user_count,0,-sin(user_pitch)*Speed*user_count,0,WARPF_NOCHECKPOSITION);
				user_pitch += (frandom(user_amin,user_amax)*frandompick(-1,1));
				A_SetAngle(angle+(frandom(user_amin,user_amax)*frandompick(-1,1)));
				A_SetPitch(user_pitch);
				
				if (user_branch > 0)
				{	user_branch--;	}
				if (!user_t && !user_branch)
				{
					A_SpawnItemEx("BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH,64,1);
					A_SpawnItemEx("BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH,128,1);
					A_SpawnItemEx("BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH,192,1);
					user_branch += random(1,5);
				}
				
				user_count = 0;
				user_c = random(1,4);
				user_d = user_c;
			}
			user_c--;
			user_count++;
			A_SpawnParticle("A7FF47",SPF_FULLBRIGHT|SPF_RELATIVE,2,user_size,0,
				((cos(user_pitch)*Speed)*user_count),
				0,
				((sin(-user_pitch)*Speed)*user_count),
				0,0,0,0,0,0,1.0,0.5);
			return ResolveState("Looping");
		}
		Loop;
	}
}

Class BFGKillToken : Inventory	{	Default { Inventory.MaxAmount 1;	}}

//==============================================================================
// GZDoom BFG Beam
Class BFGBeamGZ : Actor 
{
	enum BFGBeamGZ
	{
		MaxDistance = 2048,
		AngleRandom = 7,
		PitchRandom = 7,
		ChokeMin = 2,
		ChokeMax = 6,
		MaxLife = 4,
	};
	const StepDistance = 62;
	double user_pitch;
	double user_angle;
	double user_dista;
	double user_distb;
	double dist[2];
	//[0] = Current distance travelled
	//[1] = How much further to go
	int user_choke;
	int user_count;
	int user_flags;
	
	Default 
	{
		+NOINTERACTION
		+SEEINVISIBLE
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			if (target && tracer)
			{
				Vector3 tpos = (tracer.pos.x, tracer.pos.y, (tracer.pos.z + (tracer.height / 2.0)));
				SetOrigin(tpos, false);
				A_FaceTarget(0,0,0,0,FAF_MIDDLE);
				user_pitch = pitch;
				user_angle = angle;
				user_dista = 0;
				user_distb = Min(MaxDistance,GetDistance(true,TargetPtr));
				user_choke = random(ChokeMin,ChokeMax);
				
				Scale.X = 0.075;
				Scale.Y = 0.5;
			
				if (GetCvar("D4D_BeamTexture"))
				{
					user_flags = SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERPITCH|SXF_TRANSFERPOINTERS|SXF_TRANSFERSPRITEFRAME;
					Scale.X *= 2.5 * randompick(-1,1);
					Scale.Y *= 0.485 * randompick(-1,1);
					return A_Jump(256,1,2,3,4);
				}
				user_flags = SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERPITCH|SXF_TRANSFERPOINTERS;
				return ResolveState("Moving");
			}
			return ResolveState("Null");
		}
	Sprite:
		X206 FGHI 0 A_Jump(256,"Moving");
	Moving:
		"####" "#" 1
		{
			while ((user_dista < user_distb) && tracer && tracer.health > 0)
			{
				if (user_dista > 0)
				{	A_FaceTarget(0,0,0,0,FAF_MIDDLE);	}
				
				if (user_dista < (user_distb - StepDistance))
				{
					if (user_choke > 0)
					{
						pitch += frandom(-PitchRandom, PitchRandom);
						angle += frandom(-AngleRandom, AngleRandom);
						user_choke--;
					}
					else 
					{	user_choke = random(ChokeMin,ChokeMax);	}
				}
				
				if (!A_CheckSight("Null") && (user_dista < user_distb - (StepDistance / 2.0)))
				{	A_SpawnItemEx("BFGBeamLaser",cos(pitch) * (StepDistance / 2.0),0,-sin(pitch) * (StepDistance / 2.0),0,0,0,0,user_flags);	}
				
				A_Warp(DefPtr,cos(pitch) * StepDistance,0,-sin(pitch) * StepDistance,0,WARPF_NOCHECKPOSITION);
				user_dista += StepDistance;
			}
			if (user_count < MaxLife)	
			{
				user_count++;
				return ResolveState(null);
			}
			else
			{	return ResolveState("Null");	}
			
		}
		Goto Spawn;
	}
}

Class BFGBeamLaser : TrailBeam
{
	Default 
	{
		XScale 0.075;
		YScale 0.5; //Don't touch.
		Translation "0:255=%[0,0,0]:[1,2,1]";
	}
	States
	{
	Spawn:
		"####" "#" 0 NoDelay 
		{
			user_time = 4.0;
			A_SpawnItemEx("BFGBeamLaser",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS|SXF_TRANSFERSPRITEFRAME,tid * 256,1);
			
			return A_JumpIf(GetCvar("D4D_BeamTexture"),"Process");
		}
		X202 E 0 	{	Thing_SetTranslation(0,0);	return ResolveState("Process");	}
	}
}

//==============================================================================
// ZDoom BFG Beam
Class BFGBeam : Actor 
{
	const Limit = 18.0;
	const FMin = 0.5;
	const FMax = 1.0;
	double user_xa, user_xb;
	double user_ya, user_yb;
	double user_za, user_zb;
	double user_dist;
	int user_life;
	int user_count;
	int user_minicount;
	double  user_scalar;
	Default 
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+NOTONAUTOMAP
		RenderStyle "None";
		Speed 5;
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			if (user_life >= 2 || !tracer || tracer.bKILLED)
			{	return ResolveState("Null");	}
			
			if (target)
			{
				user_life++;
				user_count = user_minicount = 0;
				user_scalar = 0;
				
				Vector3 tpos = tracer.pos;	tpos.z += tracer.height / 2.0;
				SetOrigin(tpos, false);
				A_FaceTarget(0,0,0,0,FAF_MIDDLE);
				user_dist = GetDistance(true, TargetPtr);
				return ResolveState("Beam");
			}
			return ResolveState("Null");
		}
		Stop;
	Beam:
		TNT1 A 2
		{
			if (user_count >= user_dist)
			{	return ResolveState(null);	}
			
			if (user_count < (speed * 20))
			{	user_scalar = Clamp(user_scalar + (1.0/20.0), 0.0, 1.0);	}
			if (user_count >= (user_dist - (speed * 20)))
			{	user_scalar = Clamp(user_scalar - (1.0/20.0), 0.0, 1.0);	}
			
			if (user_minicount <= 0)
			{
				user_xb = frandom(FMin,FMax) * randompick(-1,1);
				user_yb = frandom(FMin,FMax) * randompick(-1,1);
				user_zb = frandom(FMin,FMax) * randompick(-1,1);
				user_minicount = random(2,4);
			}
			else
			{
			
				user_xa += user_xb;
				user_ya += user_yb;
				user_za += user_zb;
				user_minicount--;
			}
			if (user_ya > Limit)		{	user_ya -= ((abs(user_ya) % Limit) * 2);	}
			if (user_ya < -Limit)		{	user_ya += ((abs(user_ya) % Limit) * 2);	}
			
			if (user_za > Limit)		{	user_za -= ((abs(user_za) % Limit) * 2);	}
			if (user_za < -Limit)		{	user_za += ((abs(user_za) % Limit) * 2);	}
			
			A_SpawnParticle("A7FF47",SPF_FULLBRIGHT|SPF_RELATIVE,3,16,0,
				(cos(pitch)*user_count)-(sin(pitch)*user_xa*user_scalar),
				user_ya*user_scalar,
				((sin(pitch)*user_count)+(cos(pitch)*user_za*user_scalar)),
				0,0,0,0,0,0,1.0,0.3);
				
			user_count += int(speed);
			return ResolveState("Beam");
		}
		Goto Spawn;
	}
}

// -----------------------------------------------------------------------------
// This spawns the trails.

Class BFGTrailSpawner : Actor 
{
	double scalar, s, c;
	bool skip;
	property Skip: Skip;
	Default 
	{
		BFGTrailSpawner.Skip false;
		Projectile;
		+NOINTERACTION
		+NOTONAUTOMAP
		+ROLLSPRITE
		+FORCEXYBILLBOARD
		RenderStyle "Add";
	}
	
	States
	{
	Spawn:
		BFE1 B 0 NoDelay
		{
			if (!Skip)
			{
				A_FaceMovementDirection();
				A_SpawnItemEx("BFGTrail2",cos(pitch)*10,0,-sin(pitch)*10,0,0,0,0,SXF_TRANSFERALPHA|SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERROLL);	
			}
			s = sin(roll);
			c = cos(roll);
			return ResolveState("Enact");
		}
	Enact:
		BFE1 B 1
		{
			scalar += frandom(0.005,0.01);
			A_SetScale(Scale.X - abs(s * scalar), Scale.Y - abs(c * scalar));
			if (Scale.X <= 0.0 || Scale.Y <= 0.0)
			{	return Destroy();	}
		}
		Wait;
	}
}

Class BFGTrail2 : BFGTrailSpawner
{	Default {	BFGTrailSpawner.Skip true;	}	}