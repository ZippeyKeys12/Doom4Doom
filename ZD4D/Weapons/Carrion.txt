//==============================================================================
//==============================================================================
//	Carrion Cannon
//	Base code and design by Major Cooke
//	Sprites by Neccronixis (Hellshot from DOOM)
//	Sounds from Battlezone (1 & 2) by Activision

//	No, this weapon has absolutely nothing to do with the Hellshot because
//	almost all the MP weapons are lame.
//==============================================================================
//==============================================================================

//==============================================================================
// Pickup Upgrade
// - Increases the amount of ammo collected.

// Ammo Upgrade
// - Decreases the ammo cost.

// Cell Infusion
// - Primary stunlocks attached target

// Argent Accumulator
// +1 second to flame downpour.

enum CarrionConst
{
	CarrionAmmoCostPrimary = 14,
	CarrionAmmoCostSecondary = 500,
	BuildRequirement = 666,	//Amount of carrion needed to build the weapon.
};

Class D4CarrionCannon : Doom4Weapon
{	
	Array<Actor> Enemies;
	Array<Double> EnemyDistance;
	Default 
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+DONTGIB
		+WEAPON.NOALERT
		+WEAPON.NOAUTOFIRE
		Weapon.AmmoType1 "D4Carrion";
		Weapon.AmmoGive1 200;
		Weapon.SlotNumber 1;
		Weapon.SelectionOrder 140;
		Inventory.PickupMessage "Carrion Cannon! Argent energy at your fingertips!";
		Obituary "%o was KenFunky Fried Fishstick'd by %k's Carrion Cannon.";
		Tag "Carrion Cannon";
	}
	
	action void OpeningPortals(int count, int ammoConsume)
	{
		invoker.owner.A_SetInventory("CarrionPortalsOpened",count);
		invoker.owner.A_AlertMonsters();
		invoker.owner.A_PlaySound("Doom4/Monsters/ArgentCharge",CHAN_AUTO,1,0,ATTN_NONE);
		invoker.owner.A_TakeInventory("D4Carrion",ammoConsume,TIF_NOTAKEINFINITE);
	}
	
	States
	{
	Spawn:
		WPPK O -1;
		Stop;
	Select:
		HELG H 0 
		{
			invoker.Enemies.Clear();
			invoker.EnemyDistance.Clear();
			A_SetInventory("CarrionShotOut",0);
			
			if (CountInv("D4CarrionToken") < BuildRequirement)
				A_SetInventory("D4CarrionToken",BuildRequirement);
		}
	SelLoop:
		HELG H 1 A_Raise;
		"####" "#" 0 A_Raise(WeaponSwitchSpeed);
		Loop;
	Deselect:
		HELG H 0 
		{
			invoker.Enemies.Clear();
			invoker.EnemyDistance.Clear();
			A_SetInventory("CarrionShotOut",0);
		}
	DesLoop:
		HELG H 1 A_Lower;
		"####" "#" 0 A_Lower(WeaponSwitchSpeed);
		Loop;
	Ready:
		HELG H 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER1|WRF_ALLOWUSER2);
		Loop;
	/*==========================================================================
	 Primary Fire
	 ------------
	 Shoots an argent Projectile; which seeks after the enemy the player aims
	 for, or hits one in particular that's in the way. Upon contact, attaches
	 enemy and charges up. Will detonate if carrion is depleted or player stops 
	 holding the fire button. The greater the charge, the more powerful the 
	 explosion. 
	==========================================================================*/
	Fire:
		
		HELG F 2 bright
		{
			if (!CountInv("CarrionShotOut"))
			{
				A_GunFlash("Null");
				A_AlertMonsters();
				A_SetInventory("CarrionShotOut",1);
				A_FireProjectile("CarrionPrimary",0,0,4);
				A_PlaySound("CarrionCannon/Unleash",CHAN_WEAPON,1);
			}
		}
		HELG G 2 bright;
	Hold:
		HELG AABBCCDDEE 1 bright
		{
			A_GunFlash("Null");
			
			if (!(GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) || !CountInv("CarrionShotOut"))
			{
				A_SetInventory("CarrionShotOut",0);
				return ResolveState("HoldEnd");
			}
			return ResolveState(null);
		}
		Loop;
	HoldEnd:
		HELG H 1;
		Goto Ready;
	/*==========================================================================
	 Secondary Fire
	 ------------
	 Opens argent portals and rains down argent fire pillars upon a maximum
	 of five enemies at once.
	==========================================================================*/
	AltFire:
		HELG H 1
		{
			A_SetInventory("CarrionPortalsOpened",0);
			int ammoConsume = 500 / (CountInv("CarrionUpgradeAmmo") ? 2 : 1);
			if (FindInventory("PowerInfiniteAmmo", true) || GetCvar("sv_infiniteammo") || 
				CountInv("D4Carrion") >= ammoConsume)
			{
				// Set up the arrays, make sure they're zero.
				invoker.Enemies.Clear();
				invoker.EnemyDistance.Clear();
				
				// The iterator responsible for finding the monsters. Searches
				// for visible monsters that aren't friendly, dead or already
				// alight.
				ThinkerIterator it = ThinkerIterator.Create();
				Actor mo;
				while (mo = Actor(it.Next()))
				{
					if ((!mo.bVULNERABLE && !mo.bSHOOTABLE) || mo.bFRIENDLY || 
						mo.health < 1 || mo.CountInv("CarrionBombard") || mo is "BossBrain")
						continue;
						
					if (!mo.bISMONSTER)
						continue;
										
					if (absangle(AngleTo(mo),angle) > 50)
						continue;
						
					if (!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
						continue;
					
					invoker.Enemies.Push(mo);
					invoker.EnemyDistance.Push(Distance2D(mo));
				}
				
				// We now have our list of actors -- or do we? Do nothing if not.
				if (invoker.Enemies.Size() < 1)
					return ResolveState(null);
				
				int count = 0;
				double increment = 64;
				
				// Now search through this list of actors we've accumulated and
				// afflict them appropriately from closest to farthest.
				for (double i = 0; i <= 4096; i += increment)
				{
					int size = invoker.EnemyDistance.Size();
					
					for (int j = 0; j < size; j++)
					{
						if (size <= j)
							break;
						
						Actor enemy = invoker.Enemies[j];
						
						if (enemy == null || enemy.CountInv("CarrionBombard"))
							continue;
							
						double ed = invoker.EnemyDistance[j];
						if ((ed >= i) && (ed < i + increment))
						{
							let ptl = CarrionPortal(Spawn("CarrionPortal",enemy.pos));
							if (ptl)
							{
								ptl.master = //master and target = owner. This is not a bug.
								ptl.target = invoker.Owner;
								ptl.tracer = enemy;
								enemy.A_GiveInventory("CarrionBombard");
								count++;
							}
							if (count > 4)
							{
								invoker.OpeningPortals(count, ammoConsume);
								return ResolveState(1);
							}
						}
					}
				}
				
				if (count)
				{
					invoker.OpeningPortals(count, ammoConsume);
					return ResolveState(1);
				}
			}
			else
			{
				A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
				ACS_NamedExecute("NotEnoughAmmo",0,0,0,0);
			}
			return ResolveState(null);
		}
		Goto Ready;
		HELG A 0
		{
			invoker.Enemies.Clear();
			invoker.EnemyDistance.Clear();
		}
		HELG ABCDEABCDEABCDEABCDEABCDE 2 bright A_GunFlash("Null");
		Goto Ready;
	User1:
		HELG A 2 bright
		{	
			// A_GiveInventory always gives at least one item, even if 0.
			// Make sure not to give anything if A_RadiusGive returns none given.
			// Also, yo dawg...
			// I heard you like functions in your functions.
			// So I put functions inside your functions. D'OH SNAPTARTS.
			// if (A_RadiusGive("DummyPickup",1024,RGF_CORPSES|RGF_CUBE,1))
			// {	A_GiveInventory("D4Carrion",(A_RadiusGive("CarrionAbsorbant",1024,RGF_CORPSES,1)* 30 * (CountInv("CarrionUpgradePickup") ? 2 : 1)));	}
			
			let it = ThinkerIterator.Create("Actor");
			Actor mo;
			int total = 0;
			while (mo = Actor(it.Next()))
			{
				if (Distance3D(mo) > 1024) continue;
				if (mo.bNOINTERACTION) continue;
				if (mo.bSPECIAL) continue;
				if (mo.bMISSILE) continue;
				static const Class<Actor> id[] =
				{
					"BrainStem",
					"ColonGibs",
					"DeadCacodemon",
					"DeadDoomImp",
					"DeadMarine",
					"DeadShotgunGuy",
					"DeadZombieman",
					"GibbedMarine",
					"GibbedMarineExtra",
					"Gibs",
					"SmallBloodPool"
				};
				bool CanDo = (mo.bCORPSE);
				if (!CanDo)
				{
					int size = id.Size();
					for (int i = 0; i < size; i++)
					{
						Class<Actor> t1 = mo.GetReplacee(mo.GetClass());
						CanDo = (t1 == id[i]);
						if (CanDo) break;
					}
				}
				
				if (CanDo)
				{
					mo.A_GiveInventory("CarrionAbsorbant");
					total++;
				}
			}
			if (total > 0)
				A_GiveInventory("D4Carrion", 30 * (CountInv("CarrionUpgradePickup") ? 2 : 1));
		}
		HELG BCDE 2 bright;
		Goto Ready;
	}
}

Class DummyPickup : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0;
		Stop;
	}
}

Class DummyPickup2 : CustomInventory
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			if ((abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) > 90.0) || CountInv("CarrionBombard"))
			{	return false;	}
			return true;
		}
		Stop;
	}
}

Class CarrionPortalOpener : Actor 
{
	int user_cur;
	int user_count;
	int user_dist;
	int user_olddist;
	int user_cut;
	
	Default 
	{
		Radius 16;
		Height 28;
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay 
		{
			if (tid == 666)
			{
				Thing_ChangeTID(0,0);
				A_SpawnItemEx("CarrionPortal",0,0,0,0,0,0,72*1,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,666);
				A_SpawnItemEx("CarrionPortal",0,0,0,0,0,0,72*2,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,666);
				A_SpawnItemEx("CarrionPortal",0,0,0,0,0,0,72*3,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,666);
				A_SpawnItemEx("CarrionPortal",0,0,0,0,0,0,72*4,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,666);
				A_SpawnItemEx("CarrionPortal",0,0,0,0,0,0,72*5,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,666);
				return Destroy();
			}
			user_count = 0;
			user_cut = CountInv("CarrionUpgradeAmmo",TargetPtr) ? 2 : 1;
			while (user_dist <= 4096 && user_count < 5)
			{
				user_olddist = user_dist;
				user_dist += 256;
				A_Warp(MasterPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION,"Null",0.5);
				user_cur = A_RadiusGive("CarrionPortalSpawner",user_dist,RGF_NOMASTER|RGF_MONSTERS|RGF_CUBE,1,null,"None",user_olddist,5 - user_count);
				user_count += user_cur;
			}
			if (user_count > 0)
			{	A_TakeInventory("D4Carrion",CarrionAmmoCostSecondary / user_cut,TIF_NOTAKEINFINITE,MasterPtr);	} //Will finish this tomorrow.
			A_GiveInventory("CarrionPortalsOpened",user_count,MasterPtr);
		}
		Stop;
	}
}

Class CarrionPortalSpawner : CustomInventory
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			// Needs to be in view.
			// Shootable or vulnerable.
			// Not for friends or players.
			if (CountInv("CarrionBombard") ||
				(abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) > 90.0) ||
				(!bShootable && !bVulnerable) ||
				CheckClass("PlayerPawn",DefPtr,true) ||
				bFriendly)
			{
				return false;
			}
			else
			{
				A_GiveInventory("CarrionBombard",1);
				A_SpawnItemEx("CarrionPortal",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTRACER|SXF_ORIGINATOR);
				return true;
			}
		}
		Stop;
	}
}

Class CarrionPortal : Actor 
{
	int user_count;
	int user_cut;
	int user_duration;
	int user_ptr;
	int user_spec;
	Default 
	{
		Projectile;
		+NOINTERACTION
		+MOVEWITHSECTOR
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{			
			
			if (tid == 666)
			{
				Thing_ChangeTID(0,0);
				user_spec++;
				A_RearrangePointers(DefPtr,DefPtr,TargetPtr);
				user_duration = 35*3;
			}
			else
			{
				user_cut = CountInv("CarrionUpgradeAmmo",TargetPtr) ? 2 : 1;
				user_duration = (35 * 2) + (CountInv("CarrionUpgradeTime",TargetPtr) ? 35 : 0);
			}
			
		}
		TNT1 A 1
		{
			// Move up to a maximum of MaxHeight. No further.
			// Don't adjust height
			int MaxHeight = 512.0;
			int who = (tracer) ? TracerPtr : DefPtr;
			Vector3 tpos = (tracer) ? tracer.pos : pos;
			
			if (tracer)
			{	tpos.z = (tpos.z + MaxHeight > ceilingz) ? (ceilingz - 1.0) : (tpos.z + MaxHeight);	}
			else 
			{
				if ((ceilingz - 1.0 < tpos.z) || (ceilingz - floorz < MaxHeight - 1.0))
				{	tpos.z = ceilingz - 1.0;	}
			}
			
			
			if (!user_spec)
			{	A_Warp(who,tpos.x,tpos.y,tpos.z,0,WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEPOSITION|WARPF_INTERPOLATE);		}
			else
			{	A_Warp(TracerPtr,70,0,Min((ceilingz - floorz) - 1,512),4,WARPF_NOCHECKPOSITION|WARPF_TOFLOOR|WARPF_USECALLERANGLE);	}
			
			if (user_count == 0)
			{	A_SpawnItemEx("CarrionSymbols",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);	}
			if (user_count % 2 == 0)
			{	A_SpawnItemEx("CarrionCeilingEnergy",frandom(0.0,3.0),0,0,frandom(-2.0,2.0),0,0,random(0,359),SXF_NOCHECKPOSITION);	}
			
			// Empower the other portals because one of them died before it could start.
			if (user_count < 17 && (!tracer || tracer.bKilled))
			{	
				if (CountInv("CarrionPortalsOpened",TargetPtr) == 1 && !GetCvar("sv_infiniteammo"))
				{
					A_GiveInventory("D4Carrion",CarrionAmmoCostPrimary / user_cut,TargetPtr);
				}
				if (!user_spec)	{ 	A_TakeInventory("CarrionPortalsOpened",1,0,TargetPtr);	}
				return ResolveState("Null");
			}
			
			if ((user_count >= 17) && (user_count % 3 == 0))
			{
				if (user_spec)
				{	A_SpawnItemEx("CarrionFirePillar",0,0,-4,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,(user_count == 18) ? 667 : 666);	}
				else
				{	A_SpawnItemEx("CarrionFirePillar",0,0,-4,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,(user_count == 18) ? 1 : 0);	}
			}
			
			if (user_count >= user_duration)
			{
				A_TakeInventory("CarrionBombard",32767,0,TracerPtr);
				return ResolveState("Null");
			}
			user_count++;
			return ResolveState(null);
		}
		Wait;
	}
}

Class CarrionFirePillar : Actor 
{
	int user_t;
	double user_speed;
	double user_dist;
	double user_x;
	double user_y;
	double user_z;
	int user_ptr;
	int user_count;
	Default 
	{
		Projectile;
		+NOINTERACTION
		+FORCERADIUSDMG
		+NODAMAGETHRUST
		+SEEKERMISSILE
		+EXTREMEDEATH
		Speed 50;
		Radius 1;
		Height 1;
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			if (tid)
			{
				user_t = tid;
				Thing_ChangeTID(0,0);
			}
			user_dist = GetDistance(true,TracerPtr);
			user_speed = (user_dist >= 1536) ? (user_dist / 17.5) : speed;
			//user_speed = 50;
			A_ChangeVelocity(z: -user_speed, flags: CVF_REPLACE); //Velocities default to 0
		}
		TNT1 A 1
		{
			user_z = pos.z;
			// Preserve the Z at all times.
			
			//A_Warp(DefPtr,0,0,(pos.z - floorz),0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_TOFLOOR);
			
			user_count = int(user_speed / 8.0);
			if (!A_CheckRange(2048,"Null",true) && abs(GetAngle(GAF_SWITCH|GAF_RELATIVE,Player1) <= 90.0))
			{
				while (user_count > 0)
				{
					A_SpawnItemEx("CarrionFlameFast",
						frandom(0.0,4.0),0,frandom(0.0,user_z - pos.z),
						frandom(0.0, 2.0),0,frandom(-4.0,4.0),random(0,359),SXF_NOCHECKPOSITION,GetCvar("HQEffectsWeapons")==1 ? 128 : 240);
					user_count--;
				}
			}
			else
			{
				A_SpawnItemEx("CarrionFlameFast",
						frandom(0.0,4.0),0,frandom(0.0,user_z - pos.z),
						frandom(0.0, 2.0),0,frandom(-4.0,4.0),random(0,359),SXF_NOCHECKPOSITION,GetCvar("HQEffectsWeapons")==1 ? 64 : 215);
			}
			
			// This will never miss.
			if (A_JumpIfHigherOrLower("Death",null,0,0,false,TracerPtr) && user_t <= 1)
			{	
				A_Warp(TracerPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_STOP);	
				return ResolveState("Death");
			}
			else if (pos.z <= floorz)
			{
				A_Warp(DefPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_TOFLOOR|WARPF_STOP);	
				return ResolveState("Death");
			}
			return ResolveState(null);
		}
		Wait;
	Death:
		TNT1 A 0
		{
			if (user_t >= 666)
			{
				bOldRadiusDmg = true;
				A_Explode(125,128,0,0,64);
			}
			else
			{
				A_Explode(125 / Clamp(CountInv("CarrionPortalsOpened",TargetPtr),1,5),96,0,0,48);
			}
			user_count = 25;
			
			if (!A_CheckSight("Null"))
			{
				while (user_count > 0)
				{
					A_SpawnItemEx("CarrionBlastSmall",frandom(30.0,60.0),0,10,frandom(0.0,5.0),0,0,random(0,359),SXF_NOCHECKPOSITION,200);
					A_SpawnItemEx("CarrionFlameFast",frandom(0.0,10.0),0,frandom(0.0,60.0),frandom(0.0,8.0),0,frandom(0.0,3.0),random(0,359),SXF_NOCHECKPOSITION,195);
					user_count--;
				}
			}
			else
			{
				A_SpawnItemEx("CarrionBlastSmall",frandom(30.0,50.0),0,10,0,0,0,random(0,359),SXF_NOCHECKPOSITION, GetCvar("HQEffectsWeapons")==1? 128 : 235);
				A_SpawnItemEx("CarrionFlameFast",frandom(0.0,10.0),0,frandom(0.0,60.0),frandom(0.0,8.0),0,frandom(0.0,3.0),random(0,359),SXF_NOCHECKPOSITION,GetCvar("HQEffectsWeapons")==1? 128 : 235);
			}
			
			if (user_t == 1 || user_t == 667)
			{	
				A_SpawnItemEx("CarrionBlastBack",0,0,15,0,0,0,0,SXF_NOCHECKPOSITION);
				A_PlaySound("CarrionCannon/Burning",5,1,1);
				return ResolveState(1);
			}
			return ResolveState("Null");
		}
		Wait;
		TNT1 A 55
		{
			if (CountInv("CarrionUpgradeTime",TargetPtr) || user_t >= 666)
			{
				A_SetTics(55+35);
			}
		}
		TNT1 A 35 
		{
			A_SetInventory("CarrionBombard",0,TracerPtr);
			A_PlaySound("CarrionCannon/BurnEnd",5,1,0);
		}
		Stop;
	}
}

Class CarrionBombard : Inventory {}

Class CarrionSymbols : Actor 
{
	const RollAmount = 8.0;
	const ScaleMul = 0.75;
	double  user_c;
	double  user_roll;
	int user_t;
	int user_rng;
	double user_dist;
	double user_cos;
	int user_floor;
	int user_duration;
	
	Default 
	{
		+NOINTERACTION
		+BRIGHT
		+FLATSPRITE
		+ROLLSPRITE
		RenderStyle "Add";
		Radius 32;
		Alpha 0;
		Scale 0;
		//Translation "0:255=%[0,0,0]:[1.0,0.0,0.2]"
	}
	States
	{
	Spawn:
		RUNE C 0 NoDelay
		{
			user_duration = CountInv("CarrionUpgradeTime",TargetPtr) ? 35 : 0;
			user_roll = RollAmount * randompick(-1,1);
		}
	Looping:
		"####" "#" 1
		{
			A_Warp(MasterPtr,0,0,-1,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			if (user_c >= 90.0)
			{	return ResolveState(1);	}
			user_c += (90.0/12.0);
			A_SetRoll((roll + RollAmount) % 360,SPF_INTERPOLATE);
			A_FadeTo(0.99,(1.0/12.0),FTF_CLAMP);
			A_SetScale(sin(user_c) * ScaleMul);
			return ResolveState(null);
		}
		Loop;
	Shrink:
		"####" "#" 1
		{	
			A_Warp(MasterPtr,0,0,-1,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			if (user_t < (80 + user_duration) )
			{	user_t++;	}
			else
			{
				user_c += (90.0/12.0);
				A_SetScale(sin(user_c) * ScaleMul);
				if (Scale.X <= 0)	{	return ResolveState("Null");	}
			}
			
			A_SetRoll((roll + RollAmount) % 360,SPF_INTERPOLATE);
			return ResolveState(null);
		}
		Loop;
	}
}

Class CarrionCeilingEnergy : Actor 
{
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+ROLLSPRITE
		+FLATSPRITE
		+BRIGHT
		RenderStyle "Add";
		Scale 0.45;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SpawnItemEx("CCETurner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);
			angle += random(0,359);
			A_SetScale((Scale.X+frandom(0.0,0.2))*randompick(-1,1));
			Scale.Y = (Scale.X*randompick(-1,1));
			
			return A_Jump(256,"S1","S2","S3");
		}
	S1:
		X003 BCD 1 A_SetTics(random(2,4));
		X003 EFGH 1 A_SetTics(random(2,5));
		X003 IJKLMN 1 A_SetTics(random(2,4));
		X003 OPQR 1 A_SetTics(random(1,3));
		X003 STUVWXYZ 1 A_SetTics(random(1,2));
		Stop;
	S2:
		X004 ABC 1 A_SetTics(random(1,3));
		X004 DEFG 1 A_SetTics(random(2,4));
		X004 HIJK 1 A_SetTics(random(2,3));
		X004 LMNOPQ 1 A_SetTics(random(1,3));
		Stop;
	S3:
		FX58 ABC 1 A_SetTics(random(1,3));
		"####" DEFG 1 A_SetTics(random(3,5));
		"####" HIJ 1 A_SetTics(random(2,4));
		"####" KLM 1 A_SetTics(random(2,3));
		"####" NOPQ 1 A_SetTics(random(1,2));
		Stop;
	}
}

Class CCETurner : Actor 
{
	double user_a;
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { user_a = frandom(-5.0, 5.0);	}
		TNT1 A 1
		{
			if (!IsPointerEqual(MasterPtr,NullPtr))
			{
				A_SetRoll(roll + user_a);
				A_SetRoll(roll,SPF_INTERPOLATE,MasterPtr);
				return ResolveState(null);
			}
			return ResolveState("Null");
		}
		Wait;
	}
}

Class CarrionFlameFast : Actor 
{
	const ScaleDown = 0.975;
	const VelUpMin = 0.1;
	const VelUpMax = 0.3;
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+BRIGHT
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[2.0, 0.75, 0]";
		Scale 0.45;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			Scale.X *= randompick(-1,1);
			return A_Jump(256,"S1","S2","S3","S4","S5");
		}
	S1:
		X052 ABCDEFGHIJKLMNOPQRS 1
		{
			vel.xy *= ScaleDown;
			vel.z += frandom(VelUpMin,VelUpMax);
		}
		Stop;
	S2:
		X053 ABCDEFGHIJKLMNOPQRSTU 1
		{
			vel.xy *= ScaleDown;
			vel.z += frandom(VelUpMin,VelUpMax);
		}
		Stop;
	S3:
		X054 ABCDEFGHIJKLMNOPQRS 1
		{
			vel.xy *= ScaleDown;
			vel.z += frandom(VelUpMin,VelUpMax);
		}
		Stop;
	S4:
		X055 ABCDEFGHIJKLMNOPQRS 1
		{
			vel.xy *= ScaleDown;
			vel.z += frandom(VelUpMin,VelUpMax);
		}
		Stop;
	S5:
		X056 ABCDEFGHIJKLMNOPQR 1 bright
		{
			vel.xy *= ScaleDown;
			vel.z += frandom(VelUpMin,VelUpMax);
		}
		Stop;
	}
}
Class CarrionBlastBack : Actor 
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[2.0,0.75,0]";
		+NOINTERACTION
		+NOTONAUTOMAP
		+ROLLSPRITE
		+BRIGHT
		RenderStyle "Add";
		Scale 1.25;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SpawnItemEx("CCETurner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);
			angle += random(0,359);
			A_SetScale((Scale.X+frandom(0.0,0.2))*randompick(-1,1));
			Scale.Y = (Scale.X*randompick(-1,1));
			
			return A_Jump(256,"S1","S2","S3");
		}
	S1:
		X003 BCD 1 A_SetTics(random(2,4));
		X003 EFGH 1 A_SetTics(random(2,5));
		X003 IJKLMN 1 A_SetTics( random(2,4));
		X003 OPQR 1 A_SetTics(random(1,3));
		X003 STUVWXYZ 1 A_SetTics(random(1,2));
		Stop;
	S2:
		X004 ABC 1 A_SetTics(random(1,3));
		X004 DEFG 1 A_SetTics(random(2,4));
		X004 HIJK 1 A_SetTics(random(2,3));
		X004 LMNOPQ 1 A_SetTics(random(1,3));
		Stop;
	S3:
		FX58 ABC 1 A_SetTics(random(1,3));
		"####" DEFG 1 A_SetTics(random(3,5));
		"####" HIJ 1 A_SetTics(random(2,4));
		"####" KLM 1 A_SetTics(random(2,3));
		"####" NOPQ 1 A_SetTics(random(1,2));
		Stop;
	}
}
Class CarrionBlastSmall : Actor 
{
	double  user_roll;
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+ROLLSPRITE
		+ROLLCENTER
		+BRIGHT
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[2.0, 0.75, 0]";
		Scale 0.25;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			roll = frandom(0.0,359.0);
			user_roll = frandom(3.0,8.0);
			A_SetScale((Scale.X+frandom(0.0,0.2))*randompick(-1,1));
			Scale.Y = (Scale.X*randompick(-1,1));
			
			return A_Jump(256,"S1","S2","S3");
		}
	S1:
		X003 BCDEFGHIJKLMNOPQRSTUVWXYZ 1
		{	A_SetRoll(roll + user_roll, SPF_INTERPOLATE);	}
		Stop;
	S2:
		X004 ABCDEFGHIJKLMNOPQ 1
		{	A_SetRoll(roll + user_roll, SPF_INTERPOLATE);	}
		Stop;
	S3:
		FX58 ABCDEFGHIJKLMNOPQ 1
		{	A_SetRoll(roll + user_roll, SPF_INTERPOLATE);	}
		Stop;
	}
}

Class CarrionPortalsOpened : Inventory
{ Default {	Inventory.MaxAmount 5;	Inventory.InterhubAmount 0;	}}

//==============================================================================
//==============================================================================
Class CarrionPrimary : FastProjectile
{
	enum CarrionPrimary
	{
		MaxTime = 70,
		MaxDamage = 5000,
		MaxAmmo = 5000,
		MaxLevel = 10,
	};
	const SizeMul = 0.4;
	int user_neg;
	int user_stoff;
	int user_maxcharge;
	int user_charge;
	int user_hasammo;
	int user_level;
	int user_count;
	double user_sizex;
	double user_sizey;
	double user_sin;
	double user_dmg;
	int user_cut;
	
	Default 
	{
		Projectile;
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEYBILLBOARD
		+HITTRACER
		+FORCERADIUSDMG
		+FORCEPAIN
		+SEEKERMISSILE
		+SCREENSEEKER
		+SKYEXPLODE
		+EXPLODEONWATER
		+DONTREFLECT
		+EXTREMEDEATH
		+THRUACTORS
		Speed 60;
		Radius 4;
		Height 4;
		Damage 0;
		RenderStyle "Add";
		Xscale 0.3;
		Yscale 0.8;
		Translation "0:255=%[0,0,0]:[1.0,0.45,0.0]";
		MissileType "CarrionPrimaryTrailSpawner";
		MissileHeight 8;
	}
	States
	{
	Spawn:
		X016 A 0 NoDelay 
		{
			A_RearrangePointers(DefPtr,TargetPtr,DefPtr,4);
			A_SpawnItemEx("CarrionShotTrackingLaser",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTRACER|SXF_ORIGINATOR);
		}
	Moving:
		X016 ABCDEFGHIJKLMNOPQRSTUVWXY 1 Bright
		{
			// If not actively holding primary fire
			// or player died / goes out of sight,
			// kill the Projectile.
			if (!target || !target.CountInv("CarrionShotOut") || target.health < 1)
			{	
				bNOINTERACTION = true;
				A_Stop();
				return ResolveState("Death");	
			}
			
			if (!tracer || tracer.health < 0)
			{	
				bBOUNCEONFLOORS = false;
				bBOUNCEONCEILINGS = false;
				bThruActors = true;
			}
			else
			{	
				bBOUNCEONFLOORS = true;
				bBOUNCEONCEILINGS = true;
				bTHRUACTORS = false;
			}
			
			A_SeekerMissile(90,90,SMF_LOOK|SMF_PRECISE,256);
			A_FaceTracer();
			// Seeker missiles set those they're after as tracer.
			// If the enemy dies before it can make contact, unsolidify itself
			// so it passes through non-shootable materials.
			
			
			return ResolveState(null);
		}
		Loop;
	Crash:
	XDeath:
		X016 ABCDEFGHIJKLMNOPQRSTUVWXY 1 Bright
		{
			// See https://zdoom.org/Changelog/a210aaea3/files for details.
			let targ = target;
			let trac = tracer;
			if (targ && trac && targ.health > 0 && trac.health > 0)
			{
				if (targ.CountInv("CarrionUpgradeStun") && user_charge % 7 == 0)
				{	
					bCausePain = true;
					bForcePain = true;
					// Just to prevent it from dying. It's only meant to 'stun'.
					if (trac.health > 0 && !trac.bDORMANT) 
					{
						trac.health += 1;
						trac.DamageMobj(self, targ, 1, DamageType, 
							DMG_FOILINVUL | DMG_NO_ARMOR | DMG_NO_FACTOR | DMG_NO_PROTECT | DMG_THRUSTLESS);
						//A_DamageTracer(1,"None",DMSS_NOFACTOR,null,"None",TargetPtr);
						
					}
					
				}
				if (user_charge < MaxTime &&
					targ.CountInv("CarrionShotOut") &&
					//(GetPlayerInput(MODINPUT_BUTTONS,TargetPtr) & (BT_ATTACK)) &&
					trac.health > 0 && trac.bShootable)
				{
					user_cut = CountInv("CarrionUpgradeAmmo",TargetPtr) ? 2 : 1;
					
					bool infammo = GetCVar("sv_infiniteammo");
					if (!infammo)
						infammo = (targ.FindInventory("PowerInfiniteAmmo",true) != null);
					
					if (infammo || CountInv("D4Carrion",TargetPtr) >= CarrionAmmoCostPrimary / user_cut)
					{
						if (!user_charge)
						{
							user_sizex = Scale.X;
							user_sizey = Scale.Y;
							user_neg = randompick(-1,1);
							A_PlaySound("Doom4/Monsters/ArgentCharge",CHAN_AUTO,1,0,ATTN_NONE);
						}
						A_SetRoll(roll + (360.0/14.0) * user_neg,SPF_INTERPOLATE);
						A_SetScale(user_sizex + (sin(user_sin) * SizeMul), user_sizey + (sin(user_sin) * SizeMul));
						user_sin += (90.0/70.0);
						A_Warp(TracerPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE,"Null",0.5);
						user_charge += 1;
						targ.A_GiveInventory("CarrionTick",1);
						targ.A_TakeInventory("D4Carrion",CarrionAmmoCostPrimary / user_cut,TIF_NOTAKEINFINITE);
						return ResolveState(null);
					}
				}
			}
			return ResolveState("Death");
		}
		Loop;
	Death:
		TNT1 A 10
		{
			if (user_charge)
			{
				A_GiveInventory("CarrionTick",user_charge,TargetPtr);
				A_GiveInventory("CarrionShootSound",1,TargetPtr);
				A_GiveInventory("KillLaser");
				if (user_charge <= (70/3))
				{	A_PlaySound("CarrionCannon/ExplosionSmall",CHAN_AUTO);	}
				else if (user_charge <= (70/3)*2)
				{	A_PlaySound("CarrionCannon/ExplosionMedium",CHAN_AUTO);	}
				else
				{	A_PlaySound("CarrionCannon/ExplosionBig",CHAN_AUTO);	}
				A_SpawnItemEx("CarrionShockwave",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				user_dmg = user_charge * (MaxDamage / 70.0);
				
				// Thrust away from the player.
				A_FaceTarget(0,0,0,0,FAF_MIDDLE);
				A_Warp(DefPtr,cos(pitch),0,-sin(pitch),0,WARPF_NOCHECKPOSITION);
				
				// Then explode.
				A_Explode(int(user_dmg), 128 + (2 * user_charge),0,0,128 + (2 * user_charge));
				A_SpawnItemEx("D4RocketExplosion",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				
				if (user_charge >= 50)
				{
					let boom = CarrionExplosion(Spawn("CarrionExplosion",pos));
					if (boom && user_charge >= MaxTime)
					{
						boom.ExplosionSize = 5;
					}
				}
			}	
			else A_GiveInventory("NoLaser");
			
			if (target)	target.A_SetInventory("CarrionShotOut",0);
			
		}
		Stop;
	}
}

Class CarrionPrimaryTrailSpawner : Actor //dummy to spawn muliple trails through fastprojectile's method
{
	Default 
	{
		+NOINTERACTION
		Translation "0:255=%[0,0,0]:[1,0.25,0]";
	}
	States
	{
	Spawn:
		TNT1 A 3 NODELAY
		{
			A_SpawnItemEx("SummonerTrail",-2,0,random(0,10),0,0,frandom(0.5,3),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
			A_SpawnItemEx("SummonerTrail",-2,0,random(0,-10),0,0,frandom(-0.5,-3),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
		}
		Stop;
	}
}
Class CarrionTick : Inventory
{	Default { Inventory.MaxAmount 70;	Inventory.InterhubAmount 0;	}}

Class CarrionShootSound : CustomInventory
{
	const MaxAmt = 70;
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
				 if (CountInv("CarrionTick") >= MaxAmt)			{	A_PlaySound("CarrionCannon/Shoot7",CHAN_WEAPON,1);	}
			else if (CountInv("CarrionTick") >= (MaxAmt/4)*3)	{	A_PlaySound("CarrionCannon/Shoot6",CHAN_WEAPON,1);	}
			else if (CountInv("CarrionTick") >= (MaxAmt/4)*2)	{	A_PlaySound("CarrionCannon/Shoot5",CHAN_WEAPON,1);	}
			else if (CountInv("CarrionTick") >= (MaxAmt/4)*1)	{	A_PlaySound("CarrionCannon/Shoot4",CHAN_WEAPON,1);	}
			else 												{	A_PlaySound("CarrionCannon/Shoot3",CHAN_WEAPON,1);	}
			A_SetInventory("CarrionTick",0);
		}
		Stop;
	}
}

//==============================================================================
// Effects
//==============================================================================

Class CarrionExplosion : Actor
{
	int ExplosionSize;
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+BRIGHT
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[2.0,1.0,0.0]";
		Alpha 0.0;
		Scale 1;
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		X119 A 1
		{
			Vector3 move = (0,0,-24);
			A_FadeIn(0.33);
			if (ExplosionSize > 4)
			{
				move = (0,0,-48);
				A_SetScale(1.5);
				A_PlaySound("Doom4/Other/DollExplode",CHAN_AUTO,1);
			}
			SetOrigin(pos + move, false);
		}
		X119 BCDEFGHIJKLMNOPQRSTUVWXYZ 1
		{
			if (alpha < 0.99)
				A_FadeIn(0.33, FTF_CLAMP);
		}
		X120 ABCDEFGHIJKLMNO 1;
		X120 PQRSTUVW 1 A_FadeOut(1.0/8.0);
		Stop;
	}
}

Class CarrionShotTrackingLaser : Actor 
{
	enum CarrionShotTrackingLaser
	{
		MaxDistance = 2048,	// Maximum distance of the effect
		AngleRandom = 7,	// The boundaries of angle changing (random(-AngleRandom,AngleRandom))
		PitchRandom = 7,	// ^ for pitch
		ChokeMin = 1,		// How sooner or later the beam needs to correct itself to
		ChokeMax = 5,		// 	"stay on target".
	};
	const StepDistance = 31;
	const StepDistHalf = StepDistance / 2.0;
	double user_pitch;
	double user_angle;
	double user_dista, user_distb;
	double user_x;
	double user_y;
	double user_z;
	double user_angdiff;
	double user_stepdiv;
	//[0] = Current distance travelled
	//[1] = How much further to go
	int user_choke;
	int user_t;
	int user_count;
	int user_render;
	PlayerPawn plr;
	Default 
	{
		+NOCLIP
		+NOINTERACTION
		+NOBLOCKMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			// The angle and pitch won't change so go ahead and save it now.
			user_pitch = pitch;
			user_angle = angle;
			user_distb = Min(MaxDistance, GetDistance(true,TracerPtr));
			user_choke = random(ChokeMin, ChokeMax);
			user_x = pos.x;
			user_y = pos.y;
			user_z = pos.z;
			user_render = int(GetCvar("vid_renderer"));
			if (master) 
			{
				plr = PlayerPawn(master);
			}
		}
		TNT1 A 1
		{
			if (!tracer || tracer.CountInv("NoLaser"))
			{	return ResolveState("Null");	}
			
			if (master) { pitch = master.pitch; }
			
			
			
			A_Warp(MasterPtr,0,7.5,0,0,WARPF_NOCHECKPOSITION|WARPF_STOP,"Null",0.6 + sin(pitch) * 0.2, -0.6 + cos(pitch) * 0.4);
			user_count = 0;
			user_angdiff = abs(GetAngle(GAF_RELATIVE,TracerPtr));
			
			if (GetDistance(true,TracerPtr) < StepDistance * 1.5)
			{	return ResolveState(null);	}
			
			// user_dista = distance currently travelled.
			// user_distb = maximum distance.
			while ((user_count < 15) && (GetDistance(false,TracerPtr) > StepDistance * 1.5))
			{
				
				if (A_CheckSight("Null"))
				{	break;	}
				A_FaceTracer(8, 8, 
					frandom(-AngleRandom, AngleRandom), frandom(-PitchRandom, PitchRandom), FAF_MIDDLE);
				
				// Spawn the beam with the same angle and pitch. Note that the
				// beam is being centered so we have to take that into account
				// and spawn it FORWARD based on half the beam's length.
				// Then move forward by a beam's length and repeat until done.
				
				
				if (user_render)
				{	
					if (CountInv("KillLaser",TracerPtr))
					{	A_SpawnItemEx("CarrionTrailBeamMovingBoom",cos(pitch) * StepDistHalf,0,-sin(pitch) * StepDistHalf,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERPOINTERS);	}
					else
					{	A_SpawnItemEx("CarrionTrailBeamMoving",cos(pitch) * StepDistHalf,0,-sin(pitch) * StepDistHalf,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERPOINTERS);	}
				}
				else
				{
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * (StepDistHalf * (1 / 6)), 0, -sin(pitch) * (StepDistHalf * (1 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * (StepDistHalf * (2 / 6)), 0, -sin(pitch) * (StepDistHalf * (2 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * (StepDistHalf * (3 / 6)), 0, -sin(pitch) * (StepDistHalf * (3 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * (StepDistHalf * (4 / 6)), 0, -sin(pitch) * (StepDistHalf * (4 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * (StepDistHalf * (5 / 6)), 0, -sin(pitch) * (StepDistHalf * (5 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) * StepDistHalf	 		, 0, -sin(pitch) * (StepDistHalf			 ));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-(StepDistHalf * (1 / 6)), 0, -sin(pitch) *-(StepDistHalf * (1 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-(StepDistHalf * (2 / 6)), 0, -sin(pitch) *-(StepDistHalf * (2 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-(StepDistHalf * (3 / 6)), 0, -sin(pitch) *-(StepDistHalf * (3 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-(StepDistHalf * (4 / 6)), 0, -sin(pitch) *-(StepDistHalf * (4 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-(StepDistHalf * (5 / 6)), 0, -sin(pitch) *-(StepDistHalf * (5 / 6)));
					A_SpawnParticle("FF2846",SPF_FULLBRIGHT|SPF_RELATIVE,2,10,0,cos(pitch) *-StepDistHalf			, 0, -sin(pitch) *-(StepDistHalf			 ));
				}
				
				A_Warp(DefPtr,cos(pitch) * StepDistance,0,-sin(pitch) * StepDistance,0,WARPF_NOCHECKPOSITION);
				user_dista += StepDistance;
				user_count = (user_count + 1) % 8;
			}
			
			if (tracer)
			{
				user_count = 0;
				user_dista = 0;
				return ResolveState(null);
			}
			return ResolveState("Null");
		}
		Wait;
	}
}

Class CarrionTrailBeamMoving : MovingTrailBeam
{
	States
	{
	Spawn:
		X202 I 0 NoDelay 
		{
			user_zoffset = 0;
			user_time = 3.0;
			A_SpawnItemEx("CarrionTrailBeamMoving",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS,tid * 256,1);
			return ResolveState("Process");
		}
	}
}

Class CarrionTrailBeamMovingBoom : MovingTrailBeam
{
	Default 
	{
		RenderStyle "Add";
	}
	
	States
	{
	Spawn:
		X202 J 0 NoDelay 
		{
			user_zoffset = 0;
			user_time = 3.0;
			A_SpawnItemEx("CarrionTrailBeamMovingBoom",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS,tid * 256,1);
			return ResolveState("Process");
		}
	}
}

Class CarrionShockwave : Actor 
{
	Default 
	{
		+NOINTERACTION
		+FLATSPRITE
		+ROLLCENTER
		+BRIGHT
		RenderStyle "Add";
		Scale 0.25;
	}
	
	States
	{
	Spawn:
		X072 L 1 NoDelay
		{
			angle = random(0,359);
		}
		X072 L 1
		{
			A_SetScale(Scale.X + 0.2);
			A_FadeOut(0.05);
			A_SetAngle(angle + 10, SPF_INTERPOLATE);
		}
		Wait;
	}
}

//==============================================================================
// Absorption
//==============================================================================

Class CarrionAbsorbant : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	
	States
	{
	Pickup:
		TNT1 A 0
		{
			//Do not remove things with specials assigned. Wait; until they trigger first.
			if (special)	{	return false;	}
			A_SpawnItemEx("CorpseFader",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERSPRITEFRAME);
			A_Remove(DefPtr,RMVF_EVERYTHING);
			return true;
		}
		Stop;
	}
}

Class CorpseFader : Actor 
{
	Default 
	{
		+NOINTERACTION
		+BRIGHT
		RenderStyle "Stencil";
		StencilColor "Red";
	}
	States
	{
	Spawn:
		"----" A 1 
		{
			A_FadeOut(0.05);
		}
		Wait;
	}
}

Class CarrionShotOut : Inventory { Default { Inventory.InterhubAmount 0; }}
Class CarrionLevel : Inventory { Default { +INVENTORY.UNDROPPABLE Inventory.InterhubAmount 10; }}
Class NoLaser : Inventory { Default { Inventory.InterhubAmount 0; }}
Class KillLaser : Inventory { Default { Inventory.InterhubAmount 0; }}