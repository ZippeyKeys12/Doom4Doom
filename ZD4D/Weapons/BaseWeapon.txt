//==============================================================================
//==============================================================================
//
//		Base weapon for all D4D 
//
//==============================================================================
//==============================================================================
Class Doom4Weapon : Weapon
{
	const GrenadeOverlay = 50;
	const GrenadePrimer = 51;
	const PunchOverlay = 52;
	const PunchSway = 53;
	
	Inventory Modules[2];
	Inventory ActiveMod;
	
	Default 
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Weapon.BobStyle "Alpha";
		Weapon.BobSpeed 2.0;
		Weapon.BobRangeX 0.7;
		Weapon.BobRangeY 0.5;
		Inventory.PickupSound "Doom4/Other/WeaponPickup";
		Weapon.UpSound "Doom4/Weapons/WeaponSwitch";
		Inventory.RespawnTics 175;
		Tag "REPLACE ME YOU IDIOT!";
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	Pickup:
		TNT1 A 0 ACS_NamedExecuteAlways("UpdateWeaponList",0,0,0,0);
		Stop;
	Reload:	//since there's no reload, we used this key to throw grenades
		"####" "#" 1
		{
			if(countinv("FragGrenadeSelected")|| countinv("SyphonGrenadeSelected")|| countinv("MarineHoloSelected"))
			{
				return ResolveState("ThrowGrenade");
			}
			else
			{
				if (GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_RELOAD)
				{	return ResolveState(null);	}
			
				ACS_NamedExecute("GrenadeUnavailPrint",0,4); //print "No grenade available"
				A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
			}
			return ResolveState(null);
		}
		"####" "#" 0 { return ResolveState("Ready"); }	//goes back to ready
		
	ThrowGrenade:
		"####" "#" 1
		{
			// Prevent message spam.
			if (GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_RELOAD)
			{	return ResolveState(null);	}
			if (CountInv("GrenadeCooldown"))
			{	
				ACS_NamedExecute("GrenadeUnavailPrint",0,5); //print "grenade not ready"
				A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
				return ResolveState(null);
			}
			A_GiveInventory("BusyToken");
			return ResolveState("GrenadeReady");
		}
		"####" "#" 0 { return ResolveState("Ready"); }
		
	GrenadeReady:
		"####" "###" 1 A_WeaponOffset(11,16,WOF_ADD);	//lowers weapon
		"####" "#" 2;
		"####" "#" 15 A_Overlay(GrenadeOverlay,"Overlay.GrenadeToss");	//calls the throwing hand 
		"####" "###" 1 A_WeaponOffset(-11,-16,WOF_ADD);
		"####" "#" 0 { A_TakeInventory("BusyToken",32767); return ResolveState("Ready"); }
		
	Overlay.GrenadeToss:
		D4GR A 0 
		{
			if (CountInv("FragGrenadeSelected")>=1)
			{
				A_PlaySound("Doom4/Weapon/Grenade/ThrowGren",5);
				A_FireProjectile("D4FragGrenade",0,0,-8,6);
			}
			
			else if (CountInv("SyphonGrenadeSelected")>=1)
			{
				A_PlaySound("Doom4/Weapon/Grenade/ThrowGren",5);
				A_FireProjectile("D4SyphonGrenade",0,0,-8,6);
			}
			
			else if (CountInv("MarineHoloSelected")>=1)
			{
				A_PlaySound("Doom4/Weapon/Grenade/SpawnHolo",5);
				//A_FireProjectile("D4HoloSpawner",0,0,0,0);
				A_SpawnItemEx("D4PlayerHolograph",40,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
			A_GiveInventory("GrenadeCooldown",50);
		}
		D4GR A 0 A_OverlayFlags(GrenadeOverlay,PSPF_ADDWEAPON,0);
		D4GR A 0 A_OverlayOffset(GrenadeOverlay,0,0);
		D4GR AAA 1 A_OverlayOffset(GrenadeOverlay,20,10,WOF_ADD);
		D4GR BBB 1 A_OverlayOffset(GrenadeOverlay,20,10,WOF_ADD);
		Stop;
		
	//--------------------------------------------------------------
	//	Quick melee / Glory kill
	//--------------------------------------------------------------
	User2:
		"####" "#" 0 //before it does the regular punch, it checks if the Monster; is ready to be GK'd and if GK is ON
		{
			A_GiveInventory("BusyToken");
			
			if(countinv("FinisherToken",AAPTR_PLAYER_GETTARGET)>=1 && GetCvar("D4D_ExecutionAnimation")==1 && A_CheckLOF("Null",CLOFF_SETTARGET|CLOFF_NOAIM_VERT|CLOFF_IGNOREGHOST|CLOFF_MUSTBESOLID ,100))
			{ return ResolveState("ExecuteExecutions");	}

			return ResolveState(null);
		}
		
		"####" "##" 1 A_WeaponOffset(16,24,WOF_ADD);	//lowers weapon	
		"####" "#" 15 A_Overlay(PunchOverlay,"Overlay.Puncher");	//calls the punching hand
		"####" "###" 1 A_WeaponOffset(-11,-16,WOF_ADD);
		"####" "#" 0 
		{ 
			A_TakeInventory("BusyToken",32767);
			return ResolveState("Ready"); 
		}
		
	Overlay.Puncher:
		MELE A 0 
		{
			A_OverlayFlags(PunchOverlay,PSPF_ADDWEAPON,0);
		}
		MELE F 1 A_OverlayOffset(PunchOverlay,0,40);
		"####" "#" 0 A_Overlay(PunchSway,"Overlay.PunchSwayEffect");	//calls the punching swaying
		MELE F 4 
		{
			A_OverlayOffset(PunchOverlay,10,32);
			
			if(countinv("FinisherToken",AAPTR_PLAYER_GETTARGET)>=1)
			{
				A_CustomPunch(999999,1,0,"MeleePunchPuff",80,0,0,null,"Doom4/Weapon/Melee/Punch","Doom4/Other/MeleeSwing1");
			}
			else
			{	//if you have berserk, the quick melee will increase damage, but not as strong as the "fist weapon". This is to encourage to use the fist
				A_CustomPunch(countinv("PowerStrength")? random(50,100) : random(15,35),1,0,"FistPuff",80,0,0,null,"Doom4/Weapon/Melee/Punch","Doom4/Other/MeleeSwing1");
			}
		}
		MELE F 1 A_OverlayOffset(PunchOverlay,0,36);
		MELE F 1 A_OverlayOffset(PunchOverlay,-2,40);
		
		MELE E 1 A_OverlayOffset(PunchOverlay,-3,42);
		MELE E 1 A_OverlayOffset(PunchOverlay,-6,45);
		MELE E 1 A_OverlayOffset(PunchOverlay,-8,48);
		
		MELE D 1 A_OverlayOffset(PunchOverlay,-10,44);
		MELE D 1 A_OverlayOffset(PunchOverlay,-12,47);
		MELE D 1 A_OverlayOffset(PunchOverlay,-15,50) ;
		Stop;
	Overlay.PunchSwayEffect:
		W666 A 1 {  A_SetAngle(angle-1); A_SetRoll(-1.25,SPF_INTERPOLATE); A_SetPitch(pitch-0.5); }
		W666 A 1 {  A_SetAngle(angle-1); A_SetRoll(-2.5,SPF_INTERPOLATE); A_SetPitch(pitch-0.5); }
		W666 A 1 ;
		W666 A 1 ;
		W666 A 1 { A_SetAngle(angle+1); A_SetRoll(-1.5,SPF_INTERPOLATE); A_SetPitch(pitch+0.5); }
		W666 A 1 { A_SetAngle(angle+0.5); A_SetRoll(-0.75,SPF_INTERPOLATE); A_SetPitch(pitch+0.5); }
		W666 A 1 { A_SetAngle(angle+0.5); A_SetRoll(0,SPF_INTERPOLATE); }
		Stop;
	
	
		
	ExecuteExecutions:	//purposefully/purposely silly name
		"####" "##" 0 A_WeaponOffset(21,60,WOF_ADD);	//lowers weapon
		"####" "#" 1 A_CustomPunch(10000,1,0,"GloryKillPuff",150,0,0,null); //actually kills the Monster; without gibbing it
		"####" "#" 35 A_Overlay(PunchOverlay,"Overlay.Finisher");	//calls the animation
		"####" "###" 1 A_WeaponOffset(-7,-40,WOF_ADD);
		"####" "#" 0 
		{ 
			A_TakeInventory("BusyToken",32767);
			return ResolveState("Ready"); 
		}
	Overlay.Finisher:
		MELE A 0 A_Jump(256,"Finisher1","Finisher2","Finisher3");
		Goto Finisher2;
	Finisher1:
		"####" "#" 0 
		{
			A_GiveInventory("GloryKill1Token",1,TargetPtr);
			A_OverlayFlags(PunchOverlay,PSPF_ADDWEAPON,0);
			A_OverlayOffset(PunchOverlay,0,32);
			SetPlayerProperty(0,1,PROP_TOTALLYFROZEN); //player is made invulnerable, unshootable, unmovable and frozen for the duration of the Glory Kill
			A_UnsetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_SetInvulnerable();	}
			A_Stop();
			bDONTTHRUST = true;
		}
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,50);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,30);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-20,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-40,50);
		MELE A 1 A_OverlayOffset(PunchOverlay,40,50);
		MELE B 1 { A_OverlayOffset(PunchOverlay,20,48); A_Playsound("Doom4/Other/MeleeSwing1",CHAN_BODY); }
		MELE C 1 A_OverlayOffset(PunchOverlay,0,40);
		MELE C 1 { A_OverlayOffset(PunchOverlay,-20,35); A_Playsound("Doom4/Weapon/Melee/Punch",CHAN_WEAPON); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-40,35); A_SetAngle(5+angle); A_SetRoll(-5); A_SetPitch(-3); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-60,35); A_SetAngle(5+angle); A_SetRoll(-10); A_SetPitch(-6); }
		MELE C 1 A_OverlayOffset(PunchOverlay,-80,60);
		MELE C 1 A_OverlayOffset(PunchOverlay,-100,80);
		MELE C 1 { A_OverlayOffset(PunchOverlay,-120,100);  A_SetAngle(-2+angle); A_SetRoll(-6); A_SetPitch(-4); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-140,120);  A_SetAngle(-2+angle); A_SetRoll(-3); A_SetPitch(-2); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-180,140);  A_SetAngle(-2+angle); A_SetRoll(0); A_SetPitch(0); }
		MELE C 1 A_OverlayOffset(PunchOverlay,-200,160);
		MELE G 1 A_OverlayOffset(PunchOverlay,20,80);
		MELE G 1 A_OverlayOffset(PunchOverlay,10,70);
		MELE H 1 { A_OverlayOffset(PunchOverlay,0,60); A_Playsound("Doom4/Other/MeleeSwing1",CHAN_BODY); }
		MELE H 1 { A_OverlayOffset(PunchOverlay,10,50);  A_SetRoll(3); A_SetPitch(1); }
		MELE I 1 { A_OverlayOffset(PunchOverlay,10,40);  A_SetRoll(6); A_SetPitch(2); }
		MELE I 1 { A_OverlayOffset(PunchOverlay,10,35); A_Playsound("Doom4/Weapon/Melee/Kick",CHAN_WEAPON); }
		MELE I 1 A_OverlayOffset(PunchOverlay,-10,36);
		MELE I 1 A_OverlayOffset(PunchOverlay,-12,40);
		MELE H 1 A_OverlayOffset(PunchOverlay,-13,48);
		MELE H 1 A_OverlayOffset(PunchOverlay,-16,45);
		MELE H 1 { A_OverlayOffset(PunchOverlay,-18,42);  A_SetRoll(4); A_SetPitch(2); }
		MELE G 1 { A_OverlayOffset(PunchOverlay,-20,50);  A_SetRoll(2); A_SetPitch(1); }
		MELE G 1 { A_OverlayOffset(PunchOverlay,-22,47);  A_SetRoll(0); A_SetPitch(0); }
		MELE G 1 A_OverlayOffset(PunchOverlay,-25,44);
		"####" "#" 0 
		{
			bDONTTHRUST = false;
			A_SetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_UnSetInvulnerable();	}
			A_OverlayOffset(PunchOverlay,1,32); 
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN); 
		}
		Stop;
	Finisher2:	//double punch
		"####" "#" 0 
		{
			A_GiveInventory("GloryKill2Token",1,TargetPtr);
			A_OverlayFlags(PunchOverlay,PSPF_ADDWEAPON,0);
			A_OverlayOffset(PunchOverlay,0,32);
			SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
			A_UnsetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_SetInvulnerable();	}
			A_Stop();
			bDONTTHRUST = true;
		}
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,50);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,30);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-20,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-40,50);
		MELE A 1 A_OverlayOffset(PunchOverlay,40,50);
		MELE B 1 { A_OverlayOffset(PunchOverlay,20,48); A_Playsound("Doom4/Other/MeleeSwing1",CHAN_BODY); }
		MELE C 1 A_OverlayOffset(PunchOverlay,0,40);
		MELE C 1 { A_OverlayOffset(PunchOverlay,-20,35); A_Playsound("Doom4/Weapon/Melee/Punch",CHAN_WEAPON); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-40,35); A_SetAngle(5+angle); A_SetRoll(-5); A_SetPitch(-3); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-60,35); A_SetAngle(5+angle); A_SetRoll(-10); A_SetPitch(-6); }
		MELE C 1 A_OverlayOffset(PunchOverlay,-80,60);
		MELE C 1 A_OverlayOffset(PunchOverlay,-100,80);
		MELE C 1 { A_OverlayOffset(PunchOverlay,-120,100); A_SetAngle(-2+angle); A_SetRoll(-6); A_SetPitch(-4); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-140,120); A_SetAngle(-2+angle); A_SetRoll(-3); A_SetPitch(-2); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-180,140); A_SetAngle(-2+angle); A_SetRoll(0); A_SetPitch(0); }
		MELE C 1 A_OverlayOffset(PunchOverlay,-200,160);
		MELE D 1 A_OverlayOffset(PunchOverlay,-40,50);
		MELE E 1 { A_OverlayOffset(PunchOverlay,-20,48); A_Playsound("Doom4/Other/MeleeSwing1",CHAN_BODY); }
		MELE F 1 A_OverlayOffset(PunchOverlay,0,40);
		MELE F 1 { A_OverlayOffset(PunchOverlay,20,35); A_Playsound("Doom4/Weapon/Melee/Punch",CHAN_WEAPON); }
		MELE F 1 { A_OverlayOffset(PunchOverlay,40,35); A_SetAngle(-5+angle); A_SetRoll(-5); A_SetPitch(-3); }
		MELE F 1 { A_OverlayOffset(PunchOverlay,60,35); A_SetAngle(-5+angle); A_SetRoll(-10); A_SetPitch(-6); }
		MELE F 1 A_OverlayOffset(PunchOverlay,80,60);
		MELE F 1 A_OverlayOffset(PunchOverlay,100,80);
		MELE F 1 { A_OverlayOffset(PunchOverlay,120,100); A_SetAngle(2+angle); A_SetRoll(-6); A_SetPitch(-4); }
		MELE F 1 { A_OverlayOffset(PunchOverlay,140,120); A_SetAngle(2+angle); A_SetRoll(-3); A_SetPitch(-2); }
		MELE F 1 { A_OverlayOffset(PunchOverlay,180,140); A_SetAngle(2+angle); A_SetRoll(0); A_SetPitch(0); }
		MELE F 1 A_OverlayOffset(PunchOverlay,200,160);
		"####" "#" 0 
		{
			bDONTTHRUST = false;
			A_SetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_UnSetInvulnerable();	}
			A_OverlayOffset(PunchOverlay,1,32); 
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
		}
		Stop;
	Finisher3:
		"####" "#" 0 
		{
			A_GiveInventory("GloryKill3Token",1,TargetPtr);
			A_OverlayFlags(PunchOverlay,PSPF_ADDWEAPON,0);
			A_OverlayOffset(PunchOverlay,0,32);
			SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
			A_UnsetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_SetInvulnerable();	}
			A_Stop();
			bDONTTHRUST = true;
		}
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,50);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,30);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-20,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-40,50);
		MELE J 1 { A_OverlayOffset(PunchOverlay,1,40); A_SetAngle(3+angle); A_SetPitch(-2); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-5,0); A_SetAngle(3+angle); A_SetPitch(-4); A_Playsound("Doom4/Other/MeleeSwing1",CHAN_BODY); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-10,-40); A_SetAngle(3+angle); A_SetPitch(-8); }
		MELE J 4 { A_OverlayOffset(PunchOverlay,-25,-90); A_Playsound("Doom4/Weapon/Melee/Punch",CHAN_WEAPON); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-20,-60); A_SetAngle(-2+angle); A_SetPitch(-8); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-15,-30); A_SetAngle(-2+angle); A_SetPitch(-6); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-10,0); A_SetAngle(-2+angle); A_SetPitch(-4); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-5,30); A_SetAngle(-2+angle); A_SetPitch(-2); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,1,60); A_SetAngle(-1+angle); A_SetPitch(0); }
		MELE "]" 1 A_OverlayOffset(PunchOverlay,1,42);
		MELE "]" 1 A_OverlayOffset(PunchOverlay,1,37);
		"####" "#" 0
		{
			bDONTTHRUST = false;
			A_SetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_UnSetInvulnerable();	}
			A_OverlayOffset(PunchOverlay,1,32); 
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
		}
		Stop;
	}
}

Class BusyToken : Inventory { Default { Inventory.InterhubAmount 0; }}

Class FinisherToken : Inventory {}
Class GloryKill1Token : Inventory {}
Class GloryKill2Token : Inventory {}
Class GloryKill3Token : Inventory {}

Class GloryKillPuff : Actor 
{
	Default 
	{
		+NOINTERACTION
		+ALLOWTHRUFLAGS	//to ignore pinky's shield
		+THRUGHOST
		+PUFFGETSOWNER
		+PUFFONACTORS
		+NOTIMEFREEZE
		DamageType "GloryKill";
		+BLOODLESSIMPACT
		+NOEXTREMEDEATH
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay A_GiveToTarget("PunchedAlready",1);
		Stop;
	}
}
Class MeleePunchPuff : Actor 
{
	Default 
	{
		DamageType "MeleePunch";
		-BLOODLESSIMPACT
		-NOEXTREMEDEATH
		+ALLOWTHRUFLAGS	//to ignore pinky's shield
		+THRUGHOST
		+PUFFGETSOWNER
		+PUFFONACTORS
		+NOTIMEFREEZE
	}
	
	override void PostBeginPlay()
	{
		Destroy();
	}
}

//=======================================================================
//=======================================================================
// "Give weapons" identifier
//=======================================================================
//=======================================================================

Class D4IdfaTrap : Weapon 
{
	Default 
	{
		Weapon.SlotNumber 0;
	}
	States 
	{ 
		Ready: Deselect: Select: Fire: TNT1 A 1 A_Lower;
	} 
}
Class IdfaStamp : Inventory {}

//=======================================================================
//=======================================================================
// Ledge grabbing hands
//=======================================================================
//=======================================================================

Class ClimbingHands : Weapon
{
	Default 
	{
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.AMMO_OPTIONAL
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+Weapon.NOAUTOFIRE
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	Select:
		M666 A 0 A_Raise;
		Loop;
	Deselect:	
		M666 A 1;	//Needed.
	DesLoop:
		M666 A 0 A_Lower;
		Loop;
	Ready:
		TNT1 A 5 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
		Wait;
	Fire:
		M666 A 10;
		Goto Ready;
	}
}


//=======================================================================
//=======================================================================
// Impact Compensation
//=======================================================================
//=======================================================================

Class FallingHands : Weapon
{
	int user_veloz;
	int user_velooz;
	Default 
	{
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.NOAUTOFIRE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	Select:
		TNT1 A 0 A_Raise;
		Loop;
	Deselect:	
		TNT1 A 1;	//Needed.
	DesLoop:
		TNT1 A 0 A_Lower;
		Loop;
	Ready:
		TNT1 A 1 
		{
			if(pos.z != floorz)
			{
				A_SetPitch(pitch + frandom(1,2), SPF_INTERPOLATE);
			}
		}
		TNT1 A 0 A_JumpIf(pos.z == floorz, "Impact");
		Loop;
	Impact:
		TNT1 A 0 
		{
			if(pitch < 80) { A_SetPitch(80, SPF_INTERPOLATE); }
			A_Log("Impact Compensation.");
			A_PlaySound("Doom4/Player/Climb",7); // placeholder sound
			A_Overlay(Overlay_AnglePitch,"Visuals");
		}
		TNT1 A 25;
		TNT1 ABCDEFGH 1 A_SetPitch(pitch * 97 / 100 - frandom(0.1,1.0), SPF_INTERPOLATE);
		TNT1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_SetPitch(pitch * 95 / 100 - frandom(0.5,1.5), SPF_INTERPOLATE);
		TNT1 ABCDEFGH 1 A_SetPitch(pitch * 90 / 100 - frandom(0.1,1.0), SPF_INTERPOLATE);
		TNT1 A 0 A_TakeInventory("FallingHands",0x7FFFFFFF);
		TNT1 A 0 A_SelectWeapon("D4Pistol");
		TNT1 A 0 A_WeaponReady;
	Visuals:
		PKFS F 25;
		PKFS EDCBA 8; // placeholder hands animation
		Stop;
	Fire:
		TNT1 A 0 A_SelectWeapon("D4Pistol");
		TNT1 A 0 A_WeaponReady;
		Goto Ready;
	}
}

Class FallingSpeed : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; } }


//=======================================================================
//=======================================================================
// Doom doll
//=======================================================================
//=======================================================================
Class D4DoomDoll : CustomInventory
{
	Default 
	{
		Scale 0.3;
		Inventory.PickupMessage "Picked up a collectible doomguy!";
	}
	States
	{
	Spawn:
		DOLL A -1;
		Stop;
	PickUp:
		TNT1 A 0
		{
			if (CountInv("D4DoomDollHands"))
			{
				A_GiveInventory("DollUses",3);
			}
			else
			{
				A_GiveInventory("DollUses",4);
				ACS_NamedExecute("D4DoomDoll",0,0,0);
			}
		}
		Stop;
	}
}

Class DollUses : Inventory
{
	Default 
	{
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNDROPPABLE
		Inventory.InterhubAmount 10;
		Inventory.MaxAmount 10;
		Inventory.Amount 1;
	}
}

Class D4DoomDollPlaying : Inventory
{	Default { Inventory.InterHubAmount 0;	}}

Class D4DoomDollHands : Weapon
{
	Default 
	{
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.AMMO_OPTIONAL
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+WEAPON.NOAUTOFIRE
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	Select:
		M666 A 0 A_Raise;
		Loop;
	Deselect:	
		M666 A 1;	//Needed.
	DesLoop:
		M666 A 0 A_Lower;
		Loop;
	Ready:
		TNT1 A 0 
		{
			A_GiveInventory("DollBuddha");
			if (CountInv("D4DoomDollUpgrade1"))
			{
				A_GiveInventory("DollSpeed");
				A_GiveInventory("DollJump");
			}
		}
		TNT1 AAAA 1 A_WeaponOffset(-8,20,WOF_ADD);
		DDLL AAAAAAAA 1 A_WeaponOffset(4,-10,WOF_ADD);
		DDLL A 70;
		DDLL BCDEE 1 ;
		"####" F 1
		{
			if (CountInv("D4DoomDollUpgrade2"))
			{
				A_SpawnItemEx("DollExplosion",flags: SXF_NOCHECKPOSITION);
				bFORCERADIUSDMG = bFOILINVUL = true;
				A_Explode(2048, 1024, XF_NOTMISSILE, false, 512);
				bFORCERADIUSDMG = bFOILINVUL = false;
			}
			A_GiveInventory("DollProtection");
			A_GiveInventory("DollPush");
			A_GiveInventory("D4MegaSphereNoBonus");
			if (CountInv("D4RegenUpgrade4") && health < 300)
			{	A_SetHealth(300);	}
			A_TakeInventory("DollUses",1,0);
			A_SpawnItemEx("BroFistPuff",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		DDLL FFFF 1;
		DDLL GHIJKLMNOPQRSTUVWXYZ 2;
		DDL2 ABCDEFGHI 2;
		DDLL AAAAAAAA 1 A_WeaponOffset(-6,10,WOF_ADD);
		TNT1 A 5 ;
		TNT1 A 10000; //just to ensure it wont play again while the script takes it away
		Loop;
	Fire:
		M666 A 1;
		Goto Ready;
	}
}

Class BroFistPuff : Actor 
{
	Default 
	{
	+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);

		}
		TNT1 A 10;
		Stop;
	}
}

Class DollExplosion : Actor
{
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+NOSECTOR
	}
	States
	{
	Spawn:
		TNT1 A 200 NoDelay A_PlaySound("Doom4/Other/DollExplode",CHAN_WEAPON,1,0,ATTN_NONE);
		Stop;
	}
}

Class DollProtBase : PowerProtection
{
	Default 
	{
		DamageFactor "Normal", 0.05;	//takes a tiny bit of damage
	}
}

Class DollProtection : PowerupGiver
{
	Default 
	{
		powerup.duration -8;
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.UNDROPPABLE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		Powerup.Type "DollProtBase";
	}
	States
	{
	Spawn:
		MEGA A 4 Bright;
		Loop;
	}
}

Class DollPush : ArtiBlastRadius
{
	Default 
	{
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.UNDROPPABLE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
	}
	States
	{
	Spawn:
		MEGA A 4 Bright;
		Loop;
	}
}

Class DollBuddha : PowerupGiver
{
	Default 
	{
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		Powerup.Type "PowerBuddha";
		Powerup.Duration 170;
	}
}

Class DollSpeed : PowerupGiver
{
	Default 
	{
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		Powerup.Type "PowerSpeed";
		Powerup.Duration 170;
	}
}

Class DollJump : PowerupGiver
{
	Default 
	{
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		Powerup.Type "PowerHighJump";
		Powerup.Duration 170;
	}
}


//=======================================================================
//=======================================================================
// Casings
//=======================================================================
//=======================================================================

Class BulletCasing : Actor 
{
	Default 
	{
	Projectile;
	-NOGRAVITY
	Radius 4;
	Height 2;
	+THRUACTORS
	Gravity 0.7;
	Scale 0.15;
	Bouncetype "doom";
	BounceFactor 0.5;
	+FORCEXYBILLBOARD
	BounceSound "Doom4/Weapon/BulletCasing";
	}
	States
	{
	Spawn:
		CSNG AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 1; //A_SpawnParticle("696969",0,random(20,40),random(1,2),0,0,0,0,0,0,frandom(0.1,0.6))
		Loop;
	Death:
		"####" "#" 100
		{
			if (GetCvar("user_ShortCasingLives")) { return ResolveState("Null"); }
			return ResolveState(null);
		}
		Stop;
	}
}

Class BulletCasingSilent : BulletCasing
{	Default { BounceSound ""; }}

Class ShellCasing : Actor 
{
	Default 
	{
	Projectile;
	-NOGRAVITY
	Radius 4;
	Height 2;
	+THRUACTORS
	Gravity 0.7;
	Scale 0.22;
	Bouncetype "doom";
	BounceFactor 0.5;
	+FORCEXYBILLBOARD
	BounceSound "Doom4/Weapon/ShellCasing";
	}
	States
	{
	Spawn:
		SHLL AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 1; //A_SpawnParticle("696969",0,random(20,40),random(1,2),0,0,0,0,0,0,frandom(0.1,0.6))
		Loop;
	Death:
		"####" "#" 100
		{
			if (GetCvar("user_ShortCasingLives")) { return ResolveState("Null"); }
			return ResolveState(null);
		}
		Stop;
	}
}

Class ShellCasingSilent : ShellCasing
{	Default { BounceSound ""; }}



//=======================================================================
//=======================================================================
// Tracers
//=======================================================================
//=======================================================================

Class NonPuff : Actor
{
	Default
	{
		+NOINTERACTION
		+PAINLESS
		+BLOODLESSIMPACT
		+NOTIMEFREEZE
		+NOBLOCKMAP
		+ALWAYSPUFF
		+PUFFONACTORS
		+SKYEXPLODE
		Radius 1;
		Height 1;
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 3;
		Stop;
	}
}

Class NonPuffThru : NonPuff
{
	Default
	{
		+ALLOWTHRUFLAGS
		+THRUACTORS
	}
}


Class BulletTracerFX : Actor 
{
	const Sparsity = 125.0;
	const Distance = 3.25;
	const Multiplier = 1;
	const SpawnSpeed = 300;
	const TravelTic = Sparsity * 30.0;
	enum BulletTracerFX
	{
		ModelOnly = 		1,
		ParticleOnly =		2,
		ParticleTrail =		3,
		TrailOnly =			4,
	};
	int user_inv;
	int user_count;
	int user_rng;
	int user_render;
	double user_dista;
	double user_distb;
	
	virtual void FaceMoveDir()
	{
		A_FaceTracer();
		//A_FaceMovementDirection();
		//pitch *= -1;
		A_ChangeVelocity(x: cos(pitch), z: sin(pitch), flags: CVF_RELATIVE|CVF_REPLACE);
	}
	
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTIMEFREEZE
		RenderStyle "None";
		Speed 1;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{	
			user_inv = int(GetCvar("user_TracerFX"));
			if (A_CheckSight("Null") || !user_inv)
			{	return ResolveState("Null");	}
			
			if (tracer) A_FaceTracer(0,0);
			//else FaceMoveDir();
			//FaceMoveDir();
			
			else A_FaceMovementDirection();
			if (user_inv == ModelOnly)
			{	
				A_SpawnItemEx("BulletSmallTracer",0,0,0,vel.x*200,vel.y*200,vel.z*200,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_ABSOLUTEVELOCITY|SXF_TRANSFERPITCH);
				return ResolveState("Null");	
			}
			
			A_Stop();
			user_render = int(GetCvar("vid_renderer"));
			user_count = 1;
			
			if (user_inv >= TrailOnly)
			{	return ResolveState("B1");	}
			
			A_SpawnParticle("FF8800",SPF_FULLBRIGHT|SPF_RELATIVE,10,4 ,0,cos(pitch)*(Distance*1 ),0,-sin(pitch)*(Distance*1 ),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FF8F11",SPF_FULLBRIGHT|SPF_RELATIVE,10,5 ,0,cos(pitch)*(Distance*2 ),0,-sin(pitch)*(Distance*2 ),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FF9822",SPF_FULLBRIGHT|SPF_RELATIVE,10,6 ,0,cos(pitch)*(Distance*3 ),0,-sin(pitch)*(Distance*3 ),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FF9F33",SPF_FULLBRIGHT|SPF_RELATIVE,10,7 ,0,cos(pitch)*(Distance*4 ),0,-sin(pitch)*(Distance*4 ),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFA844",SPF_FULLBRIGHT|SPF_RELATIVE,10,8 ,0,cos(pitch)*(Distance*5 ),0,-sin(pitch)*(Distance*5 ),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFAF55",SPF_FULLBRIGHT|SPF_RELATIVE,10,9 ,0,cos(pitch)*(Distance*6 ),0,-sin(pitch)*(Distance*6 ),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFB866",SPF_FULLBRIGHT|SPF_RELATIVE,10,10,0,cos(pitch)*(Distance*7 ),0,-sin(pitch)*(Distance*7 ),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFBF77",SPF_FULLBRIGHT|SPF_RELATIVE,10,10,0,cos(pitch)*(Distance*8 ),0,-sin(pitch)*(Distance*8 ),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFC888",SPF_FULLBRIGHT|SPF_RELATIVE,10,11,0,cos(pitch)*(Distance*9 ),0,-sin(pitch)*(Distance*9 ),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFCF99",SPF_FULLBRIGHT|SPF_RELATIVE,10,11,0,cos(pitch)*(Distance*10),0,-sin(pitch)*(Distance*10),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFD8AA",SPF_FULLBRIGHT|SPF_RELATIVE,10,12,0,cos(pitch)*(Distance*11),0,-sin(pitch)*(Distance*11),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFDFBB",SPF_FULLBRIGHT|SPF_RELATIVE,10,12,0,cos(pitch)*(Distance*12),0,-sin(pitch)*(Distance*12),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFE8CC",SPF_FULLBRIGHT|SPF_RELATIVE,10,12,0,cos(pitch)*(Distance*13),0,-sin(pitch)*(Distance*13),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFEFDD",SPF_FULLBRIGHT|SPF_RELATIVE,10,13,0,cos(pitch)*(Distance*14),0,-sin(pitch)*(Distance*14),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFF8EE",SPF_FULLBRIGHT|SPF_RELATIVE,10,13,0,cos(pitch)*(Distance*15),0,-sin(pitch)*(Distance*15),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			A_SpawnParticle("FFFFFF",SPF_FULLBRIGHT|SPF_RELATIVE,10,13,0,cos(pitch)*(Distance*16),0,-sin(pitch)*(Distance*16),cos(pitch)*SpawnSpeed,0,-sin(pitch)*SpawnSpeed,0,0,0,1,0);
			
			if (user_inv == ParticleOnly)
			{	return ResolveState("Null");	}

			if (!IsPointerEqual(TracerPtr,NullPtr))
			{	user_distb = Clamp(GetDistance(true,TracerPtr),0.0,3000.0);	}
			else
			{	user_distb = 0;	}
			
			return ResolveState("B1");
		}
	B1:
		TNT1 A 1;
	Break:
		TNT1 A 1 
		{
			if (user_count > 14 || A_CheckSight("Null") || (pos.z < floorz) || (pos.z > ceilingz) ) 
			{	return ResolveState("Null");	} // Destroy it.
			user_dista = 0;
			return ResolveState(null); //Play out the tic.
		}
	Looping:	// Spawns the trail.
		TNT1 A 0
		{
			// If running GZDoom, spawn the neat trail.
			if (user_render)
			{
				if (user_dista <= 0.0)
				{	user_dista = 64.0;	}
				A_SpawnItemEx("BulletTrailBeam",cos(pitch)*user_dista,0,-sin(pitch)*user_dista,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
				user_dista += Sparsity;
			}
			else //Otherwise, do the ol' fashion particles.
			{
				A_SpawnParticle("FFE99E",SPF_FULLBRIGHT|SPF_RELATIVE,100,random(3,6),0,
					cos(pitch)*user_dista,0,-sin(pitch)*user_dista,
					frandom(1.0,2.0),0,0,
					-0.005,0,0.005,
					frandom(0.5,1.0),frandom(0.06,0.12));
				
				user_dista += frandom(3.0,6.0);
			}
			
			if (user_distb > 0.0)
			{
				if (user_dista > user_distb)
				{	return ResolveState("Null");	}
				return ResolveState("Looping");
			}
			else if (user_dista >= TravelTic)
			{
				user_count++;
				A_Warp(DefPtr,cos(pitch)*TravelTic,0,-sin(pitch)*TravelTic,0,WARPF_NOCHECKPOSITION);
				return ResolveState("Break");
			}
			return ResolveState("Looping");
		}
		Loop;
	End:
		TNT1 A 0;
		Stop;
	}
}

Class BulletTracerFXInverted : BulletTracerFX
{
	/*
	override void FaceMoveDir()
	{
		A_FaceMovementDirection();
		pitch *= -1;
		Super.PostBeginPlay();
	} */
}

Class BulletTrailBeam : TrailBeam
{
	Default 
	{
		XScale 0.05;
		YScale 1; //Don't touch.
	}
	States
	{
	Spawn:
		X202 D 0 NoDelay
		{
			// user_time = time to shrink to nothing
			user_time = 4.0;
			A_SpawnItemEx("BulletTrailBeam",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS,tid * 256,1);
			
			return ResolveState("Process");
		}
	}
}

Class BulletTrailBeamInverted : BulletTrailBeam
{
	override void PostBeginPlay()
	{
		pitch *= -1;
		Super.PostBeginPlay();
	}
}

Class PistolTracerNormal : FastProjectile
{
	Default 
	{
		Projectile;
		+RANDOMIZE
		+FORCEXYBILLBOARD
		+DONTSPLASH
		+NOEXTREMEDEATH
		+NOTIMEFREEZE
		damage 0;
		radius 2;
		height 2;
		speed 200;
		RenderStyle "Add";
		alpha 0.9;
		scale 0.2;
		Translation "0:255=%[0,0,0]:[0.5,0.65,1.5]";
	}
	states
	{
	Spawn:
		TRAC A 10 BRIGHT;
		Stop;
	Death:
		TNT1 A 1;
		Stop;
	XDeath:
		TNT1 A 1;
		Stop;
	}
}

Class PistolTracerRed : FastProjectile
{
	Default 
	{
		Projectile;
		+RANDOMIZE
		+FORCEXYBILLBOARD
		+DONTSPLASH
		+NOEXTREMEDEATH
		+NOTIMEFREEZE
		damage 0;
		radius 2;
		height 2;
		speed 200;
		RenderStyle "Add";
		alpha 0.9;
		scale 0.2;
		Translation "0:255=%[0,0,0]:[1.5,0,0]";
	}
	states
	{
	Spawn:
		TRAC A 10 BRIGHT;
		Stop;
	Death:
		TNT1 A 1;
		Stop;
	XDeath:
		TNT1 A 1;
		Stop;
	}
}

Class BulletSmallTracer : FastProjectile
{
	Default 
	{
		Projectile;
		+RANDOMIZE
		+FORCEXYBILLBOARD
		+DONTSPLASH
		+NOEXTREMEDEATH
		+NOTIMEFREEZE
		damage 0;
		radius 2;
		height 2;
		speed 200;
		RenderStyle "Add";
		alpha 0.9;
		scale 0.13;
		//Translation "0:255=%[0,0,0]:[0,1,1.5]";
	}
	states
	{
	Spawn:
		TRAC A 10 BRIGHT;
		Stop;
	Death:
		TNT1 A 1;
		Stop;
	XDeath:
		TNT1 A 1;
		Stop;
	}
}


