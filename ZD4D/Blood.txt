//================================================================
//================================================================
//
//	6.X New Blood Effects
//
//================================================================
//================================================================

/*	Currently available blood colors based on what's been used:

	Primary Color		Darker Color
	----------------------------------
	Red					DarkRed
	Blue 				DarkBlue
	Green				DarkGreen

================================================================================
						How to add new blood colors
================================================================================
1.	Add the new colors if they're not already defined in AEoDdat.pk3 -> 
	X11R6RGB.txt. Name it "AE<Color>".
	
2.	Make a duplicate entry called "AE<Color>D2" and assign half the RGB values.
	D2 stands for 'divide by 2', or half the color.
	
3.	Add "Color_<NameOfBloodColor>" to the enum below.
	This is only needed for the name itself -- do not define one for the D2
	since it's just there for adding extra tidbits and variance.
	
	Find Step 4+ down below.
*/

Struct BloodParticleSpawner play
{
	static void Bleed(Actor caller, Color BC, Vector3 pos = (0, 0, 0), Vector3 vel = (0, 0, 0), double angle = 0)
	{
		if (!caller)
		{
			//Console.Printf("Caller didn't exist");
			return;
		}
		Actor temp;	bool test;
		[test, temp] = caller.A_SpawnItemEx("MCBloodParticle",pos.x,pos.y,pos.z,vel.x,vel.y,vel.z,angle,SXF_NOCHECKPOSITION|SXF_SETTRACER|SXF_ORIGINATOR);
		let part = MCBloodParticle(temp);
		if (part)	part.BC = BC;
	}
}

Class ShortGibToken		: Inventory { Default { +INVENTORY.IGNORESKILL } }
Class BloodSpriteToken	: Inventory { Default { +INVENTORY.IGNORESKILL Inventory.MaxAmount 2;	Inventory.InterHubAmount 2; } }

enum EColors//TIDs ONLY. DO NOT USE IN THE TRANSLATIONS PROPERTY.
{
	Color_NULL				= 0, //
	Color_Blue				= 7,
	Color_Green				= 12,
	Color_Black				= 13,
	Color_Red,
	//STEP 3 RIGHT HERE.
};

Class MCBloodFXMain : Actor replaces Blood
{
	const VelMul = 1.0;
	int user_t;
	Vector3 tvel;
	double user_xv;
	double user_yv;
	double user_zv;
	int user_inv;
	int user_count;
	int user_gib;
	Color BC;
	Default
	{
		//+MISSILE
		+NOBLOCKMAP
		+THRUACTORS
		//+NOTIMEFREEZE
		+DONTSPLASH
		+NOTELESTOMP
		+NOTONAUTOMAP
		+PUFFGETSOWNER
		//+ALWAYSPUFF
		-ALLOWPARTICLES
		+NOINTERACTION
		+NOTELESTOMP
		+FORCEXYBILLBOARD
		//+HITTRACER
		RenderStyle "None";
		Radius 1;
		Height 1;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		let spawner = D4AbstractMonster(target);
		if (spawner)	BC = (spawner.BC);
		
	}
	States
	{
	Spawn:
		// DO NOT REMOVE THESE. According to Graf, two tics are required in order
		// for some internal crap to process as P_SpawnBlood has a special priority.
		// So... LEAVE THESE IN AND DON'T TOUCH THEM.
		TNT1 AA 0 ;
		TNT1 A 0
		{	// Make sure its in range and visible to the player. Don't spawn blood if behind the player.
			if (A_CheckSightOrRange(BloodDistanceLimit,"Null") || abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) > 90.0)
			{
				Thing_ChangeTID(0,0);
				return ResolveState("Null");
			}
			
			user_t = tid;
			Thing_ChangeTID(0,0);
			user_gib = int(GetCvar("user_Giblets"));
			user_inv = int(GetCvar("user_BloodSprites"));
			tvel = vel;
			return ResolveState("SpawnBlood");
		}
		Goto SpawnBlood;
	SpawnBloodColored:
		TNT1 A 0 { user_inv = int(GetCvar("user_BloodSprites")); }
		Goto SpawnBlood;
	SpawnBlood:
		TNT1 AA 1 
		{
			//A_LogInt(2);
			if (user_inv >= 1)
			{	A_SpawnItemEx("MCBloodSprite",frandom(0,2),0,random(1,4),frandom(0,1.5),0,frandom(0.1,2.0),random(0,359),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION,0);	}
			if (user_inv != 1)
			{	
				//A_LogInt(1);
				BC.a = 255;
				BloodParticleSpawner.Bleed(self, BC, (frandom(0,2), 0, random(1,4)), tvel);
				//A_SpawnItemEx("MCBloodParticle",frandom(0,2),0,random(1,4),tvel.x,tvel.y,tvel.z,0,SXF_NOCHECKPOSITION|SXF_SETTRACER|SXF_ORIGINATOR);
			}
		}
		
		TNT1 A 1
		{
			if (GetCvar("D4D_BloodGiblets"))
			{
				for (user_count = 0; user_count < user_gib; user_count++)
				{
					A_SpawnItemEx("BloodGiblet",0,0,0,frandom(2,5),0,frandom(2.5,6.0),random(0,359),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_SETTRACER|SXF_ORIGINATOR,64);
				}
			}
		}
		
		Stop;
	}
}

Class BloodGiblet : Actor
{
	bool other;				// External reasons, nothing to see here! >.>;
	int user_t;
	int user_inv;
	Color BC;
	
	Default
	{
		Projectile;
		-NOGRAVITY
		+THRUACTORS
		Damage 0;
		Height 3;
		Radius 2;
		//Speed 10;
		Gravity 0.5;
		Scale 0.2;
	//	Translation "0:255=%[0,0,0]:[1,0,0]";
		Decal "BloodSplat";
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		let spawner = MCBloodFXMain(tracer);
		if (spawner)	BC = spawner.BC;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			user_inv = int(GetCvar("user_BloodSprites"));
			user_t = tid;
			Thing_ChangeTID(0,0);
		}
	Moving:
		ANYG PQRS 2 
		{
			if (GetCvar("user_BloodTrails") > 0)
			{
				if (user_inv >= 1)
				{	A_SpawnItemEx("MCBloodSprite",0,0,0,0,0,-1.5,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
				if (user_inv >= 2 || user_inv <= 0)
				{	
					BloodParticleSpawner.Bleed(self, BC, (0,0,0), (0,0,-1.5));
				}
			}
		}
		Loop;
	Death:
		ANYG T 1;
		Stop;
	}
}

Class MCBloodFXTrail : MCBloodFXMain
{
	States
	{
	SpawnBlood:
		TNT1 A 1
		{
			if (GetCvar("user_BloodTrails") > 0)
			{
				if (user_inv >= 1)
				{	A_SpawnItemEx("MCBloodSprite",frandom(0,2),0,random(1,4),frandom(0,1.5),0,frandom(0.1,2.0),random(0,359),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION,0);	}
				if (user_inv <= 0 || user_inv >= 2)
				{	
					BloodParticleSpawner.Bleed(self, BC, (frandom(0,2), 0, random(1,4)), tvel);
				}
			}
		}
		Stop;
	}
}

Class MCBloodSprite : Actor
{
	Default
	{
		Projectile;
		+THRUACTORS
		+DONTSPLASH
		//+NOTIMEFREEZE
		+NOTELESTOMP
		+NOTONAUTOMAP
		+PUFFGETSOWNER
		+FORCEXYBILLBOARD
		RenderStyle "Translucent";
		Radius 1;
		Height 1;
		Gravity 0.20;
		Scale 0.3;
		DistanceCheck "user_MaxDrawDistance";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			Thing_ChangeTID(0,0);
			A_SetScale(Scale.X*randompick(-1,1),Scale.Y*randompick(-1,1));
			return A_Jump(256,"B11","B12","B13","B14","B21","B22","B23","B24","B31","B32","B33","B34");
		}
	B11:	X057 A 0 A_Jump(256,"B1Play");
	B12:	XA57 A 0 A_Jump(256,"B1Play");
	B13:	XB57 A 0 A_Jump(256,"B1Play");
	B14:	XC57 A 0 A_Jump(256,"B1Play");
	B1Play:
		"####" ABCDEF 2 A_FadeOut(0.05);
		"####" GHIJK 1 A_FadeOut(0.05);
		"####" LMNOPQRS 1 A_FadeOut(0.03);
		Wait;
	B21:	X058 A 0 A_Jump(256,"B2Play");
	B22:	XA58 A 0 A_Jump(256,"B2Play");
	B23:	XB58 A 0 A_Jump(256,"B2Play");
	B24:	XC58 A 0 A_Jump(256,"B2Play");
	B2Play:
		"####" ABCDEF 2 A_FadeOut(0.05);
		"####" GHIJK 1 A_FadeOut(0.05);
		"####" LMNOPQR 1 A_FadeOut(0.03);
		Wait;
	
	B31:	X059 A 0 A_Jump(256,"B3Play");
	B32:	XA59 A 0 A_Jump(256,"B3Play");
	B33:	XB59 A 0 A_Jump(256,"B3Play");
	B34:	XC59 A 0 A_Jump(256,"B3Play");
	B3Play:
		"####" ABCD 2 A_FadeOut(0.03);
		"####" EFGHIJ 1 A_FadeOut(0.04);
		"####" KLM 1 A_FadeOut(0.05);
		Wait;
	}
}

Class MCBloodParticle : Actor
{
	// Take note, enums are for integers only. Thus, flags and regular numbers
	// can fit inside them, but floats cannot.
	// Do not add color_ definitions here. The scope is inside the actor for a 
	// reason. To find out more on how enums work, see
	// http://zdoom.org/wiki/Constants#DECORATE_usage
	enum MCB
	{
		PFlag = SPF_Relative,
		Lifetime = 		35,		//Self explanatory.
		Size1Min = 		10,		//Size of bigger particle
		Size1Max = 		20,
		Size2Min = 		5,		//Size of smaller particle
		Size2Max = 		10,
		AOff = 			15,		//Angle
		MaxCount1 =		3,		//Max number of big particles
		MaxCount2 =		9,		//Max number of smaller particles
	};
	//Ones without the '2' at the end are for the big particles.
	//Those with the '2' are for the small particles. The default is
	//just to copy them.
	const XOffMin1 = 		1.0;	const XOffMin2 = 		XOffMin1;
	const XOffMax1 = 		-1.0;	const XOffMax2 = 		XOffMax1;
	const XVelMin1 = 		0.5;	const XVelMin2 = 		XVelMin1;
	const XVelMax1 = 		3.0;	const XVelMax2 = 		XVelMax1;
	const XAccMin1 = 		-0.01;	const XAccMin2 = 		XAccMin1;
	const XAccMax1 = 		-0.01;	const XAccMax2 = 		XAccMax1;
	const ZOffMin1 = 		-1.0;	const ZOffMin2 = 		ZOffMin1;
	const ZOffMax1 = 		1.0;	const ZOffMax2 = 		ZOffMax1;
	const ZVelMin1 = 		-0.5;	const ZVelMin2 = 		ZVelMin1;
	const ZVelMax1 = 		2.5;	const ZVelMax2 = 		ZVelMax1;
	const ZAccMin1 = 		-0.36;	const ZAccMin2 = 		ZAccMin1;
	const ZAccMax1 = 		-0.48;	const ZAccMax2 = 		ZAccMax1;
	const StartAlpha1 =		1.0;	const StartAlpha2 =		StartAlpha1;
	const FadeMin1 =		0.04;	const FadeMin2 =		FadeMin1;
	const FadeMax1 =		0.06;	const FadeMax2 =		FadeMax1;
	const PitchOff =		5.0;
	// Multiplies the velocity of the gib-spawned blood by this much. 
	// Has no effect on bullet spawned blood, etc.
	const VelMul = 0.75;
	const YVelMul = VelMul;
	const VelAccel = -0.15;
	int user_t;
	int user_count;
	double  user_vel;
	double  user_angle;
	double  user_pitch;
	bool other;
	Color BC;
	Default
	{
		Projectile;
		+THRUACTORS
		+DONTSPLASH
		//+NOTIMEFREEZE
		+NOTELESTOMP
		+NOTONAUTOMAP
		+PUFFGETSOWNER
		//Translation "0:255=%[0,0,0]:[1,0,0]"
		RenderStyle "None";
		Radius 1;
		Height 1;
		Gravity 0.20;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			Thing_ChangeTID(0,0);
			A_FaceMovementDirection();
			//Vector2 ve2 = vel.xy;
			//user_vel = ve2.Length() * VelMul;
			user_vel = vel.xy.Length() * VelMul;
			user_pitch = pitch;
			user_angle = angle;
		}
	Particle:
		TNT1 A 1
		{
			int mx = MaxCount1 + MaxCount2;
			for (int i = 0; i < mx; i += randompick(1,1,1,2,3))
			{
				A_SetPitch(user_pitch + frandom(-AOff, AOff));
				A_SpawnParticle(BC, PFlag, Lifetime, random(Size1Min,Size1Max), frandom(-AOff, AOff), frandom(XOffMin1,XOffMax1), 0, frandom(ZOffMin1,ZOffMax1), (cos(-pitch) * user_vel) + (frandom(XVelMin1,XVelMax1)), frandom(XVelMin1,XVelMax1) * randompick(-1,1), (((sin(-pitch) * vel.z) * VelMul) + (frandom(-ZVelMax1,ZVelMax1)))/2, frandom(XAccMin1,XAccMax1), 0, frandom(ZAccMin1,ZAccMax1), StartAlpha1, frandom(FadeMin1,FadeMax1));
			}
		}
		Stop;
	}
}


Class MCBloodSplatter : MCBloodSprite replaces BloodSplatter
{}

Class GibBloodSmall : MCBloodFXTrail 
{
	override void PostBeginPlay()
	{
		let spawner = FlyingFlesh(tracer);
		if (spawner) 
		{
			BC = spawner.BC;
		}
		return Super.PostBeginPlay();		
	}
	
	States
	{
	SpawnBlood:
		TNT1 A 1
		{
			if (GetCvar("user_BloodTrails") > 0)
			{
				if (user_inv >= 1)
				{	A_SpawnItemEx("MCBloodSprite",frandom(0,2),0,random(1,4),frandom(0,1.5),0,-1.5,random(0,359),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION,0);	}
				if (user_inv <= 0 || user_inv >= 2)
				{	
					BloodParticleSpawner.Bleed(self, BC, (frandom(0,2), 0, random(1,4)), tvel);
					//A_SpawnItemEx("MCBloodParticle",frandom(0,2),0,random(1,4),user_xv,user_yv,user_zv,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_ABSOLUTEVELOCITY|SXF_SETTRACER,0,user_t);
				}
			}
		}
		Stop;
	}
}


Class GibBloodTrailMediumSize	: MCBloodFXTrail	{}


//===============================================================================
//===============================================================================
//
//	A_TossGib with blood trails
//
//===============================================================================
//===============================================================================
Class FlyingFlesh : Actor
{
	Color BC;
	/*
	override void BeginPlay()
	{
		if (GetClassName() == 'FlyingFlesh')	return Destroy();
		Super.BeginPlay();
	}
	*/
}
Class NewMeat : FlyingFlesh replaces Meat
{
	int user_short;
	int user_time;
	int user_t;
	int user_w;
	Default
	{
		Projectile;
		-NOGRAVITY
		+THRUACTORS
		-NOLIFTDROP
		+DROPOFF
		+NOTELEPORT
		+NOTELESTOMP
		+NOTONAUTOMAP
		-NOGRAVITY
		BounceFactor 0.2;
		BounceType "Doom";
		Decal "BloodSplat";
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		-BOUNCEONWALLS
		+MOVEWITHSECTOR
		Radius 6;
		Height 5;
		Gravity 0.6;
		//speed 30 //for testing
		DistanceCheck "user_MaxDrawDistance";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		let spawner = BloodGibDropper(tracer);
		if (spawner)	BC = spawner.BC;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			user_t = tid;
			Thing_ChangeTID(0,0);
			if(user_t < GibTID)	{	user_w = user_t;	}
			else				{	user_w = user_t - GibTID;	}
			
			return A_Jump(256,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);
		}
		MEAT ABCDEFGHIJLKMNOPQRST 0 { return ResolveState("Play1"); }
	Play1:
		"####" "##" 2 
		{
			if (!A_CheckSightOrRange(BloodDistanceLimit,"Null") && abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) < 90.0)
			{	
				//A_FaceMovementDirection(); 
				A_SpawnItemEx("GibBloodSmall",0,0,0,0,0,-1.5,0,SXF_TRANSFERTRANSLATION|SXF_SETTRACER|SXF_ORIGINATOR,0,user_w);	
			}
		}
		"####" "#" 0 A_CheckFloor("md1");
		"####" "#" 0 { user_time++; }
		"####" "#" 0 A_JumpIf(user_time < 87,"Play1");
// when the gib crashes:
	md1:
	Death:
		"####" "#" 350
		{
			if (GetCvar("D4D_BloodSplatters") && !A_CheckRange(BloodDistanceLimit,"Null",true) && GetCvar("vid_renderer")==1)
			{	
				if (pos.z - floorz <= 16)
				{	A_SpawnItemEx("D4BloodSplatFloor",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
				if (ceilingz - pos.z <= 16)
				{	A_SpawnItemEx("D4BloodSplatCeiling",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
			}
			
			if (user_t >= GibTID || GetCvar("user_ShortGibLives") > 0)
			{	A_SetTics(0);	}
		}
		"####" "#" 1 A_FadeOut();
		Wait;
	}
}

//Class NewMeatGreen	: NewMeat 	{ States { Preplay1:	TNT1 A 0 { user_w = Color_Green;		Goto Super::Preplay2; } }
//Class NewMeatOrange	: NewMeat 	{ States { Preplay1:	TNT1 A 0 { user_w = Color_Orange;		Goto Super::Preplay2; } }
//Class NewMeatGray 	: NewMeat 	{ States { Preplay1:	TNT1 A 0 { user_w = Color_Gray;			Goto Super::Preplay2; } }
//Class NewMeatBlue		: NewMeat 	{ States { Preplay1:	TNT1 A 0 { user_w = Color_Blue;			Goto Super::Preplay2; } }
//Class NewMeatPurple	: NewMeat 	{ States { Preplay1:	TNT1 A 0 { user_w = Color_Purple;		Goto Super::Preplay2; } }

Class NewJunk : Junk replaces Junk
{
	Default
	{
		+NOTELESTOMP
		+THRUACTORS
		+NOTONAUTOMAP
		DistanceCheck "user_MaxDrawDistance";
	}
}

//===============================================================================
//===============================================================================
//
//	Blood style gibs
//
//===============================================================================
//===============================================================================
Class BloodGibDropper : Actor
{
	const CloudFlags = SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY;
	const RAdd = 5;
	int user_count;
	double  user_gibletsdropped;
	double  user_gibletsXYforce;
	double  user_gibletZforce;
	int user_clouds;
	int user_t;
	Color BC;
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		let spawner = D4AbstractMonster(tracer);
		if (spawner) BC = spawner.BC;
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0
		{
			if (A_CheckRange(2048,"Null"))
			{	return ResolveState("CloudOnly");	}
			
			user_t = tid;
			Thing_ChangeTID(0,0);
			
			user_clouds = 			int(GetCvar("user_BloodClouds"));
			user_gibletsdropped = 	int(GetCvar("user_SplatterGiblets")); 		//copy the value from the "gore level" in menu
			user_gibletsXYforce = 	RAdd + (user_gibletsdropped/1.5); 	//base value (RAdd) + number of "gore level"
			user_gibletZforce = 	RAdd + (user_gibletsdropped/2); 	//base value (RAdd) + (number of "gore level"+(number of "gore level" /2))
			A_FaceMovementDirection(0,0);
			if (A_CheckSight("Null") || abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) > 90.0)
			{ return ResolveState("Simple"); }
			return ResolveState(null);
		}
		TNT1 A 0
		{
			user_count = 0;
			while (user_count < user_clouds)
			{	
				A_SpawnItemEx("D4BloodCloud",random(15,-15),random(15,-15),random(20,40),0,0,0,0,CloudFlags);	
				user_count++;
			}
			if (user_gibletsdropped <= 0)
			{	return ResolveState("Null");	}
			return ResolveState(1);
		}
	SpawnGiblets:
		TNT1 A 1
		{
			user_count = 0;
			while (user_count < user_gibletsdropped)
			{	
				A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50), vel.x+frandom(user_gibletsXYforce,-user_gibletsXYforce), vel.y+ frandom(user_gibletsXYforce,-user_gibletsXYforce), frandom(3,user_gibletZforce+4), 0,GibFlags,0,user_t);
				A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50), vel.x+frandom(user_gibletsXYforce,-user_gibletsXYforce), vel.y+ frandom(user_gibletsXYforce,-user_gibletsXYforce), frandom(3,user_gibletZforce+4), 0,GibFlags,64,user_t);
				A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50), vel.x+frandom(user_gibletsXYforce,-user_gibletsXYforce), vel.y+ frandom(user_gibletsXYforce,-user_gibletsXYforce), frandom(3,user_gibletZforce+4), 0,GibFlags,128,user_t);
				A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50), vel.x+frandom(user_gibletsXYforce,-user_gibletsXYforce), vel.y+ frandom(user_gibletsXYforce,-user_gibletsXYforce), frandom(3,user_gibletZforce+4), 0,GibFlags,192,user_t);
				A_SpawnItemEx("BloodGib1",random(25,-25),random(25,-25),random(10,50), vel.x+frandom(user_gibletsXYforce,-user_gibletsXYforce), vel.y+ frandom(user_gibletsXYforce,-user_gibletsXYforce), frandom(3,user_gibletZforce+4), 0,GibFlags,200,user_t);
				A_SpawnItemEx("BloodGib2",random(25,-25),random(25,-25),random(10,50), vel.x+frandom(user_gibletsXYforce,-user_gibletsXYforce), vel.y+ frandom(user_gibletsXYforce,-user_gibletsXYforce), frandom(3,user_gibletZforce+4), 0,GibFlags,200,user_t);
				A_SpawnItemEx("BloodGib3",random(25,-25),random(25,-25),random(10,50), vel.x+frandom(user_gibletsXYforce,-user_gibletsXYforce), vel.y+ frandom(user_gibletsXYforce,-user_gibletsXYforce), frandom(3,user_gibletZforce+4), 0,GibFlags,200,user_t);
				A_SpawnItemEx("BloodGib4",random(25,-25),random(25,-25),random(10,50), vel.x+frandom(user_gibletsXYforce,-user_gibletsXYforce), vel.y+ frandom(user_gibletsXYforce,-user_gibletsXYforce), frandom(3,user_gibletZforce+4), 0,GibFlags,200,user_t);
				user_count++;
			}
		}
		Stop;
	Simple:
		TNT1 A 0 { if (int(GetCvar("user_BloodClouds")) > 0)	{	A_SpawnItemEx("D4BloodCloud",random(15,-15),random(15,-15),random(20,40),0,0,0,0,CloudFlags);	} }
		TNT1 A 1
		{
			if (user_gibletsdropped <= 0)
			{	return Destroy();	}
			A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50),random(1,2)*vel.x+frandom(-5,5),random(1,2)*vel.y+frandom(-5,5),frandom(1,2)*vel.z+frandom(1,10),random(-30,30),GibFlags,0,user_t);
			A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50),random(1,2)*vel.x+frandom(-5,5),random(1,2)*vel.y+frandom(-5,5),frandom(1,2)*vel.z+frandom(1,10),random(-30,30),GibFlags,0,user_t);
			A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50),random(1,2)*vel.x+frandom(-5,5),random(1,2)*vel.y+frandom(-5,5),frandom(1,2)*vel.z+frandom(1,10),random(-30,30),GibFlags,0,user_t);
			A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50),random(1,2)*vel.x+frandom(-5,5),random(1,2)*vel.y+frandom(-5,5),frandom(1,2)*vel.z+frandom(1,10),random(-30,30),GibFlags,0,user_t);
			A_SpawnItemEx("BloodGib1",random(25,-25),random(25,-25),random(10,50),vel.x*frandom(1,2)+frandom(-RAdd,RAdd),vel.y*frandom(1,2)+frandom(-RAdd,RAdd),frandom(0.5,RAdd),0,GibFlags,0,user_t);
			A_SpawnItemEx("BloodGib2",random(25,-25),random(25,-25),random(10,50),vel.x*frandom(1,2)+frandom(-RAdd,RAdd),vel.y*frandom(1,2)+frandom(-RAdd,RAdd),frandom(0.5,RAdd),0,GibFlags,0,user_t);
			A_SpawnItemEx("BloodGib3",random(25,-25),random(25,-25),random(10,50),vel.x*frandom(1,2)+frandom(-RAdd,RAdd),vel.y*frandom(1,2)+frandom(-RAdd,RAdd),frandom(0.5,RAdd),0,GibFlags,0,user_t);
			A_SpawnItemEx("BloodGib4",random(25,-25),random(25,-25),random(10,50),vel.x*frandom(1,2)+frandom(-RAdd,RAdd),vel.y*frandom(1,2)+frandom(-RAdd,RAdd),frandom(0.5,RAdd),0,GibFlags,0,user_t);
		}
		Stop;
	CloudOnly:
		TNT1 A 0
		{
			A_SpawnItemEx("D4BloodCloud",random(15,-15),random(15,-15),random(20,40),0,0,0,0,CloudFlags);
		}
		Stop;
	}
}


//--------------------------------
Class D4BloodCloud : Actor
{

	Default
	{
		+NOINTERACTION
		+CLIENTSIDEONLY
		+FORCEXYBILLBOARD
		Scale 0.45;
	}
	double user_gibletsdropped;
	double user_growincrement;
	States
	{
	Spawn:
		TNT1 A 0 NODELAY
		{
			user_gibletsdropped = int(GetCvar("user_Giblets")); //copy the value from the "gore level" in menu
			user_growincrement = 0.03+(user_gibletsdropped/150); //base value (RAdd) + number of "gore level"
		}
		TNT1 A 0 A_Jump(256,1,2,3,4,5,6);
		X050 CDEFGH 0	
		{ return ResolveState("PlayOut"); }
	PlayOut:
		"####" "#" 0
		{
			if(user_gibletsdropped ==0)
			{
				return ResolveState("MinGore");
			}
			else
			{
				return ResolveState("IncreasedGore");
			}
		}
	MinGore:	//when gore = 0, will grow to 0.03
		"####" "#" 1 
		{
			A_FadeOut(0.03);
			A_SetScale(Scale.X+0.03);
		}
		Wait;
	IncreasedGore: //when gore != 0, will increase depending on the gore level
		"####" "#" 1 
		{
			A_FadeOut(0.03);
			A_SetScale(Scale.X + user_growincrement);
		}
		Wait;
	}
}

//***************************************
Class BloodGib1 : FlyingFlesh
{
	int user_t;
	int user_c;
	int user_w;
	Default
	{
		Projectile;
		-NOGRAVITY
		+THRUACTORS
		-NOLIFTDROP
		+DROPOFF
		+NOTELEPORT
		+NOTELESTOMP
		+NOTONAUTOMAP
		-NOGRAVITY
		BounceFactor 0.2;
		BounceType "Doom";
		+BOUNCEONFLOORS	
		+BOUNCEONCEILINGS
		-BOUNCEONWALLS
		+MOVEWITHSECTOR
		Scale 0.6;
		Radius 6;
		Height 5;
		Gravity 0.7;
		// speed 30 //for testing
		DistanceCheck "user_MaxDrawDistance";
		Decal "BloodSplat";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		let spawner = BloodGibDropper(tracer);
		if (spawner)	BC = spawner.BC;
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			user_t = tid;
			Thing_ChangeTID(0,0);
			A_SetScale((Scale.X-(Scale.X*frandom(-0.10,0.10)))*randompick(-1,1),Scale.Y-(Scale.Y*frandom(-0.10,0.10)));
			user_w = user_t;
			if(user_w >= GibTID)
			{	user_w = user_t - GibTID;	}
			//ThrustThingZ(0,random(12,80),0,1);
		}
		Goto Looping;
	Looping:
		ANYG AABBCCDD 2 
		{
			if (!A_CheckSightOrRange(BloodDistanceLimit,"Null") && abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) < 90.0)
			{	
				//A_FaceMovementDirection(); 
				A_SpawnItemEx("GibBloodSmall",0,0,0,0,0,-1.5,0,SXF_TRANSFERTRANSLATION|SXF_SETTRACER|SXF_ORIGINATOR,0,user_t);	
			}
		}
		"####" "#" 0 A_CheckFloor("Death");
		"####" "#" 0 { user_c++; }
		"####" "#" 0 A_JumpIf(user_c > 5,"Death");
		Loop;
	Death:
		ANYG E 300
		{
			A_SetTics(random(300,600));
			if (GetCvar("D4D_BloodSplatters") && !A_CheckRange(BloodDistanceLimit,"Null",true) && GetCvar("vid_renderer")==1)
			{	
				if (pos.z - floorz <= 16)
				{	A_SpawnItemEx("D4BloodSplatFloor",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
				if (ceilingz - pos.z <= 16)
				{	A_SpawnItemEx("D4BloodSplatCeiling",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
			}
			
			bNoLiftDrop = false;
			if (user_t >= GibTID || GetCvar("user_ShortGibLives") > 0)
			{	A_SetTics(0);	}
		}
		ANYG E 1 A_FadeOut();
		Wait;
	}
}

Class BloodGib2 : BloodGib1		//eye
{

	Default
	{
		Scale 0.4;
		Speed 7;
		Decal "BloodSplat";
	}
	States
	{
	Looping:
		ANYG FFGGHHII 2 
		{
			if (!A_CheckSightOrRange(BloodDistanceLimit,"Null") && abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) < 90.0)
			{	
				//A_FaceMovementDirection(); 
				A_SpawnItemEx("GibBloodSmall",0,0,0,0,0,-1.5,0,SXF_TRANSFERTRANSLATION|SXF_SETTRACER|SXF_ORIGINATOR,0,user_t);	
			}
		}
		"####" "#" 0 A_CheckFloor("Death");
		"####" "#" 0 { user_c++; }
		"####" "#" 0 A_JumpIf(user_c > 5,"Death");
		Loop;
	Death:
		ANYG J 300
		{
			A_SetTics(random(300,600));
			if (GetCvar("D4D_BloodSplatters") && !A_CheckRange(BloodDistanceLimit,"Null",true) && GetCvar("vid_renderer")==1)
			{	
				if (pos.z - floorz <= 16)
				{	A_SpawnItemEx("D4BloodSplatFloor",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
				if (ceilingz - pos.z <= 16)
				{	A_SpawnItemEx("D4BloodSplatCeiling",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
			}
			
			bNoLiftDrop = false;
			if (user_t >= GibTID || GetCvar("user_ShortGibLives") > 0)
			{	A_SetTics(0);	}
		}
		ANYG J 1 A_FadeOut();
		Wait;
	}
}

Class BloodGib3 : BloodGib1		//liver
{

	Default
	{
		Scale 0.6;
		Speed 7;
		Decal "BloodSplat";
	}
	States
	{
	Looping:
		ANYG KKLLMMNN 2 
		{
			if (!A_CheckSightOrRange(BloodDistanceLimit,"Null") && abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) < 90.0)
			{	
				//A_FaceMovementDirection(); 
				A_SpawnItemEx("GibBloodSmall",0,0,0,0,0,-1.5,0,SXF_TRANSFERTRANSLATION|SXF_SETTRACER|SXF_ORIGINATOR,0,user_t);	
			}
		}
		"####" "#" 0 A_CheckFloor("Death");
		"####" "#" 0 { user_c++; }
		"####" "#" 0 A_JumpIf(user_c > 5,"Death");
		Loop;
	Death:
		ANYG O 300 
		{
			A_SetTics(random(300,600));
			if (GetCvar("D4D_BloodSplatters") && !A_CheckRange(BloodDistanceLimit,"Null",true) && GetCvar("vid_renderer"))
			{	
				if (pos.z - floorz <= 16)
				{	A_SpawnItemEx("D4BloodSplatFloor",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
				if (ceilingz - pos.z <= 16)
				{	A_SpawnItemEx("D4BloodSplatCeiling",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
			}
			
			bNoLiftDrop = false;
			if (user_t >= GibTID || GetCvar("user_ShortGibLives") > 0)
			{	A_SetTics(0);	}
		}
		ANYG O 1 A_FadeOut();
		Wait;
	}
}

Class BloodGib4 : BloodGib1		//bloodthing
{
	Default
	{
		Scale 0.6;
		Speed 7;
		Decal "BloodSplat";
	}
	States
	{
	Looping:
		ANYG PPQQRRSS 2 
		{
			if (!A_CheckSightOrRange(BloodDistanceLimit,"Null") && abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) < 90.0)
			{	
				//A_FaceMovementDirection(); 
				A_SpawnItemEx("GibBloodSmall",0,0,0,0,0,-1.5,0,SXF_TRANSFERTRANSLATION|SXF_SETTRACER|SXF_ORIGINATOR,0,user_t);	
			}
		}
		"####" "#" 0 A_CheckFloor("Death");
		"####" "#" 0 { user_c++; }
		"####" "#" 0 A_JumpIf(user_c > 5,"Death");
		Loop;
	Death:
		ANYG T random(300,600)
		{
			if (GetCvar("D4D_BloodSplatters") && !A_CheckRange(BloodDistanceLimit,"Null",true) && GetCvar("vid_renderer")==1)
			{	
				if (pos.z - floorz <= 16)
				{	A_SpawnItemEx("D4BloodSplatFloor",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
				if (ceilingz - pos.z <= 16)
				{	A_SpawnItemEx("D4BloodSplatCeiling",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
			}
			
			bNoLiftDrop = false;
			if (user_t >= GibTID || GetCvar("user_ShortGibLives") > 0)
			{	A_SetTics(0);	}
		}
		ANYG T 1 A_FadeOut();
		Wait;
	}
}

/*==============================================================================
================================================================================
								Blood Splats

						  Developed by Major Cooke
						  
	Yes, I gave Kinsie a prototype of this for MetaDoom. Fucking sue me.
	   I DONT CARE. I'll use it as I damn well please, it's my code!
================================================================================
==============================================================================*/

Class D4BloodSplatFloor : Actor
{
	enum Blood
	{
		CosStart = 90,
		MinTics = 35*1,	//Smallest time it takes to reach full size in seconds.
		MaxTics = 35*2,	//Largest time it takes to reach full size in seconds.
	};
	int user_gettime;
	int user_lifetime;
	int user_water;
	int user_scaletime;
	double user_t;
	double user_cos;
	double user_z;
	int user_warpflags;
	double user_xyza;
	double user_xyzb;
	double user_xyzc;
	
	Default
	{
		Radius 1;
		Height 1;
		Scale 0;
		Projectile;
		+NOINTERACTION
		+NOBLOCKMAP
		+NOTRIGGER
		+NOTELESTOMP
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		+DONTSPLASH
		+FLATSPRITE
		+ROLLCENTER
		+NOTONAUTOMAP
		//RenderStyle "Shaded";
		//StencilColor "7b 00 00";
		Species "BloodSplat";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			user_warpflags = WARPF_NOCHECKPOSITION|WARPF_TOFLOOR;
			user_xyza = 0;
			user_xyzb = 0;
			user_xyzc = frandom(0.0100000, 0.0199999);
		}
		Goto Prepare;
	Prepare:
		TNT1 A 0 
		{
			// Divide any TID we get by 100 which serves as scaling. 
			// If there isn't any, assume a default scale.
			user_t =			(tid > 0) ? (tid / 100) : 0.5;
			Thing_ChangeTID(0,0);
			pitch = 			0;
			roll += 			random(-20,20);
			angle += 			random(-20,20);
			user_gettime = 		int(GetCvar("D4D_BloodTime") * 35);
			user_cos = 			CosStart;
			user_scaletime = 	random(MinTics,MaxTics);
			//This should only be needed once. MOVEWITHSECTOR and RELATIVETOFLOOR
			//should, in theory,  take care of everything else.
			
			A_Warp(AAPTR_DEFAULT,user_xyza,user_xyzb,user_xyzc,0,user_warpflags);
			user_z = 			pos.z;
			return				A_Jump(256,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19);
		}
		
		DBLD ABCDEFGHIJKLMNOPQRS 0 { return ResolveState("ScaleIn");	}
	ScaleIn:
		"####" "#" 1
		{
			user_cos -= 		(CosStart / user_scaletime);
			A_SetScale(cos(user_cos) * user_t);
			if (user_cos <= 0)
			{	return ResolveState("Waiting");	}
			return ResolveState(null);
		}
		Wait;
	Waiting:
		"####" "#" 35
		{
			if (waterlevel >= 1)
			{
				A_SetTics(1);
				A_SetScale(Scale.X + 0.01);
				A_FadeOut(0.01);
				return ResolveState(null);
			}
			
			if (CheckClass("D4BloodSplatCeiling") && ceilingz < pos.z)
			{
				user_xyzc = ceilingz - frandom(0.0100000, 0.0199999);
				A_Warp(AAPTR_DEFAULT,user_xyza,user_xyzb,user_xyzc,0,user_warpflags);
				user_z = pos.z;
			}
			else if (user_z != pos.z)
			{
				user_xyzc = frandom(0.0100000, 0.0199999);
				A_Warp(AAPTR_DEFAULT,user_xyza,user_xyzb,user_xyzc,0,user_warpflags);
				user_z = pos.z;
			}
		
			// If still ticking up the clock...
			if (user_lifetime < user_gettime)
			{
				//Keep going.
				user_lifetime += 35;
				return ResolveState(null);
			}
			return ResolveState("FadeOut");
		}
		Wait;
	FadeOut:
		"####" "#" 1 A_FadeOut(0.02);
		Wait;
	}
}

Class D4BloodSplatCeiling : D4BloodSplatFloor
{

	Default
	{
		-RELATIVETOFLOOR
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			user_warpflags = WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEPOSITION;
			user_xyza = pos.x;
			user_xyzb = pos.y;
			user_xyzc = ceilingz - frandom(0.0100000, 0.0199999);
		}
		Goto Prepare;
	}
}